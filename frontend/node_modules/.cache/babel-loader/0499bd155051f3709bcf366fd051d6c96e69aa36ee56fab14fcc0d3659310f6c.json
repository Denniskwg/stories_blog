{"ast":null,"code":"// src/utils/CryptoUtils.ts\nimport CryptoJS from \"crypto-js/core.js\";\nimport sha256 from \"crypto-js/sha256.js\";\nimport Base64 from \"crypto-js/enc-base64.js\";\nimport Utf8 from \"crypto-js/enc-utf8.js\";\n\n// src/utils/Logger.ts\nvar nopLogger = {\n  debug: () => void 0,\n  info: () => void 0,\n  warn: () => void 0,\n  error: () => void 0\n};\nvar level;\nvar logger;\nvar Log = /* @__PURE__ */(Log2 => {\n  Log2[Log2[\"NONE\"] = 0] = \"NONE\";\n  Log2[Log2[\"ERROR\"] = 1] = \"ERROR\";\n  Log2[Log2[\"WARN\"] = 2] = \"WARN\";\n  Log2[Log2[\"INFO\"] = 3] = \"INFO\";\n  Log2[Log2[\"DEBUG\"] = 4] = \"DEBUG\";\n  return Log2;\n})(Log || {});\n(Log2 => {\n  function reset() {\n    level = 3 /* INFO */;\n    logger = nopLogger;\n  }\n  Log2.reset = reset;\n  function setLevel(value) {\n    if (!(0 /* NONE */ <= value && value <= 4 /* DEBUG */)) {\n      throw new Error(\"Invalid log level\");\n    }\n    level = value;\n  }\n  Log2.setLevel = setLevel;\n  function setLogger(value) {\n    logger = value;\n  }\n  Log2.setLogger = setLogger;\n})(Log || (Log = {}));\nvar Logger = class {\n  constructor(_name) {\n    this._name = _name;\n  }\n  /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n  debug(...args) {\n    if (level >= 4 /* DEBUG */) {\n      logger.debug(Logger._format(this._name, this._method), ...args);\n    }\n  }\n  info(...args) {\n    if (level >= 3 /* INFO */) {\n      logger.info(Logger._format(this._name, this._method), ...args);\n    }\n  }\n  warn(...args) {\n    if (level >= 2 /* WARN */) {\n      logger.warn(Logger._format(this._name, this._method), ...args);\n    }\n  }\n  error(...args) {\n    if (level >= 1 /* ERROR */) {\n      logger.error(Logger._format(this._name, this._method), ...args);\n    }\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\n  throw(err) {\n    this.error(err);\n    throw err;\n  }\n  create(method) {\n    const methodLogger = Object.create(this);\n    methodLogger._method = method;\n    methodLogger.debug(\"begin\");\n    return methodLogger;\n  }\n  static createStatic(name, staticMethod) {\n    const staticLogger = new Logger(`${name}.${staticMethod}`);\n    staticLogger.debug(\"begin\");\n    return staticLogger;\n  }\n  static _format(name, method) {\n    const prefix = `[${name}]`;\n    return method ? `${prefix} ${method}:` : prefix;\n  }\n  /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n  // helpers for static class methods\n  static debug(name, ...args) {\n    if (level >= 4 /* DEBUG */) {\n      logger.debug(Logger._format(name), ...args);\n    }\n  }\n  static info(name, ...args) {\n    if (level >= 3 /* INFO */) {\n      logger.info(Logger._format(name), ...args);\n    }\n  }\n  static warn(name, ...args) {\n    if (level >= 2 /* WARN */) {\n      logger.warn(Logger._format(name), ...args);\n    }\n  }\n  static error(name, ...args) {\n    if (level >= 1 /* ERROR */) {\n      logger.error(Logger._format(name), ...args);\n    }\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\n};\n\nLog.reset();\n\n// src/utils/CryptoUtils.ts\nvar UUID_V4_TEMPLATE = \"10000000-1000-4000-8000-100000000000\";\nvar CryptoUtils = class {\n  static _randomWord() {\n    return CryptoJS.lib.WordArray.random(1).words[0];\n  }\n  /**\n   * Generates RFC4122 version 4 guid\n   */\n  static generateUUIDv4() {\n    const uuid = UUID_V4_TEMPLATE.replace(/[018]/g, c => (+c ^ CryptoUtils._randomWord() & 15 >> +c / 4).toString(16));\n    return uuid.replace(/-/g, \"\");\n  }\n  /**\n   * PKCE: Generate a code verifier\n   */\n  static generateCodeVerifier() {\n    return CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4();\n  }\n  /**\n   * PKCE: Generate a code challenge\n   */\n  static generateCodeChallenge(code_verifier) {\n    try {\n      const hashed = sha256(code_verifier);\n      return Base64.stringify(hashed).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n    } catch (err) {\n      Logger.error(\"CryptoUtils.generateCodeChallenge\", err);\n      throw err;\n    }\n  }\n  /**\n   * Generates a base64-encoded string for a basic auth header\n   */\n  static generateBasicAuth(client_id, client_secret) {\n    const basicAuth = Utf8.parse([client_id, client_secret].join(\":\"));\n    return Base64.stringify(basicAuth);\n  }\n};\n\n// src/utils/Event.ts\nvar Event = class {\n  constructor(_name) {\n    this._name = _name;\n    this._logger = new Logger(`Event('${this._name}')`);\n    this._callbacks = [];\n  }\n  addHandler(cb) {\n    this._callbacks.push(cb);\n    return () => this.removeHandler(cb);\n  }\n  removeHandler(cb) {\n    const idx = this._callbacks.lastIndexOf(cb);\n    if (idx >= 0) {\n      this._callbacks.splice(idx, 1);\n    }\n  }\n  raise(...ev) {\n    this._logger.debug(\"raise:\", ...ev);\n    for (const cb of this._callbacks) {\n      void cb(...ev);\n    }\n  }\n};\n\n// src/utils/JwtUtils.ts\nimport jwt_decode from \"jwt-decode\";\nvar JwtUtils = class {\n  // IMPORTANT: doesn't validate the token\n  static decode(token) {\n    try {\n      return jwt_decode(token);\n    } catch (err) {\n      Logger.error(\"JwtUtils.decode\", err);\n      throw err;\n    }\n  }\n};\n\n// src/utils/PopupUtils.ts\nvar PopupUtils = class {\n  /**\n   * Populates a map of window features with a placement centered in front of\n   * the current window. If no explicit width is given, a default value is\n   * binned into [800, 720, 600, 480, 360] based on the current window's width.\n   */\n  static center({\n    ...features\n  }) {\n    var _a, _b, _c;\n    if (features.width == null) features.width = (_a = [800, 720, 600, 480].find(width => width <= window.outerWidth / 1.618)) != null ? _a : 360;\n    (_b = features.left) != null ? _b : features.left = Math.max(0, Math.round(window.screenX + (window.outerWidth - features.width) / 2));\n    if (features.height != null) (_c = features.top) != null ? _c : features.top = Math.max(0, Math.round(window.screenY + (window.outerHeight - features.height) / 2));\n    return features;\n  }\n  static serialize(features) {\n    return Object.entries(features).filter(([, value]) => value != null).map(([key, value]) => `${key}=${typeof value !== \"boolean\" ? value : value ? \"yes\" : \"no\"}`).join(\",\");\n  }\n};\n\n// src/utils/Timer.ts\nvar Timer = class extends Event {\n  constructor() {\n    super(...arguments);\n    this._logger = new Logger(`Timer('${this._name}')`);\n    this._timerHandle = null;\n    this._expiration = 0;\n    this._callback = () => {\n      const diff = this._expiration - Timer.getEpochTime();\n      this._logger.debug(\"timer completes in\", diff);\n      if (this._expiration <= Timer.getEpochTime()) {\n        this.cancel();\n        super.raise();\n      }\n    };\n  }\n  // get the time\n  static getEpochTime() {\n    return Math.floor(Date.now() / 1e3);\n  }\n  init(durationInSeconds) {\n    const logger2 = this._logger.create(\"init\");\n    durationInSeconds = Math.max(Math.floor(durationInSeconds), 1);\n    const expiration = Timer.getEpochTime() + durationInSeconds;\n    if (this.expiration === expiration && this._timerHandle) {\n      logger2.debug(\"skipping since already initialized for expiration at\", this.expiration);\n      return;\n    }\n    this.cancel();\n    logger2.debug(\"using duration\", durationInSeconds);\n    this._expiration = expiration;\n    const timerDurationInSeconds = Math.min(durationInSeconds, 5);\n    this._timerHandle = setInterval(this._callback, timerDurationInSeconds * 1e3);\n  }\n  get expiration() {\n    return this._expiration;\n  }\n  cancel() {\n    this._logger.create(\"cancel\");\n    if (this._timerHandle) {\n      clearInterval(this._timerHandle);\n      this._timerHandle = null;\n    }\n  }\n};\n\n// src/utils/UrlUtils.ts\nvar UrlUtils = class {\n  static readParams(url, responseMode = \"query\") {\n    if (!url) throw new TypeError(\"Invalid URL\");\n    const parsedUrl = new URL(url, \"http://127.0.0.1\");\n    const params = parsedUrl[responseMode === \"fragment\" ? \"hash\" : \"search\"];\n    return new URLSearchParams(params.slice(1));\n  }\n};\n\n// src/errors/ErrorResponse.ts\nvar ErrorResponse = class extends Error {\n  constructor(args, form) {\n    var _a, _b, _c;\n    super(args.error_description || args.error || \"\");\n    this.form = form;\n    /** Marker to detect class: \"ErrorResponse\" */\n    this.name = \"ErrorResponse\";\n    if (!args.error) {\n      Logger.error(\"ErrorResponse\", \"No error passed\");\n      throw new Error(\"No error passed\");\n    }\n    this.error = args.error;\n    this.error_description = (_a = args.error_description) != null ? _a : null;\n    this.error_uri = (_b = args.error_uri) != null ? _b : null;\n    this.state = args.userState;\n    this.session_state = (_c = args.session_state) != null ? _c : null;\n  }\n};\n\n// src/errors/ErrorTimeout.ts\nvar ErrorTimeout = class extends Error {\n  constructor(message) {\n    super(message);\n    /** Marker to detect class: \"ErrorTimeout\" */\n    this.name = \"ErrorTimeout\";\n  }\n};\n\n// src/AccessTokenEvents.ts\nvar AccessTokenEvents = class {\n  constructor(args) {\n    this._logger = new Logger(\"AccessTokenEvents\");\n    this._expiringTimer = new Timer(\"Access token expiring\");\n    this._expiredTimer = new Timer(\"Access token expired\");\n    this._expiringNotificationTimeInSeconds = args.expiringNotificationTimeInSeconds;\n  }\n  load(container) {\n    const logger2 = this._logger.create(\"load\");\n    if (container.access_token && container.expires_in !== void 0) {\n      const duration = container.expires_in;\n      logger2.debug(\"access token present, remaining duration:\", duration);\n      if (duration > 0) {\n        let expiring = duration - this._expiringNotificationTimeInSeconds;\n        if (expiring <= 0) {\n          expiring = 1;\n        }\n        logger2.debug(\"registering expiring timer, raising in\", expiring, \"seconds\");\n        this._expiringTimer.init(expiring);\n      } else {\n        logger2.debug(\"canceling existing expiring timer because we're past expiration.\");\n        this._expiringTimer.cancel();\n      }\n      const expired = duration + 1;\n      logger2.debug(\"registering expired timer, raising in\", expired, \"seconds\");\n      this._expiredTimer.init(expired);\n    } else {\n      this._expiringTimer.cancel();\n      this._expiredTimer.cancel();\n    }\n  }\n  unload() {\n    this._logger.debug(\"unload: canceling existing access token timers\");\n    this._expiringTimer.cancel();\n    this._expiredTimer.cancel();\n  }\n  /**\n   * Add callback: Raised prior to the access token expiring.\n   */\n  addAccessTokenExpiring(cb) {\n    return this._expiringTimer.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised prior to the access token expiring.\n   */\n  removeAccessTokenExpiring(cb) {\n    this._expiringTimer.removeHandler(cb);\n  }\n  /**\n   * Add callback: Raised after the access token has expired.\n   */\n  addAccessTokenExpired(cb) {\n    return this._expiredTimer.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised after the access token has expired.\n   */\n  removeAccessTokenExpired(cb) {\n    this._expiredTimer.removeHandler(cb);\n  }\n};\n\n// src/CheckSessionIFrame.ts\nvar CheckSessionIFrame = class {\n  constructor(_callback, _client_id, url, _intervalInSeconds, _stopOnError) {\n    this._callback = _callback;\n    this._client_id = _client_id;\n    this._intervalInSeconds = _intervalInSeconds;\n    this._stopOnError = _stopOnError;\n    this._logger = new Logger(\"CheckSessionIFrame\");\n    this._timer = null;\n    this._session_state = null;\n    this._message = e => {\n      if (e.origin === this._frame_origin && e.source === this._frame.contentWindow) {\n        if (e.data === \"error\") {\n          this._logger.error(\"error message from check session op iframe\");\n          if (this._stopOnError) {\n            this.stop();\n          }\n        } else if (e.data === \"changed\") {\n          this._logger.debug(\"changed message from check session op iframe\");\n          this.stop();\n          void this._callback();\n        } else {\n          this._logger.debug(e.data + \" message from check session op iframe\");\n        }\n      }\n    };\n    const parsedUrl = new URL(url);\n    this._frame_origin = parsedUrl.origin;\n    this._frame = window.document.createElement(\"iframe\");\n    this._frame.style.visibility = \"hidden\";\n    this._frame.style.position = \"fixed\";\n    this._frame.style.left = \"-1000px\";\n    this._frame.style.top = \"0\";\n    this._frame.width = \"0\";\n    this._frame.height = \"0\";\n    this._frame.src = parsedUrl.href;\n  }\n  load() {\n    return new Promise(resolve => {\n      this._frame.onload = () => {\n        resolve();\n      };\n      window.document.body.appendChild(this._frame);\n      window.addEventListener(\"message\", this._message, false);\n    });\n  }\n  start(session_state) {\n    if (this._session_state === session_state) {\n      return;\n    }\n    this._logger.create(\"start\");\n    this.stop();\n    this._session_state = session_state;\n    const send = () => {\n      if (!this._frame.contentWindow || !this._session_state) {\n        return;\n      }\n      this._frame.contentWindow.postMessage(this._client_id + \" \" + this._session_state, this._frame_origin);\n    };\n    send();\n    this._timer = setInterval(send, this._intervalInSeconds * 1e3);\n  }\n  stop() {\n    this._logger.create(\"stop\");\n    this._session_state = null;\n    if (this._timer) {\n      clearInterval(this._timer);\n      this._timer = null;\n    }\n  }\n};\n\n// src/InMemoryWebStorage.ts\nvar InMemoryWebStorage = class {\n  constructor() {\n    this._logger = new Logger(\"InMemoryWebStorage\");\n    this._data = {};\n  }\n  clear() {\n    this._logger.create(\"clear\");\n    this._data = {};\n  }\n  getItem(key) {\n    this._logger.create(`getItem('${key}')`);\n    return this._data[key];\n  }\n  setItem(key, value) {\n    this._logger.create(`setItem('${key}')`);\n    this._data[key] = value;\n  }\n  removeItem(key) {\n    this._logger.create(`removeItem('${key}')`);\n    delete this._data[key];\n  }\n  get length() {\n    return Object.getOwnPropertyNames(this._data).length;\n  }\n  key(index) {\n    return Object.getOwnPropertyNames(this._data)[index];\n  }\n};\n\n// src/JsonService.ts\nvar JsonService = class {\n  constructor(additionalContentTypes = [], _jwtHandler = null, _extraHeaders = {}) {\n    this._jwtHandler = _jwtHandler;\n    this._extraHeaders = _extraHeaders;\n    this._logger = new Logger(\"JsonService\");\n    this._contentTypes = [];\n    this._contentTypes.push(...additionalContentTypes, \"application/json\");\n    if (_jwtHandler) {\n      this._contentTypes.push(\"application/jwt\");\n    }\n  }\n  async fetchWithTimeout(input, init = {}) {\n    const {\n      timeoutInSeconds,\n      ...initFetch\n    } = init;\n    if (!timeoutInSeconds) {\n      return await fetch(input, initFetch);\n    }\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeoutInSeconds * 1e3);\n    try {\n      const response = await fetch(input, {\n        ...init,\n        signal: controller.signal\n      });\n      return response;\n    } catch (err) {\n      if (err instanceof DOMException && err.name === \"AbortError\") {\n        throw new ErrorTimeout(\"Network timed out\");\n      }\n      throw err;\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  }\n  async getJson(url, {\n    token,\n    credentials\n  } = {}) {\n    const logger2 = this._logger.create(\"getJson\");\n    const headers = {\n      \"Accept\": this._contentTypes.join(\", \")\n    };\n    if (token) {\n      logger2.debug(\"token passed, setting Authorization header\");\n      headers[\"Authorization\"] = \"Bearer \" + token;\n    }\n    this.appendExtraHeaders(headers);\n    let response;\n    try {\n      logger2.debug(\"url:\", url);\n      response = await this.fetchWithTimeout(url, {\n        method: \"GET\",\n        headers,\n        credentials\n      });\n    } catch (err) {\n      logger2.error(\"Network Error\");\n      throw err;\n    }\n    logger2.debug(\"HTTP response received, status\", response.status);\n    const contentType = response.headers.get(\"Content-Type\");\n    if (contentType && !this._contentTypes.find(item => contentType.startsWith(item))) {\n      logger2.throw(new Error(`Invalid response Content-Type: ${contentType != null ? contentType : \"undefined\"}, from URL: ${url}`));\n    }\n    if (response.ok && this._jwtHandler && (contentType == null ? void 0 : contentType.startsWith(\"application/jwt\"))) {\n      return await this._jwtHandler(await response.text());\n    }\n    let json;\n    try {\n      json = await response.json();\n    } catch (err) {\n      logger2.error(\"Error parsing JSON response\", err);\n      if (response.ok) throw err;\n      throw new Error(`${response.statusText} (${response.status})`);\n    }\n    if (!response.ok) {\n      logger2.error(\"Error from server:\", json);\n      if (json.error) {\n        throw new ErrorResponse(json);\n      }\n      throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\n    }\n    return json;\n  }\n  async postForm(url, {\n    body,\n    basicAuth,\n    timeoutInSeconds,\n    initCredentials\n  }) {\n    const logger2 = this._logger.create(\"postForm\");\n    const headers = {\n      \"Accept\": this._contentTypes.join(\", \"),\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n    if (basicAuth !== void 0) {\n      headers[\"Authorization\"] = \"Basic \" + basicAuth;\n    }\n    this.appendExtraHeaders(headers);\n    let response;\n    try {\n      logger2.debug(\"url:\", url);\n      response = await this.fetchWithTimeout(url, {\n        method: \"POST\",\n        headers,\n        body,\n        timeoutInSeconds,\n        credentials: initCredentials\n      });\n    } catch (err) {\n      logger2.error(\"Network error\");\n      throw err;\n    }\n    logger2.debug(\"HTTP response received, status\", response.status);\n    const contentType = response.headers.get(\"Content-Type\");\n    if (contentType && !this._contentTypes.find(item => contentType.startsWith(item))) {\n      throw new Error(`Invalid response Content-Type: ${contentType != null ? contentType : \"undefined\"}, from URL: ${url}`);\n    }\n    const responseText = await response.text();\n    let json = {};\n    if (responseText) {\n      try {\n        json = JSON.parse(responseText);\n      } catch (err) {\n        logger2.error(\"Error parsing JSON response\", err);\n        if (response.ok) throw err;\n        throw new Error(`${response.statusText} (${response.status})`);\n      }\n    }\n    if (!response.ok) {\n      logger2.error(\"Error from server:\", json);\n      if (json.error) {\n        throw new ErrorResponse(json, body);\n      }\n      throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\n    }\n    return json;\n  }\n  appendExtraHeaders(headers) {\n    const logger2 = this._logger.create(\"appendExtraHeaders\");\n    const customKeys = Object.keys(this._extraHeaders);\n    const protectedHeaders = [\"authorization\", \"accept\", \"content-type\"];\n    if (customKeys.length === 0) {\n      return;\n    }\n    customKeys.forEach(headerName => {\n      if (protectedHeaders.includes(headerName.toLocaleLowerCase())) {\n        logger2.warn(\"Protected header could not be overridden\", headerName, protectedHeaders);\n        return;\n      }\n      const content = typeof this._extraHeaders[headerName] === \"function\" ? this._extraHeaders[headerName]() : this._extraHeaders[headerName];\n      if (content && content !== \"\") {\n        headers[headerName] = content;\n      }\n    });\n  }\n};\n\n// src/MetadataService.ts\nvar MetadataService = class {\n  constructor(_settings) {\n    this._settings = _settings;\n    this._logger = new Logger(\"MetadataService\");\n    this._signingKeys = null;\n    this._metadata = null;\n    this._metadataUrl = this._settings.metadataUrl;\n    this._jsonService = new JsonService([\"application/jwk-set+json\"], null, this._settings.extraHeaders);\n    if (this._settings.signingKeys) {\n      this._logger.debug(\"using signingKeys from settings\");\n      this._signingKeys = this._settings.signingKeys;\n    }\n    if (this._settings.metadata) {\n      this._logger.debug(\"using metadata from settings\");\n      this._metadata = this._settings.metadata;\n    }\n    if (this._settings.fetchRequestCredentials) {\n      this._logger.debug(\"using fetchRequestCredentials from settings\");\n      this._fetchRequestCredentials = this._settings.fetchRequestCredentials;\n    }\n  }\n  resetSigningKeys() {\n    this._signingKeys = null;\n  }\n  async getMetadata() {\n    const logger2 = this._logger.create(\"getMetadata\");\n    if (this._metadata) {\n      logger2.debug(\"using cached values\");\n      return this._metadata;\n    }\n    if (!this._metadataUrl) {\n      logger2.throw(new Error(\"No authority or metadataUrl configured on settings\"));\n      throw null;\n    }\n    logger2.debug(\"getting metadata from\", this._metadataUrl);\n    const metadata = await this._jsonService.getJson(this._metadataUrl, {\n      credentials: this._fetchRequestCredentials\n    });\n    logger2.debug(\"merging remote JSON with seed metadata\");\n    this._metadata = Object.assign({}, this._settings.metadataSeed, metadata);\n    return this._metadata;\n  }\n  getIssuer() {\n    return this._getMetadataProperty(\"issuer\");\n  }\n  getAuthorizationEndpoint() {\n    return this._getMetadataProperty(\"authorization_endpoint\");\n  }\n  getUserInfoEndpoint() {\n    return this._getMetadataProperty(\"userinfo_endpoint\");\n  }\n  getTokenEndpoint(optional = true) {\n    return this._getMetadataProperty(\"token_endpoint\", optional);\n  }\n  getCheckSessionIframe() {\n    return this._getMetadataProperty(\"check_session_iframe\", true);\n  }\n  getEndSessionEndpoint() {\n    return this._getMetadataProperty(\"end_session_endpoint\", true);\n  }\n  getRevocationEndpoint(optional = true) {\n    return this._getMetadataProperty(\"revocation_endpoint\", optional);\n  }\n  getKeysEndpoint(optional = true) {\n    return this._getMetadataProperty(\"jwks_uri\", optional);\n  }\n  async _getMetadataProperty(name, optional = false) {\n    const logger2 = this._logger.create(`_getMetadataProperty('${name}')`);\n    const metadata = await this.getMetadata();\n    logger2.debug(\"resolved\");\n    if (metadata[name] === void 0) {\n      if (optional === true) {\n        logger2.warn(\"Metadata does not contain optional property\");\n        return void 0;\n      }\n      logger2.throw(new Error(\"Metadata does not contain property \" + name));\n    }\n    return metadata[name];\n  }\n  async getSigningKeys() {\n    const logger2 = this._logger.create(\"getSigningKeys\");\n    if (this._signingKeys) {\n      logger2.debug(\"returning signingKeys from cache\");\n      return this._signingKeys;\n    }\n    const jwks_uri = await this.getKeysEndpoint(false);\n    logger2.debug(\"got jwks_uri\", jwks_uri);\n    const keySet = await this._jsonService.getJson(jwks_uri);\n    logger2.debug(\"got key set\", keySet);\n    if (!Array.isArray(keySet.keys)) {\n      logger2.throw(new Error(\"Missing keys on keyset\"));\n      throw null;\n    }\n    this._signingKeys = keySet.keys;\n    return this._signingKeys;\n  }\n};\n\n// src/WebStorageStateStore.ts\nvar WebStorageStateStore = class {\n  constructor({\n    prefix = \"oidc.\",\n    store = localStorage\n  } = {}) {\n    this._logger = new Logger(\"WebStorageStateStore\");\n    this._store = store;\n    this._prefix = prefix;\n  }\n  async set(key, value) {\n    this._logger.create(`set('${key}')`);\n    key = this._prefix + key;\n    await this._store.setItem(key, value);\n  }\n  async get(key) {\n    this._logger.create(`get('${key}')`);\n    key = this._prefix + key;\n    const item = await this._store.getItem(key);\n    return item;\n  }\n  async remove(key) {\n    this._logger.create(`remove('${key}')`);\n    key = this._prefix + key;\n    const item = await this._store.getItem(key);\n    await this._store.removeItem(key);\n    return item;\n  }\n  async getAllKeys() {\n    this._logger.create(\"getAllKeys\");\n    const len = await this._store.length;\n    const keys = [];\n    for (let index = 0; index < len; index++) {\n      const key = await this._store.key(index);\n      if (key && key.indexOf(this._prefix) === 0) {\n        keys.push(key.substr(this._prefix.length));\n      }\n    }\n    return keys;\n  }\n};\n\n// src/OidcClientSettings.ts\nvar DefaultResponseType = \"code\";\nvar DefaultScope = \"openid\";\nvar DefaultClientAuthentication = \"client_secret_post\";\nvar DefaultResponseMode = \"query\";\nvar DefaultStaleStateAgeInSeconds = 60 * 15;\nvar DefaultClockSkewInSeconds = 60 * 5;\nvar OidcClientSettingsStore = class {\n  constructor({\n    // metadata related\n    authority,\n    metadataUrl,\n    metadata,\n    signingKeys,\n    metadataSeed,\n    // client related\n    client_id,\n    client_secret,\n    response_type = DefaultResponseType,\n    scope = DefaultScope,\n    redirect_uri,\n    post_logout_redirect_uri,\n    client_authentication = DefaultClientAuthentication,\n    // optional protocol\n    prompt,\n    display,\n    max_age,\n    ui_locales,\n    acr_values,\n    resource,\n    response_mode = DefaultResponseMode,\n    // behavior flags\n    filterProtocolClaims = true,\n    loadUserInfo = false,\n    staleStateAgeInSeconds = DefaultStaleStateAgeInSeconds,\n    clockSkewInSeconds = DefaultClockSkewInSeconds,\n    userInfoJwtIssuer = \"OP\",\n    mergeClaims = false,\n    disablePKCE = false,\n    // other behavior\n    stateStore,\n    refreshTokenCredentials,\n    revokeTokenAdditionalContentTypes,\n    fetchRequestCredentials,\n    refreshTokenAllowedScope,\n    // extra\n    extraQueryParams = {},\n    extraTokenParams = {},\n    extraHeaders = {}\n  }) {\n    this.authority = authority;\n    if (metadataUrl) {\n      this.metadataUrl = metadataUrl;\n    } else {\n      this.metadataUrl = authority;\n      if (authority) {\n        if (!this.metadataUrl.endsWith(\"/\")) {\n          this.metadataUrl += \"/\";\n        }\n        this.metadataUrl += \".well-known/openid-configuration\";\n      }\n    }\n    this.metadata = metadata;\n    this.metadataSeed = metadataSeed;\n    this.signingKeys = signingKeys;\n    this.client_id = client_id;\n    this.client_secret = client_secret;\n    this.response_type = response_type;\n    this.scope = scope;\n    this.redirect_uri = redirect_uri;\n    this.post_logout_redirect_uri = post_logout_redirect_uri;\n    this.client_authentication = client_authentication;\n    this.prompt = prompt;\n    this.display = display;\n    this.max_age = max_age;\n    this.ui_locales = ui_locales;\n    this.acr_values = acr_values;\n    this.resource = resource;\n    this.response_mode = response_mode;\n    this.filterProtocolClaims = filterProtocolClaims != null ? filterProtocolClaims : true;\n    this.loadUserInfo = !!loadUserInfo;\n    this.staleStateAgeInSeconds = staleStateAgeInSeconds;\n    this.clockSkewInSeconds = clockSkewInSeconds;\n    this.userInfoJwtIssuer = userInfoJwtIssuer;\n    this.mergeClaims = !!mergeClaims;\n    this.disablePKCE = !!disablePKCE;\n    this.revokeTokenAdditionalContentTypes = revokeTokenAdditionalContentTypes;\n    if (fetchRequestCredentials && refreshTokenCredentials) {\n      console.warn(\"Both fetchRequestCredentials and refreshTokenCredentials is set. Only fetchRequestCredentials will be used.\");\n    }\n    this.fetchRequestCredentials = fetchRequestCredentials ? fetchRequestCredentials : refreshTokenCredentials ? refreshTokenCredentials : \"same-origin\";\n    if (stateStore) {\n      this.stateStore = stateStore;\n    } else {\n      const store = typeof window !== \"undefined\" ? window.localStorage : new InMemoryWebStorage();\n      this.stateStore = new WebStorageStateStore({\n        store\n      });\n    }\n    this.refreshTokenAllowedScope = refreshTokenAllowedScope;\n    this.extraQueryParams = extraQueryParams;\n    this.extraTokenParams = extraTokenParams;\n    this.extraHeaders = extraHeaders;\n  }\n};\n\n// src/UserInfoService.ts\nvar UserInfoService = class {\n  constructor(_settings, _metadataService) {\n    this._settings = _settings;\n    this._metadataService = _metadataService;\n    this._logger = new Logger(\"UserInfoService\");\n    this._getClaimsFromJwt = async responseText => {\n      const logger2 = this._logger.create(\"_getClaimsFromJwt\");\n      try {\n        const payload = JwtUtils.decode(responseText);\n        logger2.debug(\"JWT decoding successful\");\n        return payload;\n      } catch (err) {\n        logger2.error(\"Error parsing JWT response\");\n        throw err;\n      }\n    };\n    this._jsonService = new JsonService(void 0, this._getClaimsFromJwt, this._settings.extraHeaders);\n  }\n  async getClaims(token) {\n    const logger2 = this._logger.create(\"getClaims\");\n    if (!token) {\n      this._logger.throw(new Error(\"No token passed\"));\n    }\n    const url = await this._metadataService.getUserInfoEndpoint();\n    logger2.debug(\"got userinfo url\", url);\n    const claims = await this._jsonService.getJson(url, {\n      token,\n      credentials: this._settings.fetchRequestCredentials\n    });\n    logger2.debug(\"got claims\", claims);\n    return claims;\n  }\n};\n\n// src/TokenClient.ts\nvar TokenClient = class {\n  constructor(_settings, _metadataService) {\n    this._settings = _settings;\n    this._metadataService = _metadataService;\n    this._logger = new Logger(\"TokenClient\");\n    this._jsonService = new JsonService(this._settings.revokeTokenAdditionalContentTypes, null, this._settings.extraHeaders);\n  }\n  /**\n   * Exchange code.\n   *\n   * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.1.3\n   */\n  async exchangeCode({\n    grant_type = \"authorization_code\",\n    redirect_uri = this._settings.redirect_uri,\n    client_id = this._settings.client_id,\n    client_secret = this._settings.client_secret,\n    ...args\n  }) {\n    const logger2 = this._logger.create(\"exchangeCode\");\n    if (!client_id) {\n      logger2.throw(new Error(\"A client_id is required\"));\n    }\n    if (!redirect_uri) {\n      logger2.throw(new Error(\"A redirect_uri is required\"));\n    }\n    if (!args.code) {\n      logger2.throw(new Error(\"A code is required\"));\n    }\n    const params = new URLSearchParams({\n      grant_type,\n      redirect_uri\n    });\n    for (const [key, value] of Object.entries(args)) {\n      if (value != null) {\n        params.set(key, value);\n      }\n    }\n    let basicAuth;\n    switch (this._settings.client_authentication) {\n      case \"client_secret_basic\":\n        if (!client_secret) {\n          logger2.throw(new Error(\"A client_secret is required\"));\n          throw null;\n        }\n        basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n        break;\n      case \"client_secret_post\":\n        params.append(\"client_id\", client_id);\n        if (client_secret) {\n          params.append(\"client_secret\", client_secret);\n        }\n        break;\n    }\n    const url = await this._metadataService.getTokenEndpoint(false);\n    logger2.debug(\"got token endpoint\");\n    const response = await this._jsonService.postForm(url, {\n      body: params,\n      basicAuth,\n      initCredentials: this._settings.fetchRequestCredentials\n    });\n    logger2.debug(\"got response\");\n    return response;\n  }\n  /**\n   * Exchange credentials.\n   *\n   * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.3.2\n   */\n  async exchangeCredentials({\n    grant_type = \"password\",\n    client_id = this._settings.client_id,\n    client_secret = this._settings.client_secret,\n    scope = this._settings.scope,\n    ...args\n  }) {\n    const logger2 = this._logger.create(\"exchangeCredentials\");\n    if (!client_id) {\n      logger2.throw(new Error(\"A client_id is required\"));\n    }\n    const params = new URLSearchParams({\n      grant_type,\n      scope\n    });\n    for (const [key, value] of Object.entries(args)) {\n      if (value != null) {\n        params.set(key, value);\n      }\n    }\n    let basicAuth;\n    switch (this._settings.client_authentication) {\n      case \"client_secret_basic\":\n        if (!client_secret) {\n          logger2.throw(new Error(\"A client_secret is required\"));\n          throw null;\n        }\n        basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n        break;\n      case \"client_secret_post\":\n        params.append(\"client_id\", client_id);\n        if (client_secret) {\n          params.append(\"client_secret\", client_secret);\n        }\n        break;\n    }\n    const url = await this._metadataService.getTokenEndpoint(false);\n    logger2.debug(\"got token endpoint\");\n    const response = await this._jsonService.postForm(url, {\n      body: params,\n      basicAuth,\n      initCredentials: this._settings.fetchRequestCredentials\n    });\n    logger2.debug(\"got response\");\n    return response;\n  }\n  /**\n   * Exchange a refresh token.\n   *\n   * @see https://www.rfc-editor.org/rfc/rfc6749#section-6\n   */\n  async exchangeRefreshToken({\n    grant_type = \"refresh_token\",\n    client_id = this._settings.client_id,\n    client_secret = this._settings.client_secret,\n    timeoutInSeconds,\n    ...args\n  }) {\n    const logger2 = this._logger.create(\"exchangeRefreshToken\");\n    if (!client_id) {\n      logger2.throw(new Error(\"A client_id is required\"));\n    }\n    if (!args.refresh_token) {\n      logger2.throw(new Error(\"A refresh_token is required\"));\n    }\n    const params = new URLSearchParams({\n      grant_type\n    });\n    for (const [key, value] of Object.entries(args)) {\n      if (Array.isArray(value)) {\n        value.forEach(param => params.append(key, param));\n      } else if (value != null) {\n        params.set(key, value);\n      }\n    }\n    let basicAuth;\n    switch (this._settings.client_authentication) {\n      case \"client_secret_basic\":\n        if (!client_secret) {\n          logger2.throw(new Error(\"A client_secret is required\"));\n          throw null;\n        }\n        basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n        break;\n      case \"client_secret_post\":\n        params.append(\"client_id\", client_id);\n        if (client_secret) {\n          params.append(\"client_secret\", client_secret);\n        }\n        break;\n    }\n    const url = await this._metadataService.getTokenEndpoint(false);\n    logger2.debug(\"got token endpoint\");\n    const response = await this._jsonService.postForm(url, {\n      body: params,\n      basicAuth,\n      timeoutInSeconds,\n      initCredentials: this._settings.fetchRequestCredentials\n    });\n    logger2.debug(\"got response\");\n    return response;\n  }\n  /**\n   * Revoke an access or refresh token.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc7009#section-2.1\n   */\n  async revoke(args) {\n    var _a;\n    const logger2 = this._logger.create(\"revoke\");\n    if (!args.token) {\n      logger2.throw(new Error(\"A token is required\"));\n    }\n    const url = await this._metadataService.getRevocationEndpoint(false);\n    logger2.debug(`got revocation endpoint, revoking ${(_a = args.token_type_hint) != null ? _a : \"default token type\"}`);\n    const params = new URLSearchParams();\n    for (const [key, value] of Object.entries(args)) {\n      if (value != null) {\n        params.set(key, value);\n      }\n    }\n    params.set(\"client_id\", this._settings.client_id);\n    if (this._settings.client_secret) {\n      params.set(\"client_secret\", this._settings.client_secret);\n    }\n    await this._jsonService.postForm(url, {\n      body: params\n    });\n    logger2.debug(\"got response\");\n  }\n};\n\n// src/ResponseValidator.ts\nvar ResponseValidator = class {\n  constructor(_settings, _metadataService, _claimsService) {\n    this._settings = _settings;\n    this._metadataService = _metadataService;\n    this._claimsService = _claimsService;\n    this._logger = new Logger(\"ResponseValidator\");\n    this._userInfoService = new UserInfoService(this._settings, this._metadataService);\n    this._tokenClient = new TokenClient(this._settings, this._metadataService);\n  }\n  async validateSigninResponse(response, state) {\n    const logger2 = this._logger.create(\"validateSigninResponse\");\n    this._processSigninState(response, state);\n    logger2.debug(\"state processed\");\n    await this._processCode(response, state);\n    logger2.debug(\"code processed\");\n    if (response.isOpenId) {\n      this._validateIdTokenAttributes(response);\n    }\n    logger2.debug(\"tokens validated\");\n    await this._processClaims(response, state == null ? void 0 : state.skipUserInfo, response.isOpenId);\n    logger2.debug(\"claims processed\");\n  }\n  async validateCredentialsResponse(response, skipUserInfo) {\n    const logger2 = this._logger.create(\"validateCredentialsResponse\");\n    if (response.isOpenId) {\n      this._validateIdTokenAttributes(response);\n    }\n    logger2.debug(\"tokens validated\");\n    await this._processClaims(response, skipUserInfo, response.isOpenId);\n    logger2.debug(\"claims processed\");\n  }\n  async validateRefreshResponse(response, state) {\n    var _a, _b;\n    const logger2 = this._logger.create(\"validateRefreshResponse\");\n    response.userState = state.data;\n    (_a = response.session_state) != null ? _a : response.session_state = state.session_state;\n    (_b = response.scope) != null ? _b : response.scope = state.scope;\n    if (response.isOpenId && !!response.id_token) {\n      this._validateIdTokenAttributes(response, state.id_token);\n      logger2.debug(\"ID Token validated\");\n    }\n    if (!response.id_token) {\n      response.id_token = state.id_token;\n      response.profile = state.profile;\n    }\n    const hasIdToken = response.isOpenId && !!response.id_token;\n    await this._processClaims(response, false, hasIdToken);\n    logger2.debug(\"claims processed\");\n  }\n  validateSignoutResponse(response, state) {\n    const logger2 = this._logger.create(\"validateSignoutResponse\");\n    if (state.id !== response.state) {\n      logger2.throw(new Error(\"State does not match\"));\n    }\n    logger2.debug(\"state validated\");\n    response.userState = state.data;\n    if (response.error) {\n      logger2.warn(\"Response was error\", response.error);\n      throw new ErrorResponse(response);\n    }\n  }\n  _processSigninState(response, state) {\n    var _a;\n    const logger2 = this._logger.create(\"_processSigninState\");\n    if (state.id !== response.state) {\n      logger2.throw(new Error(\"State does not match\"));\n    }\n    if (!state.client_id) {\n      logger2.throw(new Error(\"No client_id on state\"));\n    }\n    if (!state.authority) {\n      logger2.throw(new Error(\"No authority on state\"));\n    }\n    if (this._settings.authority !== state.authority) {\n      logger2.throw(new Error(\"authority mismatch on settings vs. signin state\"));\n    }\n    if (this._settings.client_id && this._settings.client_id !== state.client_id) {\n      logger2.throw(new Error(\"client_id mismatch on settings vs. signin state\"));\n    }\n    logger2.debug(\"state validated\");\n    response.userState = state.data;\n    (_a = response.scope) != null ? _a : response.scope = state.scope;\n    if (response.error) {\n      logger2.warn(\"Response was error\", response.error);\n      throw new ErrorResponse(response);\n    }\n    if (state.code_verifier && !response.code) {\n      logger2.throw(new Error(\"Expected code in response\"));\n    }\n  }\n  async _processClaims(response, skipUserInfo = false, validateSub = true) {\n    const logger2 = this._logger.create(\"_processClaims\");\n    response.profile = this._claimsService.filterProtocolClaims(response.profile);\n    if (skipUserInfo || !this._settings.loadUserInfo || !response.access_token) {\n      logger2.debug(\"not loading user info\");\n      return;\n    }\n    logger2.debug(\"loading user info\");\n    const claims = await this._userInfoService.getClaims(response.access_token);\n    logger2.debug(\"user info claims received from user info endpoint\");\n    if (validateSub && claims.sub !== response.profile.sub) {\n      logger2.throw(new Error(\"subject from UserInfo response does not match subject in ID Token\"));\n    }\n    response.profile = this._claimsService.mergeClaims(response.profile, this._claimsService.filterProtocolClaims(claims));\n    logger2.debug(\"user info claims received, updated profile:\", response.profile);\n  }\n  async _processCode(response, state) {\n    const logger2 = this._logger.create(\"_processCode\");\n    if (response.code) {\n      logger2.debug(\"Validating code\");\n      const tokenResponse = await this._tokenClient.exchangeCode({\n        client_id: state.client_id,\n        client_secret: state.client_secret,\n        code: response.code,\n        redirect_uri: state.redirect_uri,\n        code_verifier: state.code_verifier,\n        ...state.extraTokenParams\n      });\n      Object.assign(response, tokenResponse);\n    } else {\n      logger2.debug(\"No code to process\");\n    }\n  }\n  _validateIdTokenAttributes(response, existingToken) {\n    var _a;\n    const logger2 = this._logger.create(\"_validateIdTokenAttributes\");\n    logger2.debug(\"decoding ID Token JWT\");\n    const incoming = JwtUtils.decode((_a = response.id_token) != null ? _a : \"\");\n    if (!incoming.sub) {\n      logger2.throw(new Error(\"ID Token is missing a subject claim\"));\n    }\n    if (existingToken) {\n      const existing = JwtUtils.decode(existingToken);\n      if (incoming.sub !== existing.sub) {\n        logger2.throw(new Error(\"sub in id_token does not match current sub\"));\n      }\n      if (incoming.auth_time && incoming.auth_time !== existing.auth_time) {\n        logger2.throw(new Error(\"auth_time in id_token does not match original auth_time\"));\n      }\n      if (incoming.azp && incoming.azp !== existing.azp) {\n        logger2.throw(new Error(\"azp in id_token does not match original azp\"));\n      }\n      if (!incoming.azp && existing.azp) {\n        logger2.throw(new Error(\"azp not in id_token, but present in original id_token\"));\n      }\n    }\n    response.profile = incoming;\n  }\n};\n\n// src/State.ts\nvar State = class {\n  constructor(args) {\n    this.id = args.id || CryptoUtils.generateUUIDv4();\n    this.data = args.data;\n    if (args.created && args.created > 0) {\n      this.created = args.created;\n    } else {\n      this.created = Timer.getEpochTime();\n    }\n    this.request_type = args.request_type;\n  }\n  toStorageString() {\n    new Logger(\"State\").create(\"toStorageString\");\n    return JSON.stringify({\n      id: this.id,\n      data: this.data,\n      created: this.created,\n      request_type: this.request_type\n    });\n  }\n  static fromStorageString(storageString) {\n    Logger.createStatic(\"State\", \"fromStorageString\");\n    return new State(JSON.parse(storageString));\n  }\n  static async clearStaleState(storage, age) {\n    const logger2 = Logger.createStatic(\"State\", \"clearStaleState\");\n    const cutoff = Timer.getEpochTime() - age;\n    const keys = await storage.getAllKeys();\n    logger2.debug(\"got keys\", keys);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const item = await storage.get(key);\n      let remove = false;\n      if (item) {\n        try {\n          const state = State.fromStorageString(item);\n          logger2.debug(\"got item from key:\", key, state.created);\n          if (state.created <= cutoff) {\n            remove = true;\n          }\n        } catch (err) {\n          logger2.error(\"Error parsing state for key:\", key, err);\n          remove = true;\n        }\n      } else {\n        logger2.debug(\"no item in storage for key:\", key);\n        remove = true;\n      }\n      if (remove) {\n        logger2.debug(\"removed item for key:\", key);\n        void storage.remove(key);\n      }\n    }\n  }\n};\n\n// src/SigninState.ts\nvar SigninState = class extends State {\n  constructor(args) {\n    super(args);\n    if (args.code_verifier === true) {\n      this.code_verifier = CryptoUtils.generateCodeVerifier();\n    } else if (args.code_verifier) {\n      this.code_verifier = args.code_verifier;\n    }\n    if (this.code_verifier) {\n      this.code_challenge = CryptoUtils.generateCodeChallenge(this.code_verifier);\n    }\n    this.authority = args.authority;\n    this.client_id = args.client_id;\n    this.redirect_uri = args.redirect_uri;\n    this.scope = args.scope;\n    this.client_secret = args.client_secret;\n    this.extraTokenParams = args.extraTokenParams;\n    this.response_mode = args.response_mode;\n    this.skipUserInfo = args.skipUserInfo;\n  }\n  toStorageString() {\n    new Logger(\"SigninState\").create(\"toStorageString\");\n    return JSON.stringify({\n      id: this.id,\n      data: this.data,\n      created: this.created,\n      request_type: this.request_type,\n      code_verifier: this.code_verifier,\n      authority: this.authority,\n      client_id: this.client_id,\n      redirect_uri: this.redirect_uri,\n      scope: this.scope,\n      client_secret: this.client_secret,\n      extraTokenParams: this.extraTokenParams,\n      response_mode: this.response_mode,\n      skipUserInfo: this.skipUserInfo\n    });\n  }\n  static fromStorageString(storageString) {\n    Logger.createStatic(\"SigninState\", \"fromStorageString\");\n    const data = JSON.parse(storageString);\n    return new SigninState(data);\n  }\n};\n\n// src/SigninRequest.ts\nvar SigninRequest = class {\n  constructor({\n    // mandatory\n    url,\n    authority,\n    client_id,\n    redirect_uri,\n    response_type,\n    scope,\n    // optional\n    state_data,\n    response_mode,\n    request_type,\n    client_secret,\n    nonce,\n    resource,\n    skipUserInfo,\n    extraQueryParams,\n    extraTokenParams,\n    disablePKCE,\n    ...optionalParams\n  }) {\n    this._logger = new Logger(\"SigninRequest\");\n    if (!url) {\n      this._logger.error(\"ctor: No url passed\");\n      throw new Error(\"url\");\n    }\n    if (!client_id) {\n      this._logger.error(\"ctor: No client_id passed\");\n      throw new Error(\"client_id\");\n    }\n    if (!redirect_uri) {\n      this._logger.error(\"ctor: No redirect_uri passed\");\n      throw new Error(\"redirect_uri\");\n    }\n    if (!response_type) {\n      this._logger.error(\"ctor: No response_type passed\");\n      throw new Error(\"response_type\");\n    }\n    if (!scope) {\n      this._logger.error(\"ctor: No scope passed\");\n      throw new Error(\"scope\");\n    }\n    if (!authority) {\n      this._logger.error(\"ctor: No authority passed\");\n      throw new Error(\"authority\");\n    }\n    this.state = new SigninState({\n      data: state_data,\n      request_type,\n      code_verifier: !disablePKCE,\n      client_id,\n      authority,\n      redirect_uri,\n      response_mode,\n      client_secret,\n      scope,\n      extraTokenParams,\n      skipUserInfo\n    });\n    const parsedUrl = new URL(url);\n    parsedUrl.searchParams.append(\"client_id\", client_id);\n    parsedUrl.searchParams.append(\"redirect_uri\", redirect_uri);\n    parsedUrl.searchParams.append(\"response_type\", response_type);\n    parsedUrl.searchParams.append(\"scope\", scope);\n    if (nonce) {\n      parsedUrl.searchParams.append(\"nonce\", nonce);\n    }\n    parsedUrl.searchParams.append(\"state\", this.state.id);\n    if (this.state.code_challenge) {\n      parsedUrl.searchParams.append(\"code_challenge\", this.state.code_challenge);\n      parsedUrl.searchParams.append(\"code_challenge_method\", \"S256\");\n    }\n    if (resource) {\n      const resources = Array.isArray(resource) ? resource : [resource];\n      resources.forEach(r => parsedUrl.searchParams.append(\"resource\", r));\n    }\n    for (const [key, value] of Object.entries({\n      response_mode,\n      ...optionalParams,\n      ...extraQueryParams\n    })) {\n      if (value != null) {\n        parsedUrl.searchParams.append(key, value.toString());\n      }\n    }\n    this.url = parsedUrl.href;\n  }\n};\n\n// src/SigninResponse.ts\nvar OidcScope = \"openid\";\nvar SigninResponse = class {\n  constructor(params) {\n    /** @see {@link User.access_token} */\n    this.access_token = \"\";\n    /** @see {@link User.token_type} */\n    this.token_type = \"\";\n    /** @see {@link User.profile} */\n    this.profile = {};\n    this.state = params.get(\"state\");\n    this.session_state = params.get(\"session_state\");\n    this.error = params.get(\"error\");\n    this.error_description = params.get(\"error_description\");\n    this.error_uri = params.get(\"error_uri\");\n    this.code = params.get(\"code\");\n  }\n  get expires_in() {\n    if (this.expires_at === void 0) {\n      return void 0;\n    }\n    return this.expires_at - Timer.getEpochTime();\n  }\n  set expires_in(value) {\n    if (typeof value === \"string\") value = Number(value);\n    if (value !== void 0 && value >= 0) {\n      this.expires_at = Math.floor(value) + Timer.getEpochTime();\n    }\n  }\n  get isOpenId() {\n    var _a;\n    return ((_a = this.scope) == null ? void 0 : _a.split(\" \").includes(OidcScope)) || !!this.id_token;\n  }\n};\n\n// src/SignoutRequest.ts\nvar SignoutRequest = class {\n  constructor({\n    url,\n    state_data,\n    id_token_hint,\n    post_logout_redirect_uri,\n    extraQueryParams,\n    request_type,\n    client_id\n  }) {\n    this._logger = new Logger(\"SignoutRequest\");\n    if (!url) {\n      this._logger.error(\"ctor: No url passed\");\n      throw new Error(\"url\");\n    }\n    const parsedUrl = new URL(url);\n    if (id_token_hint) {\n      parsedUrl.searchParams.append(\"id_token_hint\", id_token_hint);\n    }\n    if (client_id) {\n      parsedUrl.searchParams.append(\"client_id\", client_id);\n    }\n    if (post_logout_redirect_uri) {\n      parsedUrl.searchParams.append(\"post_logout_redirect_uri\", post_logout_redirect_uri);\n      if (state_data) {\n        this.state = new State({\n          data: state_data,\n          request_type\n        });\n        parsedUrl.searchParams.append(\"state\", this.state.id);\n      }\n    }\n    for (const [key, value] of Object.entries({\n      ...extraQueryParams\n    })) {\n      if (value != null) {\n        parsedUrl.searchParams.append(key, value.toString());\n      }\n    }\n    this.url = parsedUrl.href;\n  }\n};\n\n// src/SignoutResponse.ts\nvar SignoutResponse = class {\n  constructor(params) {\n    this.state = params.get(\"state\");\n    this.error = params.get(\"error\");\n    this.error_description = params.get(\"error_description\");\n    this.error_uri = params.get(\"error_uri\");\n  }\n};\n\n// src/ClaimsService.ts\nvar DefaultProtocolClaims = [\"nbf\", \"jti\", \"auth_time\", \"nonce\", \"acr\", \"amr\", \"azp\", \"at_hash\"\n// https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken\n];\n\nvar InternalRequiredProtocolClaims = [\"sub\", \"iss\", \"aud\", \"exp\", \"iat\"];\nvar ClaimsService = class {\n  constructor(_settings) {\n    this._settings = _settings;\n    this._logger = new Logger(\"ClaimsService\");\n  }\n  filterProtocolClaims(claims) {\n    const result = {\n      ...claims\n    };\n    if (this._settings.filterProtocolClaims) {\n      let protocolClaims;\n      if (Array.isArray(this._settings.filterProtocolClaims)) {\n        protocolClaims = this._settings.filterProtocolClaims;\n      } else {\n        protocolClaims = DefaultProtocolClaims;\n      }\n      for (const claim of protocolClaims) {\n        if (!InternalRequiredProtocolClaims.includes(claim)) {\n          delete result[claim];\n        }\n      }\n    }\n    return result;\n  }\n  mergeClaims(claims1, claims2) {\n    const result = {\n      ...claims1\n    };\n    for (const [claim, values] of Object.entries(claims2)) {\n      for (const value of Array.isArray(values) ? values : [values]) {\n        const previousValue = result[claim];\n        if (!previousValue) {\n          result[claim] = value;\n        } else if (Array.isArray(previousValue)) {\n          if (!previousValue.includes(value)) {\n            previousValue.push(value);\n          }\n        } else if (result[claim] !== value) {\n          if (typeof value === \"object\" && this._settings.mergeClaims) {\n            result[claim] = this.mergeClaims(previousValue, value);\n          } else {\n            result[claim] = [previousValue, value];\n          }\n        }\n      }\n    }\n    return result;\n  }\n};\n\n// src/OidcClient.ts\nvar OidcClient = class {\n  constructor(settings, metadataService) {\n    this._logger = new Logger(\"OidcClient\");\n    this.settings = settings instanceof OidcClientSettingsStore ? settings : new OidcClientSettingsStore(settings);\n    this.metadataService = metadataService != null ? metadataService : new MetadataService(this.settings);\n    this._claimsService = new ClaimsService(this.settings);\n    this._validator = new ResponseValidator(this.settings, this.metadataService, this._claimsService);\n    this._tokenClient = new TokenClient(this.settings, this.metadataService);\n  }\n  async createSigninRequest({\n    state,\n    request,\n    request_uri,\n    request_type,\n    id_token_hint,\n    login_hint,\n    skipUserInfo,\n    nonce,\n    response_type = this.settings.response_type,\n    scope = this.settings.scope,\n    redirect_uri = this.settings.redirect_uri,\n    prompt = this.settings.prompt,\n    display = this.settings.display,\n    max_age = this.settings.max_age,\n    ui_locales = this.settings.ui_locales,\n    acr_values = this.settings.acr_values,\n    resource = this.settings.resource,\n    response_mode = this.settings.response_mode,\n    extraQueryParams = this.settings.extraQueryParams,\n    extraTokenParams = this.settings.extraTokenParams\n  }) {\n    const logger2 = this._logger.create(\"createSigninRequest\");\n    if (response_type !== \"code\") {\n      throw new Error(\"Only the Authorization Code flow (with PKCE) is supported\");\n    }\n    const url = await this.metadataService.getAuthorizationEndpoint();\n    logger2.debug(\"Received authorization endpoint\", url);\n    const signinRequest = new SigninRequest({\n      url,\n      authority: this.settings.authority,\n      client_id: this.settings.client_id,\n      redirect_uri,\n      response_type,\n      scope,\n      state_data: state,\n      prompt,\n      display,\n      max_age,\n      ui_locales,\n      id_token_hint,\n      login_hint,\n      acr_values,\n      resource,\n      request,\n      request_uri,\n      extraQueryParams,\n      extraTokenParams,\n      request_type,\n      response_mode,\n      client_secret: this.settings.client_secret,\n      skipUserInfo,\n      nonce,\n      disablePKCE: this.settings.disablePKCE\n    });\n    await this.clearStaleState();\n    const signinState = signinRequest.state;\n    await this.settings.stateStore.set(signinState.id, signinState.toStorageString());\n    return signinRequest;\n  }\n  async readSigninResponseState(url, removeState = false) {\n    const logger2 = this._logger.create(\"readSigninResponseState\");\n    const response = new SigninResponse(UrlUtils.readParams(url, this.settings.response_mode));\n    if (!response.state) {\n      logger2.throw(new Error(\"No state in response\"));\n      throw null;\n    }\n    const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\n    if (!storedStateString) {\n      logger2.throw(new Error(\"No matching state found in storage\"));\n      throw null;\n    }\n    const state = SigninState.fromStorageString(storedStateString);\n    return {\n      state,\n      response\n    };\n  }\n  async processSigninResponse(url) {\n    const logger2 = this._logger.create(\"processSigninResponse\");\n    const {\n      state,\n      response\n    } = await this.readSigninResponseState(url, true);\n    logger2.debug(\"received state from storage; validating response\");\n    await this._validator.validateSigninResponse(response, state);\n    return response;\n  }\n  async processResourceOwnerPasswordCredentials({\n    username,\n    password,\n    skipUserInfo = false,\n    extraTokenParams = {}\n  }) {\n    const tokenResponse = await this._tokenClient.exchangeCredentials({\n      username,\n      password,\n      ...extraTokenParams\n    });\n    const signinResponse = new SigninResponse(new URLSearchParams());\n    Object.assign(signinResponse, tokenResponse);\n    await this._validator.validateCredentialsResponse(signinResponse, skipUserInfo);\n    return signinResponse;\n  }\n  async useRefreshToken({\n    state,\n    timeoutInSeconds\n  }) {\n    var _a;\n    const logger2 = this._logger.create(\"useRefreshToken\");\n    let scope;\n    if (this.settings.refreshTokenAllowedScope === void 0) {\n      scope = state.scope;\n    } else {\n      const allowableScopes = this.settings.refreshTokenAllowedScope.split(\" \");\n      const providedScopes = ((_a = state.scope) == null ? void 0 : _a.split(\" \")) || [];\n      scope = providedScopes.filter(s => allowableScopes.includes(s)).join(\" \");\n    }\n    const result = await this._tokenClient.exchangeRefreshToken({\n      refresh_token: state.refresh_token,\n      resource: state.resource,\n      // provide the (possible filtered) scope list\n      scope,\n      timeoutInSeconds\n    });\n    const response = new SigninResponse(new URLSearchParams());\n    Object.assign(response, result);\n    logger2.debug(\"validating response\", response);\n    await this._validator.validateRefreshResponse(response, {\n      ...state,\n      // overide the scope in the state handed over to the validator\n      // so it can set the granted scope to the requested scope in case none is included in the response\n      scope\n    });\n    return response;\n  }\n  async createSignoutRequest({\n    state,\n    id_token_hint,\n    client_id,\n    request_type,\n    post_logout_redirect_uri = this.settings.post_logout_redirect_uri,\n    extraQueryParams = this.settings.extraQueryParams\n  } = {}) {\n    const logger2 = this._logger.create(\"createSignoutRequest\");\n    const url = await this.metadataService.getEndSessionEndpoint();\n    if (!url) {\n      logger2.throw(new Error(\"No end session endpoint\"));\n      throw null;\n    }\n    logger2.debug(\"Received end session endpoint\", url);\n    if (!client_id && post_logout_redirect_uri && !id_token_hint) {\n      client_id = this.settings.client_id;\n    }\n    const request = new SignoutRequest({\n      url,\n      id_token_hint,\n      client_id,\n      post_logout_redirect_uri,\n      state_data: state,\n      extraQueryParams,\n      request_type\n    });\n    await this.clearStaleState();\n    const signoutState = request.state;\n    if (signoutState) {\n      logger2.debug(\"Signout request has state to persist\");\n      await this.settings.stateStore.set(signoutState.id, signoutState.toStorageString());\n    }\n    return request;\n  }\n  async readSignoutResponseState(url, removeState = false) {\n    const logger2 = this._logger.create(\"readSignoutResponseState\");\n    const response = new SignoutResponse(UrlUtils.readParams(url, this.settings.response_mode));\n    if (!response.state) {\n      logger2.debug(\"No state in response\");\n      if (response.error) {\n        logger2.warn(\"Response was error:\", response.error);\n        throw new ErrorResponse(response);\n      }\n      return {\n        state: void 0,\n        response\n      };\n    }\n    const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\n    if (!storedStateString) {\n      logger2.throw(new Error(\"No matching state found in storage\"));\n      throw null;\n    }\n    const state = State.fromStorageString(storedStateString);\n    return {\n      state,\n      response\n    };\n  }\n  async processSignoutResponse(url) {\n    const logger2 = this._logger.create(\"processSignoutResponse\");\n    const {\n      state,\n      response\n    } = await this.readSignoutResponseState(url, true);\n    if (state) {\n      logger2.debug(\"Received state from storage; validating response\");\n      this._validator.validateSignoutResponse(response, state);\n    } else {\n      logger2.debug(\"No state from storage; skipping response validation\");\n    }\n    return response;\n  }\n  clearStaleState() {\n    this._logger.create(\"clearStaleState\");\n    return State.clearStaleState(this.settings.stateStore, this.settings.staleStateAgeInSeconds);\n  }\n  async revokeToken(token, type) {\n    this._logger.create(\"revokeToken\");\n    return await this._tokenClient.revoke({\n      token,\n      token_type_hint: type\n    });\n  }\n};\n\n// src/SessionMonitor.ts\nvar SessionMonitor = class {\n  constructor(_userManager) {\n    this._userManager = _userManager;\n    this._logger = new Logger(\"SessionMonitor\");\n    this._start = async user => {\n      const session_state = user.session_state;\n      if (!session_state) {\n        return;\n      }\n      const logger2 = this._logger.create(\"_start\");\n      if (user.profile) {\n        this._sub = user.profile.sub;\n        this._sid = user.profile.sid;\n        logger2.debug(\"session_state\", session_state, \", sub\", this._sub);\n      } else {\n        this._sub = void 0;\n        this._sid = void 0;\n        logger2.debug(\"session_state\", session_state, \", anonymous user\");\n      }\n      if (this._checkSessionIFrame) {\n        this._checkSessionIFrame.start(session_state);\n        return;\n      }\n      try {\n        const url = await this._userManager.metadataService.getCheckSessionIframe();\n        if (url) {\n          logger2.debug(\"initializing check session iframe\");\n          const client_id = this._userManager.settings.client_id;\n          const intervalInSeconds = this._userManager.settings.checkSessionIntervalInSeconds;\n          const stopOnError = this._userManager.settings.stopCheckSessionOnError;\n          const checkSessionIFrame = new CheckSessionIFrame(this._callback, client_id, url, intervalInSeconds, stopOnError);\n          await checkSessionIFrame.load();\n          this._checkSessionIFrame = checkSessionIFrame;\n          checkSessionIFrame.start(session_state);\n        } else {\n          logger2.warn(\"no check session iframe found in the metadata\");\n        }\n      } catch (err) {\n        logger2.error(\"Error from getCheckSessionIframe:\", err instanceof Error ? err.message : err);\n      }\n    };\n    this._stop = () => {\n      const logger2 = this._logger.create(\"_stop\");\n      this._sub = void 0;\n      this._sid = void 0;\n      if (this._checkSessionIFrame) {\n        this._checkSessionIFrame.stop();\n      }\n      if (this._userManager.settings.monitorAnonymousSession) {\n        const timerHandle = setInterval(async () => {\n          clearInterval(timerHandle);\n          try {\n            const session = await this._userManager.querySessionStatus();\n            if (session) {\n              const tmpUser = {\n                session_state: session.session_state,\n                profile: session.sub && session.sid ? {\n                  sub: session.sub,\n                  sid: session.sid\n                } : null\n              };\n              void this._start(tmpUser);\n            }\n          } catch (err) {\n            logger2.error(\"error from querySessionStatus\", err instanceof Error ? err.message : err);\n          }\n        }, 1e3);\n      }\n    };\n    this._callback = async () => {\n      const logger2 = this._logger.create(\"_callback\");\n      try {\n        const session = await this._userManager.querySessionStatus();\n        let raiseEvent = true;\n        if (session && this._checkSessionIFrame) {\n          if (session.sub === this._sub) {\n            raiseEvent = false;\n            this._checkSessionIFrame.start(session.session_state);\n            if (session.sid === this._sid) {\n              logger2.debug(\"same sub still logged in at OP, restarting check session iframe; session_state\", session.session_state);\n            } else {\n              logger2.debug(\"same sub still logged in at OP, session state has changed, restarting check session iframe; session_state\", session.session_state);\n              this._userManager.events._raiseUserSessionChanged();\n            }\n          } else {\n            logger2.debug(\"different subject signed into OP\", session.sub);\n          }\n        } else {\n          logger2.debug(\"subject no longer signed into OP\");\n        }\n        if (raiseEvent) {\n          if (this._sub) {\n            this._userManager.events._raiseUserSignedOut();\n          } else {\n            this._userManager.events._raiseUserSignedIn();\n          }\n        } else {\n          logger2.debug(\"no change in session detected, no event to raise\");\n        }\n      } catch (err) {\n        if (this._sub) {\n          logger2.debug(\"Error calling queryCurrentSigninSession; raising signed out event\", err);\n          this._userManager.events._raiseUserSignedOut();\n        }\n      }\n    };\n    if (!_userManager) {\n      this._logger.throw(new Error(\"No user manager passed\"));\n    }\n    this._userManager.events.addUserLoaded(this._start);\n    this._userManager.events.addUserUnloaded(this._stop);\n    this._init().catch(err => {\n      this._logger.error(err);\n    });\n  }\n  async _init() {\n    this._logger.create(\"_init\");\n    const user = await this._userManager.getUser();\n    if (user) {\n      void this._start(user);\n    } else if (this._userManager.settings.monitorAnonymousSession) {\n      const session = await this._userManager.querySessionStatus();\n      if (session) {\n        const tmpUser = {\n          session_state: session.session_state,\n          profile: session.sub && session.sid ? {\n            sub: session.sub,\n            sid: session.sid\n          } : null\n        };\n        void this._start(tmpUser);\n      }\n    }\n  }\n};\n\n// src/User.ts\nvar User = class {\n  constructor(args) {\n    var _a;\n    this.id_token = args.id_token;\n    this.session_state = (_a = args.session_state) != null ? _a : null;\n    this.access_token = args.access_token;\n    this.refresh_token = args.refresh_token;\n    this.token_type = args.token_type;\n    this.scope = args.scope;\n    this.profile = args.profile;\n    this.expires_at = args.expires_at;\n    this.state = args.userState;\n  }\n  /** Computed number of seconds the access token has remaining. */\n  get expires_in() {\n    if (this.expires_at === void 0) {\n      return void 0;\n    }\n    return this.expires_at - Timer.getEpochTime();\n  }\n  set expires_in(value) {\n    if (value !== void 0) {\n      this.expires_at = Math.floor(value) + Timer.getEpochTime();\n    }\n  }\n  /** Computed value indicating if the access token is expired. */\n  get expired() {\n    const expires_in = this.expires_in;\n    if (expires_in === void 0) {\n      return void 0;\n    }\n    return expires_in <= 0;\n  }\n  /** Array representing the parsed values from the `scope`. */\n  get scopes() {\n    var _a, _b;\n    return (_b = (_a = this.scope) == null ? void 0 : _a.split(\" \")) != null ? _b : [];\n  }\n  toStorageString() {\n    new Logger(\"User\").create(\"toStorageString\");\n    return JSON.stringify({\n      id_token: this.id_token,\n      session_state: this.session_state,\n      access_token: this.access_token,\n      refresh_token: this.refresh_token,\n      token_type: this.token_type,\n      scope: this.scope,\n      profile: this.profile,\n      expires_at: this.expires_at\n    });\n  }\n  static fromStorageString(storageString) {\n    Logger.createStatic(\"User\", \"fromStorageString\");\n    return new User(JSON.parse(storageString));\n  }\n};\n\n// src/navigators/AbstractChildWindow.ts\nvar messageSource = \"oidc-client\";\nvar AbstractChildWindow = class {\n  constructor() {\n    this._abort = new Event(\"Window navigation aborted\");\n    this._disposeHandlers = /* @__PURE__ */new Set();\n    this._window = null;\n  }\n  async navigate(params) {\n    const logger2 = this._logger.create(\"navigate\");\n    if (!this._window) {\n      throw new Error(\"Attempted to navigate on a disposed window\");\n    }\n    logger2.debug(\"setting URL in window\");\n    this._window.location.replace(params.url);\n    const {\n      url,\n      keepOpen\n    } = await new Promise((resolve, reject) => {\n      const listener = e => {\n        var _a;\n        const data = e.data;\n        const origin = (_a = params.scriptOrigin) != null ? _a : window.location.origin;\n        if (e.origin !== origin || (data == null ? void 0 : data.source) !== messageSource) {\n          return;\n        }\n        try {\n          const state = UrlUtils.readParams(data.url, params.response_mode).get(\"state\");\n          if (!state) {\n            logger2.warn(\"no state found in response url\");\n          }\n          if (e.source !== this._window && state !== params.state) {\n            return;\n          }\n        } catch (err) {\n          this._dispose();\n          reject(new Error(\"Invalid response from window\"));\n        }\n        resolve(data);\n      };\n      window.addEventListener(\"message\", listener, false);\n      this._disposeHandlers.add(() => window.removeEventListener(\"message\", listener, false));\n      this._disposeHandlers.add(this._abort.addHandler(reason => {\n        this._dispose();\n        reject(reason);\n      }));\n    });\n    logger2.debug(\"got response from window\");\n    this._dispose();\n    if (!keepOpen) {\n      this.close();\n    }\n    return {\n      url\n    };\n  }\n  _dispose() {\n    this._logger.create(\"_dispose\");\n    for (const dispose of this._disposeHandlers) {\n      dispose();\n    }\n    this._disposeHandlers.clear();\n  }\n  static _notifyParent(parent, url, keepOpen = false, targetOrigin = window.location.origin) {\n    parent.postMessage({\n      source: messageSource,\n      url,\n      keepOpen\n    }, targetOrigin);\n  }\n};\n\n// src/UserManagerSettings.ts\nvar DefaultPopupWindowFeatures = {\n  location: false,\n  toolbar: false,\n  height: 640,\n  closePopupWindowAfterInSeconds: -1\n};\nvar DefaultPopupTarget = \"_blank\";\nvar DefaultAccessTokenExpiringNotificationTimeInSeconds = 60;\nvar DefaultCheckSessionIntervalInSeconds = 2;\nvar DefaultSilentRequestTimeoutInSeconds = 10;\nvar UserManagerSettingsStore = class extends OidcClientSettingsStore {\n  constructor(args) {\n    const {\n      popup_redirect_uri = args.redirect_uri,\n      popup_post_logout_redirect_uri = args.post_logout_redirect_uri,\n      popupWindowFeatures = DefaultPopupWindowFeatures,\n      popupWindowTarget = DefaultPopupTarget,\n      redirectMethod = \"assign\",\n      redirectTarget = \"self\",\n      iframeNotifyParentOrigin = args.iframeNotifyParentOrigin,\n      iframeScriptOrigin = args.iframeScriptOrigin,\n      silent_redirect_uri = args.redirect_uri,\n      silentRequestTimeoutInSeconds = DefaultSilentRequestTimeoutInSeconds,\n      automaticSilentRenew = true,\n      validateSubOnSilentRenew = true,\n      includeIdTokenInSilentRenew = false,\n      monitorSession = false,\n      monitorAnonymousSession = false,\n      checkSessionIntervalInSeconds = DefaultCheckSessionIntervalInSeconds,\n      query_status_response_type = \"code\",\n      stopCheckSessionOnError = true,\n      revokeTokenTypes = [\"access_token\", \"refresh_token\"],\n      revokeTokensOnSignout = false,\n      includeIdTokenInSilentSignout = false,\n      accessTokenExpiringNotificationTimeInSeconds = DefaultAccessTokenExpiringNotificationTimeInSeconds,\n      userStore\n    } = args;\n    super(args);\n    this.popup_redirect_uri = popup_redirect_uri;\n    this.popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;\n    this.popupWindowFeatures = popupWindowFeatures;\n    this.popupWindowTarget = popupWindowTarget;\n    this.redirectMethod = redirectMethod;\n    this.redirectTarget = redirectTarget;\n    this.iframeNotifyParentOrigin = iframeNotifyParentOrigin;\n    this.iframeScriptOrigin = iframeScriptOrigin;\n    this.silent_redirect_uri = silent_redirect_uri;\n    this.silentRequestTimeoutInSeconds = silentRequestTimeoutInSeconds;\n    this.automaticSilentRenew = automaticSilentRenew;\n    this.validateSubOnSilentRenew = validateSubOnSilentRenew;\n    this.includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;\n    this.monitorSession = monitorSession;\n    this.monitorAnonymousSession = monitorAnonymousSession;\n    this.checkSessionIntervalInSeconds = checkSessionIntervalInSeconds;\n    this.stopCheckSessionOnError = stopCheckSessionOnError;\n    this.query_status_response_type = query_status_response_type;\n    this.revokeTokenTypes = revokeTokenTypes;\n    this.revokeTokensOnSignout = revokeTokensOnSignout;\n    this.includeIdTokenInSilentSignout = includeIdTokenInSilentSignout;\n    this.accessTokenExpiringNotificationTimeInSeconds = accessTokenExpiringNotificationTimeInSeconds;\n    if (userStore) {\n      this.userStore = userStore;\n    } else {\n      const store = typeof window !== \"undefined\" ? window.sessionStorage : new InMemoryWebStorage();\n      this.userStore = new WebStorageStateStore({\n        store\n      });\n    }\n  }\n};\n\n// src/navigators/IFrameWindow.ts\nvar IFrameWindow = class extends AbstractChildWindow {\n  constructor({\n    silentRequestTimeoutInSeconds = DefaultSilentRequestTimeoutInSeconds\n  }) {\n    super();\n    this._logger = new Logger(\"IFrameWindow\");\n    this._timeoutInSeconds = silentRequestTimeoutInSeconds;\n    this._frame = IFrameWindow.createHiddenIframe();\n    this._window = this._frame.contentWindow;\n  }\n  static createHiddenIframe() {\n    const iframe = window.document.createElement(\"iframe\");\n    iframe.style.visibility = \"hidden\";\n    iframe.style.position = \"fixed\";\n    iframe.style.left = \"-1000px\";\n    iframe.style.top = \"0\";\n    iframe.width = \"0\";\n    iframe.height = \"0\";\n    window.document.body.appendChild(iframe);\n    return iframe;\n  }\n  async navigate(params) {\n    this._logger.debug(\"navigate: Using timeout of:\", this._timeoutInSeconds);\n    const timer = setTimeout(() => this._abort.raise(new ErrorTimeout(\"IFrame timed out without a response\")), this._timeoutInSeconds * 1e3);\n    this._disposeHandlers.add(() => clearTimeout(timer));\n    return await super.navigate(params);\n  }\n  close() {\n    var _a;\n    if (this._frame) {\n      if (this._frame.parentNode) {\n        this._frame.addEventListener(\"load\", ev => {\n          var _a2;\n          const frame = ev.target;\n          (_a2 = frame.parentNode) == null ? void 0 : _a2.removeChild(frame);\n          this._abort.raise(new Error(\"IFrame removed from DOM\"));\n        }, true);\n        (_a = this._frame.contentWindow) == null ? void 0 : _a.location.replace(\"about:blank\");\n      }\n      this._frame = null;\n    }\n    this._window = null;\n  }\n  static notifyParent(url, targetOrigin) {\n    return super._notifyParent(window.parent, url, false, targetOrigin);\n  }\n};\n\n// src/navigators/IFrameNavigator.ts\nvar IFrameNavigator = class {\n  constructor(_settings) {\n    this._settings = _settings;\n    this._logger = new Logger(\"IFrameNavigator\");\n  }\n  async prepare({\n    silentRequestTimeoutInSeconds = this._settings.silentRequestTimeoutInSeconds\n  }) {\n    return new IFrameWindow({\n      silentRequestTimeoutInSeconds\n    });\n  }\n  async callback(url) {\n    this._logger.create(\"callback\");\n    IFrameWindow.notifyParent(url, this._settings.iframeNotifyParentOrigin);\n  }\n};\n\n// src/navigators/PopupWindow.ts\nvar checkForPopupClosedInterval = 500;\nvar second = 1e3;\nvar PopupWindow = class extends AbstractChildWindow {\n  constructor({\n    popupWindowTarget = DefaultPopupTarget,\n    popupWindowFeatures = {}\n  }) {\n    super();\n    this._logger = new Logger(\"PopupWindow\");\n    const centeredPopup = PopupUtils.center({\n      ...DefaultPopupWindowFeatures,\n      ...popupWindowFeatures\n    });\n    this._window = window.open(void 0, popupWindowTarget, PopupUtils.serialize(centeredPopup));\n    if (popupWindowFeatures.closePopupWindowAfterInSeconds && popupWindowFeatures.closePopupWindowAfterInSeconds > 0) {\n      setTimeout(() => {\n        if (!this._window || typeof this._window.closed !== \"boolean\" || this._window.closed) {\n          this._abort.raise(new Error(\"Popup blocked by user\"));\n          return;\n        }\n        this.close();\n      }, popupWindowFeatures.closePopupWindowAfterInSeconds * second);\n    }\n  }\n  async navigate(params) {\n    var _a;\n    (_a = this._window) == null ? void 0 : _a.focus();\n    const popupClosedInterval = setInterval(() => {\n      if (!this._window || this._window.closed) {\n        this._abort.raise(new Error(\"Popup closed by user\"));\n      }\n    }, checkForPopupClosedInterval);\n    this._disposeHandlers.add(() => clearInterval(popupClosedInterval));\n    return await super.navigate(params);\n  }\n  close() {\n    if (this._window) {\n      if (!this._window.closed) {\n        this._window.close();\n        this._abort.raise(new Error(\"Popup closed\"));\n      }\n    }\n    this._window = null;\n  }\n  static notifyOpener(url, keepOpen) {\n    if (!window.opener) {\n      throw new Error(\"No window.opener. Can't complete notification.\");\n    }\n    return super._notifyParent(window.opener, url, keepOpen);\n  }\n};\n\n// src/navigators/PopupNavigator.ts\nvar PopupNavigator = class {\n  constructor(_settings) {\n    this._settings = _settings;\n    this._logger = new Logger(\"PopupNavigator\");\n  }\n  async prepare({\n    popupWindowFeatures = this._settings.popupWindowFeatures,\n    popupWindowTarget = this._settings.popupWindowTarget\n  }) {\n    return new PopupWindow({\n      popupWindowFeatures,\n      popupWindowTarget\n    });\n  }\n  async callback(url, {\n    keepOpen = false\n  }) {\n    this._logger.create(\"callback\");\n    PopupWindow.notifyOpener(url, keepOpen);\n  }\n};\n\n// src/navigators/RedirectNavigator.ts\nvar RedirectNavigator = class {\n  constructor(_settings) {\n    this._settings = _settings;\n    this._logger = new Logger(\"RedirectNavigator\");\n  }\n  async prepare({\n    redirectMethod = this._settings.redirectMethod,\n    redirectTarget = this._settings.redirectTarget\n  }) {\n    var _a;\n    this._logger.create(\"prepare\");\n    let targetWindow = window.self;\n    if (redirectTarget === \"top\") {\n      targetWindow = (_a = window.top) != null ? _a : window.self;\n    }\n    const redirect = targetWindow.location[redirectMethod].bind(targetWindow.location);\n    let abort;\n    return {\n      navigate: async params => {\n        this._logger.create(\"navigate\");\n        const promise = new Promise((resolve, reject) => {\n          abort = reject;\n        });\n        redirect(params.url);\n        return await promise;\n      },\n      close: () => {\n        this._logger.create(\"close\");\n        abort == null ? void 0 : abort(new Error(\"Redirect aborted\"));\n        targetWindow.stop();\n      }\n    };\n  }\n  async callback() {\n    return;\n  }\n};\n\n// src/UserManagerEvents.ts\nvar UserManagerEvents = class extends AccessTokenEvents {\n  constructor(settings) {\n    super({\n      expiringNotificationTimeInSeconds: settings.accessTokenExpiringNotificationTimeInSeconds\n    });\n    this._logger = new Logger(\"UserManagerEvents\");\n    this._userLoaded = new Event(\"User loaded\");\n    this._userUnloaded = new Event(\"User unloaded\");\n    this._silentRenewError = new Event(\"Silent renew error\");\n    this._userSignedIn = new Event(\"User signed in\");\n    this._userSignedOut = new Event(\"User signed out\");\n    this._userSessionChanged = new Event(\"User session changed\");\n  }\n  load(user, raiseEvent = true) {\n    super.load(user);\n    if (raiseEvent) {\n      this._userLoaded.raise(user);\n    }\n  }\n  unload() {\n    super.unload();\n    this._userUnloaded.raise();\n  }\n  /**\n   * Add callback: Raised when a user session has been established (or re-established).\n   */\n  addUserLoaded(cb) {\n    return this._userLoaded.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when a user session has been established (or re-established).\n   */\n  removeUserLoaded(cb) {\n    return this._userLoaded.removeHandler(cb);\n  }\n  /**\n   * Add callback: Raised when a user session has been terminated.\n   */\n  addUserUnloaded(cb) {\n    return this._userUnloaded.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when a user session has been terminated.\n   */\n  removeUserUnloaded(cb) {\n    return this._userUnloaded.removeHandler(cb);\n  }\n  /**\n   * Add callback: Raised when the automatic silent renew has failed.\n   */\n  addSilentRenewError(cb) {\n    return this._silentRenewError.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when the automatic silent renew has failed.\n   */\n  removeSilentRenewError(cb) {\n    return this._silentRenewError.removeHandler(cb);\n  }\n  /**\n   * @internal\n   */\n  _raiseSilentRenewError(e) {\n    this._silentRenewError.raise(e);\n  }\n  /**\n   * Add callback: Raised when the user is signed in (when `monitorSession` is set).\n   * @see {@link UserManagerSettings.monitorSession}\n   */\n  addUserSignedIn(cb) {\n    return this._userSignedIn.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when the user is signed in (when `monitorSession` is set).\n   */\n  removeUserSignedIn(cb) {\n    this._userSignedIn.removeHandler(cb);\n  }\n  /**\n   * @internal\n   */\n  _raiseUserSignedIn() {\n    this._userSignedIn.raise();\n  }\n  /**\n   * Add callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\n   * @see {@link UserManagerSettings.monitorSession}\n   */\n  addUserSignedOut(cb) {\n    return this._userSignedOut.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\n   */\n  removeUserSignedOut(cb) {\n    this._userSignedOut.removeHandler(cb);\n  }\n  /**\n   * @internal\n   */\n  _raiseUserSignedOut() {\n    this._userSignedOut.raise();\n  }\n  /**\n   * Add callback: Raised when the user session changed (when `monitorSession` is set).\n   * @see {@link UserManagerSettings.monitorSession}\n   */\n  addUserSessionChanged(cb) {\n    return this._userSessionChanged.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when the user session changed (when `monitorSession` is set).\n   */\n  removeUserSessionChanged(cb) {\n    this._userSessionChanged.removeHandler(cb);\n  }\n  /**\n   * @internal\n   */\n  _raiseUserSessionChanged() {\n    this._userSessionChanged.raise();\n  }\n};\n\n// src/SilentRenewService.ts\nvar SilentRenewService = class {\n  constructor(_userManager) {\n    this._userManager = _userManager;\n    this._logger = new Logger(\"SilentRenewService\");\n    this._isStarted = false;\n    this._retryTimer = new Timer(\"Retry Silent Renew\");\n    this._tokenExpiring = async () => {\n      const logger2 = this._logger.create(\"_tokenExpiring\");\n      try {\n        await this._userManager.signinSilent();\n        logger2.debug(\"silent token renewal successful\");\n      } catch (err) {\n        if (err instanceof ErrorTimeout) {\n          logger2.warn(\"ErrorTimeout from signinSilent:\", err, \"retry in 5s\");\n          this._retryTimer.init(5);\n          return;\n        }\n        logger2.error(\"Error from signinSilent:\", err);\n        this._userManager.events._raiseSilentRenewError(err);\n      }\n    };\n  }\n  async start() {\n    const logger2 = this._logger.create(\"start\");\n    if (!this._isStarted) {\n      this._isStarted = true;\n      this._userManager.events.addAccessTokenExpiring(this._tokenExpiring);\n      this._retryTimer.addHandler(this._tokenExpiring);\n      try {\n        await this._userManager.getUser();\n      } catch (err) {\n        logger2.error(\"getUser error\", err);\n      }\n    }\n  }\n  stop() {\n    if (this._isStarted) {\n      this._retryTimer.cancel();\n      this._retryTimer.removeHandler(this._tokenExpiring);\n      this._userManager.events.removeAccessTokenExpiring(this._tokenExpiring);\n      this._isStarted = false;\n    }\n  }\n};\n\n// src/RefreshState.ts\nvar RefreshState = class {\n  constructor(args, resource) {\n    this.refresh_token = args.refresh_token;\n    this.id_token = args.id_token;\n    this.session_state = args.session_state;\n    this.scope = args.scope;\n    this.profile = args.profile;\n    this.resource = resource;\n    this.data = args.state;\n  }\n};\n\n// src/UserManager.ts\nvar UserManager = class {\n  constructor(settings, redirectNavigator, popupNavigator, iframeNavigator) {\n    this._logger = new Logger(\"UserManager\");\n    this.settings = new UserManagerSettingsStore(settings);\n    this._client = new OidcClient(settings);\n    this._redirectNavigator = redirectNavigator != null ? redirectNavigator : new RedirectNavigator(this.settings);\n    this._popupNavigator = popupNavigator != null ? popupNavigator : new PopupNavigator(this.settings);\n    this._iframeNavigator = iframeNavigator != null ? iframeNavigator : new IFrameNavigator(this.settings);\n    this._events = new UserManagerEvents(this.settings);\n    this._silentRenewService = new SilentRenewService(this);\n    if (this.settings.automaticSilentRenew) {\n      this.startSilentRenew();\n    }\n    this._sessionMonitor = null;\n    if (this.settings.monitorSession) {\n      this._sessionMonitor = new SessionMonitor(this);\n    }\n  }\n  /** Returns an object used to register for events raised by the `UserManager`. */\n  get events() {\n    return this._events;\n  }\n  /** Returns an object used to access the metadata configuration of the OIDC provider. */\n  get metadataService() {\n    return this._client.metadataService;\n  }\n  /**\n   * Returns promise to load the `User` object for the currently authenticated user.\n   */\n  async getUser() {\n    const logger2 = this._logger.create(\"getUser\");\n    const user = await this._loadUser();\n    if (user) {\n      logger2.info(\"user loaded\");\n      this._events.load(user, false);\n      return user;\n    }\n    logger2.info(\"user not found in storage\");\n    return null;\n  }\n  /**\n   * Returns promise to remove from any storage the currently authenticated user.\n   */\n  async removeUser() {\n    const logger2 = this._logger.create(\"removeUser\");\n    await this.storeUser(null);\n    logger2.info(\"user removed from storage\");\n    this._events.unload();\n  }\n  /**\n   * Returns promise to trigger a redirect of the current window to the authorization endpoint.\n   */\n  async signinRedirect(args = {}) {\n    this._logger.create(\"signinRedirect\");\n    const {\n      redirectMethod,\n      ...requestArgs\n    } = args;\n    const handle = await this._redirectNavigator.prepare({\n      redirectMethod\n    });\n    await this._signinStart({\n      request_type: \"si:r\",\n      ...requestArgs\n    }, handle);\n  }\n  /**\n   * Returns promise to process response from the authorization endpoint. The result of the promise is the authenticated `User`.\n   */\n  async signinRedirectCallback(url = window.location.href) {\n    const logger2 = this._logger.create(\"signinRedirectCallback\");\n    const user = await this._signinEnd(url);\n    if (user.profile && user.profile.sub) {\n      logger2.info(\"success, signed in subject\", user.profile.sub);\n    } else {\n      logger2.info(\"no subject\");\n    }\n    return user;\n  }\n  /**\n   * Returns promise to process the signin with user/password. The result of the promise is the authenticated `User`.\n   *\n   * Throws an ErrorResponse in case of wrong authentication.\n   */\n  async signinResourceOwnerCredentials({\n    username,\n    password,\n    skipUserInfo = false\n  }) {\n    const logger2 = this._logger.create(\"signinResourceOwnerCredential\");\n    const signinResponse = await this._client.processResourceOwnerPasswordCredentials({\n      username,\n      password,\n      skipUserInfo,\n      extraTokenParams: this.settings.extraTokenParams\n    });\n    logger2.debug(\"got signin response\");\n    const user = await this._buildUser(signinResponse);\n    if (user.profile && user.profile.sub) {\n      logger2.info(\"success, signed in subject\", user.profile.sub);\n    } else {\n      logger2.info(\"no subject\");\n    }\n    return user;\n  }\n  /**\n   * Returns promise to trigger a request (via a popup window) to the authorization endpoint. The result of the promise is the authenticated `User`.\n   */\n  async signinPopup(args = {}) {\n    const logger2 = this._logger.create(\"signinPopup\");\n    const {\n      popupWindowFeatures,\n      popupWindowTarget,\n      ...requestArgs\n    } = args;\n    const url = this.settings.popup_redirect_uri;\n    if (!url) {\n      logger2.throw(new Error(\"No popup_redirect_uri configured\"));\n    }\n    const handle = await this._popupNavigator.prepare({\n      popupWindowFeatures,\n      popupWindowTarget\n    });\n    const user = await this._signin({\n      request_type: \"si:p\",\n      redirect_uri: url,\n      display: \"popup\",\n      ...requestArgs\n    }, handle);\n    if (user) {\n      if (user.profile && user.profile.sub) {\n        logger2.info(\"success, signed in subject\", user.profile.sub);\n      } else {\n        logger2.info(\"no subject\");\n      }\n    }\n    return user;\n  }\n  /**\n   * Returns promise to notify the opening window of response from the authorization endpoint.\n   */\n  async signinPopupCallback(url = window.location.href, keepOpen = false) {\n    const logger2 = this._logger.create(\"signinPopupCallback\");\n    await this._popupNavigator.callback(url, {\n      keepOpen\n    });\n    logger2.info(\"success\");\n  }\n  /**\n   * Returns promise to trigger a silent request (via an iframe) to the authorization endpoint.\n   * The result of the promise is the authenticated `User`.\n   */\n  async signinSilent(args = {}) {\n    var _a;\n    const logger2 = this._logger.create(\"signinSilent\");\n    const {\n      silentRequestTimeoutInSeconds,\n      resource,\n      ...requestArgs\n    } = args;\n    let user = await this._loadUser();\n    if (user == null ? void 0 : user.refresh_token) {\n      logger2.debug(\"using refresh token\");\n      const state = new RefreshState(user, resource);\n      return await this._useRefreshToken(state);\n    }\n    const url = this.settings.silent_redirect_uri;\n    if (!url) {\n      logger2.throw(new Error(\"No silent_redirect_uri configured\"));\n    }\n    let verifySub;\n    if (user && this.settings.validateSubOnSilentRenew) {\n      logger2.debug(\"subject prior to silent renew:\", user.profile.sub);\n      verifySub = user.profile.sub;\n    }\n    const handle = await this._iframeNavigator.prepare({\n      silentRequestTimeoutInSeconds\n    });\n    user = await this._signin({\n      request_type: \"si:s\",\n      redirect_uri: url,\n      prompt: \"none\",\n      id_token_hint: this.settings.includeIdTokenInSilentRenew ? user == null ? void 0 : user.id_token : void 0,\n      ...requestArgs\n    }, handle, verifySub);\n    if (user) {\n      if ((_a = user.profile) == null ? void 0 : _a.sub) {\n        logger2.info(\"success, signed in subject\", user.profile.sub);\n      } else {\n        logger2.info(\"no subject\");\n      }\n    }\n    return user;\n  }\n  async _useRefreshToken(state) {\n    const response = await this._client.useRefreshToken({\n      state,\n      timeoutInSeconds: this.settings.silentRequestTimeoutInSeconds\n    });\n    const user = new User({\n      ...state,\n      ...response\n    });\n    await this.storeUser(user);\n    this._events.load(user);\n    return user;\n  }\n  /**\n   * Returns promise to notify the parent window of response from the authorization endpoint.\n   */\n  async signinSilentCallback(url = window.location.href) {\n    const logger2 = this._logger.create(\"signinSilentCallback\");\n    await this._iframeNavigator.callback(url);\n    logger2.info(\"success\");\n  }\n  async signinCallback(url = window.location.href) {\n    const {\n      state\n    } = await this._client.readSigninResponseState(url);\n    switch (state.request_type) {\n      case \"si:r\":\n        return await this.signinRedirectCallback(url);\n      case \"si:p\":\n        return await this.signinPopupCallback(url);\n      case \"si:s\":\n        return await this.signinSilentCallback(url);\n      default:\n        throw new Error(\"invalid response_type in state\");\n    }\n  }\n  async signoutCallback(url = window.location.href, keepOpen = false) {\n    const {\n      state\n    } = await this._client.readSignoutResponseState(url);\n    if (!state) {\n      return;\n    }\n    switch (state.request_type) {\n      case \"so:r\":\n        await this.signoutRedirectCallback(url);\n        break;\n      case \"so:p\":\n        await this.signoutPopupCallback(url, keepOpen);\n        break;\n      case \"so:s\":\n        await this.signoutSilentCallback(url);\n        break;\n      default:\n        throw new Error(\"invalid response_type in state\");\n    }\n  }\n  /**\n   * Returns promise to query OP for user's current signin status. Returns object with session_state and subject identifier.\n   */\n  async querySessionStatus(args = {}) {\n    const logger2 = this._logger.create(\"querySessionStatus\");\n    const {\n      silentRequestTimeoutInSeconds,\n      ...requestArgs\n    } = args;\n    const url = this.settings.silent_redirect_uri;\n    if (!url) {\n      logger2.throw(new Error(\"No silent_redirect_uri configured\"));\n    }\n    const user = await this._loadUser();\n    const handle = await this._iframeNavigator.prepare({\n      silentRequestTimeoutInSeconds\n    });\n    const navResponse = await this._signinStart({\n      request_type: \"si:s\",\n      // this acts like a signin silent\n      redirect_uri: url,\n      prompt: \"none\",\n      id_token_hint: this.settings.includeIdTokenInSilentRenew ? user == null ? void 0 : user.id_token : void 0,\n      response_type: this.settings.query_status_response_type,\n      scope: \"openid\",\n      skipUserInfo: true,\n      ...requestArgs\n    }, handle);\n    try {\n      const signinResponse = await this._client.processSigninResponse(navResponse.url);\n      logger2.debug(\"got signin response\");\n      if (signinResponse.session_state && signinResponse.profile.sub) {\n        logger2.info(\"success for subject\", signinResponse.profile.sub);\n        return {\n          session_state: signinResponse.session_state,\n          sub: signinResponse.profile.sub,\n          sid: signinResponse.profile.sid\n        };\n      }\n      logger2.info(\"success, user not authenticated\");\n      return null;\n    } catch (err) {\n      if (this.settings.monitorAnonymousSession && err instanceof ErrorResponse) {\n        switch (err.error) {\n          case \"login_required\":\n          case \"consent_required\":\n          case \"interaction_required\":\n          case \"account_selection_required\":\n            logger2.info(\"success for anonymous user\");\n            return {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              session_state: err.session_state\n            };\n        }\n      }\n      throw err;\n    }\n  }\n  async _signin(args, handle, verifySub) {\n    const navResponse = await this._signinStart(args, handle);\n    return await this._signinEnd(navResponse.url, verifySub);\n  }\n  async _signinStart(args, handle) {\n    const logger2 = this._logger.create(\"_signinStart\");\n    try {\n      const signinRequest = await this._client.createSigninRequest(args);\n      logger2.debug(\"got signin request\");\n      return await handle.navigate({\n        url: signinRequest.url,\n        state: signinRequest.state.id,\n        response_mode: signinRequest.state.response_mode,\n        scriptOrigin: this.settings.iframeScriptOrigin\n      });\n    } catch (err) {\n      logger2.debug(\"error after preparing navigator, closing navigator window\");\n      handle.close();\n      throw err;\n    }\n  }\n  async _signinEnd(url, verifySub) {\n    const logger2 = this._logger.create(\"_signinEnd\");\n    const signinResponse = await this._client.processSigninResponse(url);\n    logger2.debug(\"got signin response\");\n    const user = await this._buildUser(signinResponse, verifySub);\n    return user;\n  }\n  async _buildUser(signinResponse, verifySub) {\n    const logger2 = this._logger.create(\"_buildUser\");\n    const user = new User(signinResponse);\n    if (verifySub) {\n      if (verifySub !== user.profile.sub) {\n        logger2.debug(\"current user does not match user returned from signin. sub from signin:\", user.profile.sub);\n        throw new ErrorResponse({\n          ...signinResponse,\n          error: \"login_required\"\n        });\n      }\n      logger2.debug(\"current user matches user returned from signin\");\n    }\n    await this.storeUser(user);\n    logger2.debug(\"user stored\");\n    this._events.load(user);\n    return user;\n  }\n  /**\n   * Returns promise to trigger a redirect of the current window to the end session endpoint.\n   */\n  async signoutRedirect(args = {}) {\n    const logger2 = this._logger.create(\"signoutRedirect\");\n    const {\n      redirectMethod,\n      ...requestArgs\n    } = args;\n    const handle = await this._redirectNavigator.prepare({\n      redirectMethod\n    });\n    await this._signoutStart({\n      request_type: \"so:r\",\n      post_logout_redirect_uri: this.settings.post_logout_redirect_uri,\n      ...requestArgs\n    }, handle);\n    logger2.info(\"success\");\n  }\n  /**\n   * Returns promise to process response from the end session endpoint.\n   */\n  async signoutRedirectCallback(url = window.location.href) {\n    const logger2 = this._logger.create(\"signoutRedirectCallback\");\n    const response = await this._signoutEnd(url);\n    logger2.info(\"success\");\n    return response;\n  }\n  /**\n   * Returns promise to trigger a redirect of a popup window window to the end session endpoint.\n   */\n  async signoutPopup(args = {}) {\n    const logger2 = this._logger.create(\"signoutPopup\");\n    const {\n      popupWindowFeatures,\n      popupWindowTarget,\n      ...requestArgs\n    } = args;\n    const url = this.settings.popup_post_logout_redirect_uri;\n    const handle = await this._popupNavigator.prepare({\n      popupWindowFeatures,\n      popupWindowTarget\n    });\n    await this._signout({\n      request_type: \"so:p\",\n      post_logout_redirect_uri: url,\n      // we're putting a dummy entry in here because we\n      // need a unique id from the state for notification\n      // to the parent window, which is necessary if we\n      // plan to return back to the client after signout\n      // and so we can close the popup after signout\n      state: url == null ? void 0 : {},\n      ...requestArgs\n    }, handle);\n    logger2.info(\"success\");\n  }\n  /**\n   * Returns promise to process response from the end session endpoint from a popup window.\n   */\n  async signoutPopupCallback(url = window.location.href, keepOpen = false) {\n    const logger2 = this._logger.create(\"signoutPopupCallback\");\n    await this._popupNavigator.callback(url, {\n      keepOpen\n    });\n    logger2.info(\"success\");\n  }\n  async _signout(args, handle) {\n    const navResponse = await this._signoutStart(args, handle);\n    return await this._signoutEnd(navResponse.url);\n  }\n  async _signoutStart(args = {}, handle) {\n    var _a;\n    const logger2 = this._logger.create(\"_signoutStart\");\n    try {\n      const user = await this._loadUser();\n      logger2.debug(\"loaded current user from storage\");\n      if (this.settings.revokeTokensOnSignout) {\n        await this._revokeInternal(user);\n      }\n      const id_token = args.id_token_hint || user && user.id_token;\n      if (id_token) {\n        logger2.debug(\"setting id_token_hint in signout request\");\n        args.id_token_hint = id_token;\n      }\n      await this.removeUser();\n      logger2.debug(\"user removed, creating signout request\");\n      const signoutRequest = await this._client.createSignoutRequest(args);\n      logger2.debug(\"got signout request\");\n      return await handle.navigate({\n        url: signoutRequest.url,\n        state: (_a = signoutRequest.state) == null ? void 0 : _a.id,\n        scriptOrigin: this.settings.iframeScriptOrigin\n      });\n    } catch (err) {\n      logger2.debug(\"error after preparing navigator, closing navigator window\");\n      handle.close();\n      throw err;\n    }\n  }\n  async _signoutEnd(url) {\n    const logger2 = this._logger.create(\"_signoutEnd\");\n    const signoutResponse = await this._client.processSignoutResponse(url);\n    logger2.debug(\"got signout response\");\n    return signoutResponse;\n  }\n  /**\n   * Returns promise to trigger a silent request (via an iframe) to the end session endpoint.\n   */\n  async signoutSilent(args = {}) {\n    var _a;\n    const logger2 = this._logger.create(\"signoutSilent\");\n    const {\n      silentRequestTimeoutInSeconds,\n      ...requestArgs\n    } = args;\n    const id_token_hint = this.settings.includeIdTokenInSilentSignout ? (_a = await this._loadUser()) == null ? void 0 : _a.id_token : void 0;\n    const url = this.settings.popup_post_logout_redirect_uri;\n    const handle = await this._iframeNavigator.prepare({\n      silentRequestTimeoutInSeconds\n    });\n    await this._signout({\n      request_type: \"so:s\",\n      post_logout_redirect_uri: url,\n      id_token_hint,\n      ...requestArgs\n    }, handle);\n    logger2.info(\"success\");\n  }\n  /**\n   * Returns promise to notify the parent window of response from the end session endpoint.\n   */\n  async signoutSilentCallback(url = window.location.href) {\n    const logger2 = this._logger.create(\"signoutSilentCallback\");\n    await this._iframeNavigator.callback(url);\n    logger2.info(\"success\");\n  }\n  async revokeTokens(types) {\n    const user = await this._loadUser();\n    await this._revokeInternal(user, types);\n  }\n  async _revokeInternal(user, types = this.settings.revokeTokenTypes) {\n    const logger2 = this._logger.create(\"_revokeInternal\");\n    if (!user) return;\n    const typesPresent = types.filter(type => typeof user[type] === \"string\");\n    if (!typesPresent.length) {\n      logger2.debug(\"no need to revoke due to no token(s)\");\n      return;\n    }\n    for (const type of typesPresent) {\n      await this._client.revokeToken(user[type],\n      // eslint-disable-line @typescript-eslint/no-non-null-assertion\n      type);\n      logger2.info(`${type} revoked successfully`);\n      if (type !== \"access_token\") {\n        user[type] = null;\n      }\n    }\n    await this.storeUser(user);\n    logger2.debug(\"user stored\");\n    this._events.load(user);\n  }\n  /**\n   * Enables silent renew for the `UserManager`.\n   */\n  startSilentRenew() {\n    this._logger.create(\"startSilentRenew\");\n    void this._silentRenewService.start();\n  }\n  /**\n   * Disables silent renew for the `UserManager`.\n   */\n  stopSilentRenew() {\n    this._silentRenewService.stop();\n  }\n  get _userStoreKey() {\n    return `user:${this.settings.authority}:${this.settings.client_id}`;\n  }\n  async _loadUser() {\n    const logger2 = this._logger.create(\"_loadUser\");\n    const storageString = await this.settings.userStore.get(this._userStoreKey);\n    if (storageString) {\n      logger2.debug(\"user storageString loaded\");\n      return User.fromStorageString(storageString);\n    }\n    logger2.debug(\"no user storageString\");\n    return null;\n  }\n  async storeUser(user) {\n    const logger2 = this._logger.create(\"storeUser\");\n    if (user) {\n      logger2.debug(\"storing user\");\n      const storageString = user.toStorageString();\n      await this.settings.userStore.set(this._userStoreKey, storageString);\n    } else {\n      this._logger.debug(\"removing user\");\n      await this.settings.userStore.remove(this._userStoreKey);\n    }\n  }\n  /**\n   * Removes stale state entries in storage for incomplete authorize requests.\n   */\n  async clearStaleState() {\n    await this._client.clearStaleState();\n  }\n};\n\n// package.json\nvar version = \"2.3.0\";\n\n// src/Version.ts\nvar Version = version;\nexport { AccessTokenEvents, CheckSessionIFrame, ErrorResponse, ErrorTimeout, InMemoryWebStorage, Log, Logger, MetadataService, OidcClient, OidcClientSettingsStore, SessionMonitor, SigninResponse, SigninState, SignoutResponse, State, User, UserManager, UserManagerSettingsStore, Version, WebStorageStateStore };","map":{"version":3,"names":["CryptoJS","sha256","Base64","Utf8","nopLogger","debug","info","warn","error","level","logger","Log","Log2","reset","setLevel","value","Error","setLogger","Logger","constructor","_name","args","_format","_method","throw","err","create","method","methodLogger","Object","createStatic","name","staticMethod","staticLogger","prefix","UUID_V4_TEMPLATE","CryptoUtils","_randomWord","lib","WordArray","random","words","generateUUIDv4","uuid","replace","c","toString","generateCodeVerifier","generateCodeChallenge","code_verifier","hashed","stringify","generateBasicAuth","client_id","client_secret","basicAuth","parse","join","Event","_logger","_callbacks","addHandler","cb","push","removeHandler","idx","lastIndexOf","splice","raise","ev","jwt_decode","JwtUtils","decode","token","PopupUtils","center","features","_a","_b","_c","width","find","window","outerWidth","left","Math","max","round","screenX","height","top","screenY","outerHeight","serialize","entries","filter","map","key","Timer","arguments","_timerHandle","_expiration","_callback","diff","getEpochTime","cancel","floor","Date","now","init","durationInSeconds","logger2","expiration","timerDurationInSeconds","min","setInterval","clearInterval","UrlUtils","readParams","url","responseMode","TypeError","parsedUrl","URL","params","URLSearchParams","slice","ErrorResponse","form","error_description","error_uri","state","userState","session_state","ErrorTimeout","message","AccessTokenEvents","_expiringTimer","_expiredTimer","_expiringNotificationTimeInSeconds","expiringNotificationTimeInSeconds","load","container","access_token","expires_in","duration","expiring","expired","unload","addAccessTokenExpiring","removeAccessTokenExpiring","addAccessTokenExpired","removeAccessTokenExpired","CheckSessionIFrame","_client_id","_intervalInSeconds","_stopOnError","_timer","_session_state","_message","e","origin","_frame_origin","source","_frame","contentWindow","data","stop","document","createElement","style","visibility","position","src","href","Promise","resolve","onload","body","appendChild","addEventListener","start","send","postMessage","InMemoryWebStorage","_data","clear","getItem","setItem","removeItem","length","getOwnPropertyNames","index","JsonService","additionalContentTypes","_jwtHandler","_extraHeaders","_contentTypes","fetchWithTimeout","input","timeoutInSeconds","initFetch","fetch","controller","AbortController","timeoutId","setTimeout","abort","response","signal","DOMException","clearTimeout","getJson","credentials","headers","appendExtraHeaders","status","contentType","get","item","startsWith","ok","text","json","statusText","JSON","postForm","initCredentials","responseText","customKeys","keys","protectedHeaders","forEach","headerName","includes","toLocaleLowerCase","content","MetadataService","_settings","_signingKeys","_metadata","_metadataUrl","metadataUrl","_jsonService","extraHeaders","signingKeys","metadata","fetchRequestCredentials","_fetchRequestCredentials","resetSigningKeys","getMetadata","assign","metadataSeed","getIssuer","_getMetadataProperty","getAuthorizationEndpoint","getUserInfoEndpoint","getTokenEndpoint","optional","getCheckSessionIframe","getEndSessionEndpoint","getRevocationEndpoint","getKeysEndpoint","getSigningKeys","jwks_uri","keySet","Array","isArray","WebStorageStateStore","store","localStorage","_store","_prefix","set","remove","getAllKeys","len","indexOf","substr","DefaultResponseType","DefaultScope","DefaultClientAuthentication","DefaultResponseMode","DefaultStaleStateAgeInSeconds","DefaultClockSkewInSeconds","OidcClientSettingsStore","authority","response_type","scope","redirect_uri","post_logout_redirect_uri","client_authentication","prompt","display","max_age","ui_locales","acr_values","resource","response_mode","filterProtocolClaims","loadUserInfo","staleStateAgeInSeconds","clockSkewInSeconds","userInfoJwtIssuer","mergeClaims","disablePKCE","stateStore","refreshTokenCredentials","revokeTokenAdditionalContentTypes","refreshTokenAllowedScope","extraQueryParams","extraTokenParams","endsWith","console","UserInfoService","_metadataService","_getClaimsFromJwt","payload","getClaims","claims","TokenClient","exchangeCode","grant_type","code","append","exchangeCredentials","exchangeRefreshToken","refresh_token","param","revoke","token_type_hint","ResponseValidator","_claimsService","_userInfoService","_tokenClient","validateSigninResponse","_processSigninState","_processCode","isOpenId","_validateIdTokenAttributes","_processClaims","skipUserInfo","validateCredentialsResponse","validateRefreshResponse","id_token","profile","hasIdToken","validateSignoutResponse","id","validateSub","sub","tokenResponse","existingToken","incoming","existing","auth_time","azp","State","created","request_type","toStorageString","fromStorageString","storageString","clearStaleState","storage","age","cutoff","i","SigninState","code_challenge","SigninRequest","state_data","nonce","optionalParams","searchParams","resources","r","OidcScope","SigninResponse","token_type","expires_at","Number","split","SignoutRequest","id_token_hint","SignoutResponse","DefaultProtocolClaims","InternalRequiredProtocolClaims","ClaimsService","result","protocolClaims","claim","claims1","claims2","values","previousValue","OidcClient","settings","metadataService","_validator","createSigninRequest","request","request_uri","login_hint","signinRequest","signinState","readSigninResponseState","removeState","storedStateString","processSigninResponse","processResourceOwnerPasswordCredentials","username","password","signinResponse","useRefreshToken","allowableScopes","providedScopes","s","createSignoutRequest","signoutState","readSignoutResponseState","processSignoutResponse","revokeToken","type","SessionMonitor","_userManager","_start","user","_sub","_sid","sid","_checkSessionIFrame","intervalInSeconds","checkSessionIntervalInSeconds","stopOnError","stopCheckSessionOnError","checkSessionIFrame","_stop","monitorAnonymousSession","timerHandle","session","querySessionStatus","tmpUser","raiseEvent","events","_raiseUserSessionChanged","_raiseUserSignedOut","_raiseUserSignedIn","addUserLoaded","addUserUnloaded","_init","catch","getUser","User","scopes","messageSource","AbstractChildWindow","_abort","_disposeHandlers","Set","_window","navigate","location","keepOpen","reject","listener","scriptOrigin","_dispose","add","removeEventListener","reason","close","dispose","_notifyParent","parent","targetOrigin","DefaultPopupWindowFeatures","toolbar","closePopupWindowAfterInSeconds","DefaultPopupTarget","DefaultAccessTokenExpiringNotificationTimeInSeconds","DefaultCheckSessionIntervalInSeconds","DefaultSilentRequestTimeoutInSeconds","UserManagerSettingsStore","popup_redirect_uri","popup_post_logout_redirect_uri","popupWindowFeatures","popupWindowTarget","redirectMethod","redirectTarget","iframeNotifyParentOrigin","iframeScriptOrigin","silent_redirect_uri","silentRequestTimeoutInSeconds","automaticSilentRenew","validateSubOnSilentRenew","includeIdTokenInSilentRenew","monitorSession","query_status_response_type","revokeTokenTypes","revokeTokensOnSignout","includeIdTokenInSilentSignout","accessTokenExpiringNotificationTimeInSeconds","userStore","sessionStorage","IFrameWindow","_timeoutInSeconds","createHiddenIframe","iframe","timer","parentNode","_a2","frame","target","removeChild","notifyParent","IFrameNavigator","prepare","callback","checkForPopupClosedInterval","second","PopupWindow","centeredPopup","open","closed","focus","popupClosedInterval","notifyOpener","opener","PopupNavigator","RedirectNavigator","targetWindow","self","redirect","bind","promise","UserManagerEvents","_userLoaded","_userUnloaded","_silentRenewError","_userSignedIn","_userSignedOut","_userSessionChanged","removeUserLoaded","removeUserUnloaded","addSilentRenewError","removeSilentRenewError","_raiseSilentRenewError","addUserSignedIn","removeUserSignedIn","addUserSignedOut","removeUserSignedOut","addUserSessionChanged","removeUserSessionChanged","SilentRenewService","_isStarted","_retryTimer","_tokenExpiring","signinSilent","RefreshState","UserManager","redirectNavigator","popupNavigator","iframeNavigator","_client","_redirectNavigator","_popupNavigator","_iframeNavigator","_events","_silentRenewService","startSilentRenew","_sessionMonitor","_loadUser","removeUser","storeUser","signinRedirect","requestArgs","handle","_signinStart","signinRedirectCallback","_signinEnd","signinResourceOwnerCredentials","_buildUser","signinPopup","_signin","signinPopupCallback","_useRefreshToken","verifySub","signinSilentCallback","signinCallback","signoutCallback","signoutRedirectCallback","signoutPopupCallback","signoutSilentCallback","navResponse","signoutRedirect","_signoutStart","_signoutEnd","signoutPopup","_signout","_revokeInternal","signoutRequest","signoutResponse","signoutSilent","revokeTokens","types","typesPresent","stopSilentRenew","_userStoreKey","version","Version"],"sources":["/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/utils/CryptoUtils.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/utils/Logger.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/utils/Event.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/utils/JwtUtils.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/utils/PopupUtils.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/utils/Timer.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/utils/UrlUtils.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/errors/ErrorResponse.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/errors/ErrorTimeout.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/AccessTokenEvents.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/CheckSessionIFrame.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/InMemoryWebStorage.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/JsonService.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/MetadataService.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/WebStorageStateStore.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/OidcClientSettings.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/UserInfoService.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/TokenClient.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/ResponseValidator.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/State.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/SigninState.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/SigninRequest.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/SigninResponse.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/SignoutRequest.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/SignoutResponse.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/ClaimsService.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/OidcClient.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/SessionMonitor.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/User.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/navigators/AbstractChildWindow.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/UserManagerSettings.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/navigators/IFrameWindow.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/navigators/IFrameNavigator.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/navigators/PopupWindow.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/navigators/PopupNavigator.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/navigators/RedirectNavigator.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/UserManagerEvents.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/SilentRenewService.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/RefreshState.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/UserManager.ts","/home/dkamau476/world_stories/node_modules/oidc-client-ts/package.json","/home/dkamau476/world_stories/node_modules/oidc-client-ts/src/Version.ts"],"sourcesContent":["import CryptoJS from \"crypto-js/core.js\";\nimport sha256 from \"crypto-js/sha256.js\";\nimport Base64 from \"crypto-js/enc-base64.js\";\nimport Utf8 from \"crypto-js/enc-utf8.js\";\n\nimport { Logger } from \"./Logger\";\n\nconst UUID_V4_TEMPLATE = \"10000000-1000-4000-8000-100000000000\";\n\n/**\n * @internal\n */\nexport class CryptoUtils {\n    private static _randomWord(): number {\n        return CryptoJS.lib.WordArray.random(1).words[0];\n    }\n\n    /**\n     * Generates RFC4122 version 4 guid\n     */\n    public static generateUUIDv4(): string {\n        const uuid = UUID_V4_TEMPLATE.replace(/[018]/g, c =>\n            (+c ^ CryptoUtils._randomWord() & 15 >> +c / 4).toString(16),\n        );\n        return uuid.replace(/-/g, \"\");\n    }\n\n    /**\n     * PKCE: Generate a code verifier\n     */\n    public static generateCodeVerifier(): string {\n        return CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4();\n    }\n\n    /**\n     * PKCE: Generate a code challenge\n     */\n    public static generateCodeChallenge(code_verifier: string): string {\n        try {\n            const hashed = sha256(code_verifier);\n            return Base64.stringify(hashed).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n        }\n        catch (err) {\n            Logger.error(\"CryptoUtils.generateCodeChallenge\", err);\n            throw err;\n        }\n    }\n\n    /**\n     * Generates a base64-encoded string for a basic auth header\n     */\n    public static generateBasicAuth(client_id: string, client_secret: string): string {\n        const basicAuth = Utf8.parse([client_id, client_secret].join(\":\"));\n        return Base64.stringify(basicAuth);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * Native interface\n *\n * @public\n */\nexport interface ILogger {\n    debug(...args: unknown[]): void;\n    info(...args: unknown[]): void;\n    warn(...args: unknown[]): void;\n    error(...args: unknown[]): void;\n}\n\nconst nopLogger: ILogger = {\n    debug: () => undefined,\n    info: () => undefined,\n    warn: () => undefined,\n    error: () => undefined,\n};\n\nlet level: number;\nlet logger: ILogger;\n\n/**\n * Log levels\n *\n * @public\n */\nexport enum Log {\n    NONE,\n    ERROR,\n    WARN,\n    INFO,\n    DEBUG\n}\n\n/**\n * Log manager\n *\n * @public\n */\nexport namespace Log { // eslint-disable-line @typescript-eslint/no-namespace\n    export function reset(): void {\n        level = Log.INFO;\n        logger = nopLogger;\n    }\n\n    export function setLevel(value: Log): void {\n        if (!(Log.NONE <= value && value <= Log.DEBUG)) {\n            throw new Error(\"Invalid log level\");\n        }\n        level = value;\n    }\n\n    export function setLogger(value: ILogger): void {\n        logger = value;\n    }\n}\n\n/**\n * Internal logger instance\n *\n * @public\n */\nexport class Logger {\n    private _method?: string;\n    public constructor(private _name: string) {}\n\n    /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n    public debug(...args: unknown[]): void {\n        if (level >= Log.DEBUG) {\n            logger.debug(Logger._format(this._name, this._method), ...args);\n        }\n    }\n    public info(...args: unknown[]): void {\n        if (level >= Log.INFO) {\n            logger.info(Logger._format(this._name, this._method), ...args);\n        }\n    }\n    public warn(...args: unknown[]): void {\n        if (level >= Log.WARN) {\n            logger.warn(Logger._format(this._name, this._method), ...args);\n        }\n    }\n    public error(...args: unknown[]): void {\n        if (level >= Log.ERROR) {\n            logger.error(Logger._format(this._name, this._method), ...args);\n        }\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\n\n    public throw(err: Error): never {\n        this.error(err);\n        throw err;\n    }\n\n    public create(method: string): Logger {\n        const methodLogger: Logger = Object.create(this);\n        methodLogger._method = method;\n        methodLogger.debug(\"begin\");\n        return methodLogger;\n    }\n\n    public static createStatic(name: string, staticMethod: string): Logger {\n        const staticLogger = new Logger(`${name}.${staticMethod}`);\n        staticLogger.debug(\"begin\");\n        return staticLogger;\n    }\n\n    private static _format(name: string, method?: string) {\n        const prefix = `[${name}]`;\n        return method ? `${prefix} ${method}:` : prefix;\n    }\n\n    /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n    // helpers for static class methods\n    public static debug(name: string, ...args: unknown[]): void {\n        if (level >= Log.DEBUG) {\n            logger.debug(Logger._format(name), ...args);\n        }\n    }\n    public static info(name: string, ...args: unknown[]): void {\n        if (level >= Log.INFO) {\n            logger.info(Logger._format(name), ...args);\n        }\n    }\n    public static warn(name: string, ...args: unknown[]): void {\n        if (level >= Log.WARN) {\n            logger.warn(Logger._format(name), ...args);\n        }\n    }\n    public static error(name: string, ...args: unknown[]): void {\n        if (level >= Log.ERROR) {\n            logger.error(Logger._format(name), ...args);\n        }\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\n}\n\nLog.reset();\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./Logger\";\n\n/**\n * @internal\n */\nexport type Callback<EventType extends unknown[]> = (...ev: EventType) => (Promise<void> | void);\n\n/**\n * @internal\n */\nexport class Event<EventType extends unknown[]> {\n    protected readonly _logger = new Logger(`Event('${this._name}')`);\n\n    private _callbacks: Array<Callback<EventType>> = [];\n\n    public constructor(protected readonly _name: string) {}\n\n    public addHandler(cb: Callback<EventType>): () => void {\n        this._callbacks.push(cb);\n        return () => this.removeHandler(cb);\n    }\n\n    public removeHandler(cb: Callback<EventType>): void {\n        const idx = this._callbacks.lastIndexOf(cb);\n        if (idx >= 0) {\n            this._callbacks.splice(idx, 1);\n        }\n    }\n\n    public raise(...ev: EventType): void {\n        this._logger.debug(\"raise:\", ...ev);\n        for (const cb of this._callbacks) {\n            void cb(...ev);\n        }\n    }\n}\n","import jwt_decode from \"jwt-decode\";\n\nimport { Logger } from \"./Logger\";\nimport type { JwtClaims } from \"../Claims\";\n\n/**\n * @internal\n */\nexport class JwtUtils {\n    // IMPORTANT: doesn't validate the token\n    public static decode(token: string): JwtClaims {\n        try {\n            return jwt_decode<JwtClaims>(token);\n        }\n        catch (err) {\n            Logger.error(\"JwtUtils.decode\", err);\n            throw err;\n        }\n    }\n}\n","/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/open#window_features\n *\n * @public\n */\nexport interface PopupWindowFeatures {\n    left?: number;\n    top?: number;\n    width?: number;\n    height?: number;\n    menubar?: boolean | string;\n    toolbar?: boolean | string;\n    location?: boolean | string;\n    status?: boolean | string;\n    resizable?: boolean | string;\n    scrollbars?: boolean | string;\n    /** Close popup window after time in seconds, by default it is -1. To enable this feature set value greater than 0 */\n    closePopupWindowAfterInSeconds?: number;\n\n    [k: string]: boolean | string | number | undefined;\n}\n\nexport class PopupUtils {\n    /**\n     * Populates a map of window features with a placement centered in front of\n     * the current window. If no explicit width is given, a default value is\n     * binned into [800, 720, 600, 480, 360] based on the current window's width.\n     */\n    static center({ ...features }: PopupWindowFeatures): PopupWindowFeatures {\n        if (features.width == null)\n            features.width = [800, 720, 600, 480].find(width => width <= window.outerWidth / 1.618) ?? 360;\n        features.left ??= Math.max(0, Math.round(window.screenX + (window.outerWidth - features.width) / 2));\n        if (features.height != null)\n            features.top ??= Math.max(0, Math.round(window.screenY + (window.outerHeight - features.height) / 2));\n        return features;\n    }\n\n    static serialize(features: PopupWindowFeatures): string {\n        return Object.entries(features)\n            .filter(([, value]) => value != null)\n            .map(([key, value]) => `${key}=${typeof value !== \"boolean\" ? value as string : value ? \"yes\" : \"no\"}`)\n            .join(\",\");\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Event } from \"./Event\";\nimport { Logger } from \"./Logger\";\n\n/**\n * @internal\n */\nexport class Timer extends Event<[void]> {\n    protected readonly _logger = new Logger(`Timer('${this._name}')`);\n    private _timerHandle: ReturnType<typeof setInterval> | null = null;\n    private _expiration = 0;\n\n    // get the time\n    public static getEpochTime(): number {\n        return Math.floor(Date.now() / 1000);\n    }\n\n    public init(durationInSeconds: number): void {\n        const logger = this._logger.create(\"init\");\n        durationInSeconds = Math.max(Math.floor(durationInSeconds), 1);\n        const expiration = Timer.getEpochTime() + durationInSeconds;\n        if (this.expiration === expiration && this._timerHandle) {\n            // no need to reinitialize to same expiration, so bail out\n            logger.debug(\"skipping since already initialized for expiration at\", this.expiration);\n            return;\n        }\n\n        this.cancel();\n\n        logger.debug(\"using duration\", durationInSeconds);\n        this._expiration = expiration;\n\n        // we're using a fairly short timer and then checking the expiration in the\n        // callback to handle scenarios where the browser device sleeps, and then\n        // the timers end up getting delayed.\n        const timerDurationInSeconds = Math.min(durationInSeconds, 5);\n        this._timerHandle = setInterval(this._callback, timerDurationInSeconds * 1000);\n    }\n\n    public get expiration(): number {\n        return this._expiration;\n    }\n\n    public cancel(): void {\n        this._logger.create(\"cancel\");\n        if (this._timerHandle) {\n            clearInterval(this._timerHandle);\n            this._timerHandle = null;\n        }\n    }\n\n    protected _callback = (): void => {\n        const diff = this._expiration - Timer.getEpochTime();\n        this._logger.debug(\"timer completes in\", diff);\n\n        if (this._expiration <= Timer.getEpochTime()) {\n            this.cancel();\n            super.raise();\n        }\n    };\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * @internal\n */\nexport class UrlUtils {\n    public static readParams(url: string, responseMode: \"query\" | \"fragment\" = \"query\"): URLSearchParams {\n        if (!url) throw new TypeError(\"Invalid URL\");\n        // the base URL is irrelevant, it's just here to support relative url arguments\n        const parsedUrl = new URL(url, \"http://127.0.0.1\");\n        const params = parsedUrl[responseMode === \"fragment\" ? \"hash\" : \"search\"];\n        return new URLSearchParams(params.slice(1));\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\n\n/**\n * Error class thrown in case of an authentication error.\n *\n * See https://openid.net/specs/openid-connect-core-1_0.html#AuthError\n *\n * @public\n */\nexport class ErrorResponse extends Error {\n    /** Marker to detect class: \"ErrorResponse\" */\n    public readonly name: string = \"ErrorResponse\";\n\n    /** An error code string that can be used to classify the types of errors that occur and to respond to errors. */\n    public readonly error: string | null;\n    /** additional information that can help a developer identify the cause of the error.*/\n    public readonly error_description: string | null;\n    /**\n     * URI identifying a human-readable web page with information about the error, used to provide the client\n       developer with additional information about the error.\n    */\n    public readonly error_uri: string | null;\n\n    /** custom state data set during the initial signin request */\n    public state?: unknown;\n\n    public readonly session_state: string | null;\n\n    public constructor(\n        args: {\n            error?: string | null; error_description?: string | null; error_uri?: string | null;\n            userState?: unknown; session_state?: string | null;\n        },\n        /** The x-www-form-urlencoded request body sent to the authority server */\n        public readonly form?: URLSearchParams,\n    ) {\n        super(args.error_description || args.error || \"\");\n\n        if (!args.error) {\n            Logger.error(\"ErrorResponse\", \"No error passed\");\n            throw new Error(\"No error passed\");\n        }\n\n        this.error = args.error;\n        this.error_description = args.error_description ?? null;\n        this.error_uri = args.error_uri ?? null;\n\n        this.state = args.userState;\n        this.session_state = args.session_state ?? null;\n    }\n}\n","// Copyright (C) 2021 AuthTS Contributors\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * Error class thrown in case of network timeouts (e.g IFrame time out).\n *\n * @public\n */\nexport class ErrorTimeout extends Error {\n    /** Marker to detect class: \"ErrorTimeout\" */\n    public readonly name: string = \"ErrorTimeout\";\n\n    public constructor(message?: string) {\n        super(message);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Timer } from \"./utils\";\nimport type { User } from \"./User\";\n\n/**\n * @public\n */\nexport type AccessTokenCallback = (...ev: unknown[]) => (Promise<void> | void);\n\n/**\n * @public\n */\nexport class AccessTokenEvents {\n    protected readonly _logger = new Logger(\"AccessTokenEvents\");\n\n    private readonly _expiringTimer = new Timer(\"Access token expiring\");\n    private readonly _expiredTimer = new Timer(\"Access token expired\");\n    private readonly _expiringNotificationTimeInSeconds: number;\n\n    public constructor(args: { expiringNotificationTimeInSeconds: number }) {\n        this._expiringNotificationTimeInSeconds = args.expiringNotificationTimeInSeconds;\n    }\n\n    public load(container: User): void {\n        const logger = this._logger.create(\"load\");\n        // only register events if there's an access token and it has an expiration\n        if (container.access_token && container.expires_in !== undefined) {\n            const duration = container.expires_in;\n            logger.debug(\"access token present, remaining duration:\", duration);\n\n            if (duration > 0) {\n                // only register expiring if we still have time\n                let expiring = duration - this._expiringNotificationTimeInSeconds;\n                if (expiring <= 0) {\n                    expiring = 1;\n                }\n\n                logger.debug(\"registering expiring timer, raising in\", expiring, \"seconds\");\n                this._expiringTimer.init(expiring);\n            }\n            else {\n                logger.debug(\"canceling existing expiring timer because we're past expiration.\");\n                this._expiringTimer.cancel();\n            }\n\n            // if it's negative, it will still fire\n            const expired = duration + 1;\n            logger.debug(\"registering expired timer, raising in\", expired, \"seconds\");\n            this._expiredTimer.init(expired);\n        }\n        else {\n            this._expiringTimer.cancel();\n            this._expiredTimer.cancel();\n        }\n    }\n\n    public unload(): void {\n        this._logger.debug(\"unload: canceling existing access token timers\");\n        this._expiringTimer.cancel();\n        this._expiredTimer.cancel();\n    }\n\n    /**\n     * Add callback: Raised prior to the access token expiring.\n     */\n    public addAccessTokenExpiring(cb: AccessTokenCallback): () => void {\n        return this._expiringTimer.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised prior to the access token expiring.\n     */\n    public removeAccessTokenExpiring(cb: AccessTokenCallback): void {\n        this._expiringTimer.removeHandler(cb);\n    }\n\n    /**\n     * Add callback: Raised after the access token has expired.\n     */\n    public addAccessTokenExpired(cb: AccessTokenCallback): () => void {\n        return this._expiredTimer.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised after the access token has expired.\n     */\n    public removeAccessTokenExpired(cb: AccessTokenCallback): void {\n        this._expiredTimer.removeHandler(cb);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\n\n/**\n * @internal\n */\nexport class CheckSessionIFrame {\n    private readonly _logger = new Logger(\"CheckSessionIFrame\");\n    private _frame_origin: string;\n    private _frame: HTMLIFrameElement;\n    private _timer: ReturnType<typeof setInterval> | null = null;\n    private _session_state: string | null = null;\n\n    public constructor(\n        private _callback: () => Promise<void>,\n        private _client_id: string,\n        url: string,\n        private _intervalInSeconds: number,\n        private _stopOnError: boolean,\n    ) {\n        const parsedUrl = new URL(url);\n        this._frame_origin = parsedUrl.origin;\n\n        this._frame = window.document.createElement(\"iframe\");\n\n        // shotgun approach\n        this._frame.style.visibility = \"hidden\";\n        this._frame.style.position = \"fixed\";\n        this._frame.style.left = \"-1000px\";\n        this._frame.style.top = \"0\";\n        this._frame.width = \"0\";\n        this._frame.height = \"0\";\n        this._frame.src = parsedUrl.href;\n    }\n\n    public load(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            this._frame.onload = () => {\n                resolve();\n            };\n\n            window.document.body.appendChild(this._frame);\n            window.addEventListener(\"message\", this._message, false);\n        });\n    }\n\n    private _message = (e: MessageEvent<string>): void => {\n        if (e.origin === this._frame_origin &&\n            e.source === this._frame.contentWindow\n        ) {\n            if (e.data === \"error\") {\n                this._logger.error(\"error message from check session op iframe\");\n                if (this._stopOnError) {\n                    this.stop();\n                }\n            }\n            else if (e.data === \"changed\") {\n                this._logger.debug(\"changed message from check session op iframe\");\n                this.stop();\n                void this._callback();\n            }\n            else {\n                this._logger.debug(e.data + \" message from check session op iframe\");\n            }\n        }\n    };\n\n    public start(session_state: string): void {\n        if (this._session_state === session_state) {\n            return;\n        }\n\n        this._logger.create(\"start\");\n\n        this.stop();\n\n        this._session_state = session_state;\n\n        const send = () => {\n            if (!this._frame.contentWindow || !this._session_state) {\n                return;\n            }\n\n            this._frame.contentWindow.postMessage(this._client_id + \" \" + this._session_state, this._frame_origin);\n        };\n\n        // trigger now\n        send();\n\n        // and setup timer\n        this._timer = setInterval(send, this._intervalInSeconds * 1000);\n    }\n\n    public stop(): void {\n        this._logger.create(\"stop\");\n        this._session_state = null;\n\n        if (this._timer) {\n\n            clearInterval(this._timer);\n            this._timer = null;\n        }\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\n\n/**\n * @public\n */\nexport class InMemoryWebStorage implements Storage {\n    private readonly _logger = new Logger(\"InMemoryWebStorage\");\n    private _data: Record<string, string> = {};\n\n    public clear(): void {\n        this._logger.create(\"clear\");\n        this._data = {};\n    }\n\n    public getItem(key: string): string {\n        this._logger.create(`getItem('${key}')`);\n        return this._data[key];\n    }\n\n    public setItem(key: string, value: string): void {\n        this._logger.create(`setItem('${key}')`);\n        this._data[key] = value;\n    }\n\n    public removeItem(key: string): void {\n        this._logger.create(`removeItem('${key}')`);\n        delete this._data[key];\n    }\n\n    public get length(): number {\n        return Object.getOwnPropertyNames(this._data).length;\n    }\n\n    public key(index: number): string {\n        return Object.getOwnPropertyNames(this._data)[index];\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { ErrorResponse, ErrorTimeout } from \"./errors\";\nimport type { ExtraHeader } from \"./OidcClientSettings\";\nimport { Logger } from \"./utils\";\n\n/**\n * @internal\n */\nexport type JwtHandler = (text: string) => Promise<Record<string, unknown>>;\n\n/**\n * @internal\n */\nexport interface GetJsonOpts {\n    token?: string;\n    credentials?: RequestCredentials;\n}\n\n/**\n * @internal\n */\nexport interface PostFormOpts {\n    body: URLSearchParams;\n    basicAuth?: string;\n    timeoutInSeconds?: number;\n    initCredentials?: \"same-origin\" | \"include\" | \"omit\";\n}\n\n/**\n * @internal\n */\nexport class JsonService {\n    private readonly _logger = new Logger(\"JsonService\");\n\n    private _contentTypes: string[] = [];\n\n    public constructor(\n        additionalContentTypes: string[] = [],\n        private _jwtHandler: JwtHandler | null = null,\n        private _extraHeaders: Record<string, ExtraHeader> = {},\n    ) {\n        this._contentTypes.push(...additionalContentTypes, \"application/json\");\n        if (_jwtHandler) {\n            this._contentTypes.push(\"application/jwt\");\n        }\n    }\n\n    protected async fetchWithTimeout(input: RequestInfo, init: RequestInit & { timeoutInSeconds?: number } = {}) {\n        const { timeoutInSeconds, ...initFetch } = init;\n        if (!timeoutInSeconds) {\n            return await fetch(input, initFetch);\n        }\n\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), timeoutInSeconds * 1000);\n\n        try {\n            const response = await fetch(input, {\n                ...init,\n                signal: controller.signal,\n            });\n            return response;\n        }\n        catch (err) {\n            if (err instanceof DOMException && err.name === \"AbortError\") {\n                throw new ErrorTimeout(\"Network timed out\");\n            }\n            throw err;\n        }\n        finally {\n            clearTimeout(timeoutId);\n        }\n    }\n\n    public async getJson(url: string, {\n        token,\n        credentials,\n    }: GetJsonOpts = {}): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"getJson\");\n        const headers: HeadersInit = {\n            \"Accept\": this._contentTypes.join(\", \"),\n        };\n        if (token) {\n            logger.debug(\"token passed, setting Authorization header\");\n            headers[\"Authorization\"] = \"Bearer \" + token;\n        }\n\n        this.appendExtraHeaders(headers);\n\n        let response: Response;\n        try {\n            logger.debug(\"url:\", url);\n            response = await this.fetchWithTimeout(url, { method: \"GET\", headers, credentials });\n        }\n        catch (err) {\n            logger.error(\"Network Error\");\n            throw err;\n        }\n\n        logger.debug(\"HTTP response received, status\", response.status);\n        const contentType = response.headers.get(\"Content-Type\");\n        if (contentType && !this._contentTypes.find(item => contentType.startsWith(item))) {\n            logger.throw(new Error(`Invalid response Content-Type: ${(contentType ?? \"undefined\")}, from URL: ${url}`));\n        }\n        if (response.ok && this._jwtHandler && contentType?.startsWith(\"application/jwt\")) {\n            return await this._jwtHandler(await response.text());\n        }\n        let json: Record<string, unknown>;\n        try {\n            json = await response.json();\n        }\n        catch (err) {\n            logger.error(\"Error parsing JSON response\", err);\n            if (response.ok) throw err;\n            throw new Error(`${response.statusText} (${response.status})`);\n        }\n        if (!response.ok) {\n            logger.error(\"Error from server:\", json);\n            if (json.error) {\n                throw new ErrorResponse(json);\n            }\n            throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\n        }\n        return json;\n    }\n\n    public async postForm(url: string, {\n        body,\n        basicAuth,\n        timeoutInSeconds,\n        initCredentials,\n    }: PostFormOpts): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"postForm\");\n        const headers: HeadersInit = {\n            \"Accept\": this._contentTypes.join(\", \"),\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        };\n        if (basicAuth !== undefined) {\n            headers[\"Authorization\"] = \"Basic \" + basicAuth;\n        }\n\n        this.appendExtraHeaders(headers);\n\n        let response: Response;\n        try {\n            logger.debug(\"url:\", url);\n            response = await this.fetchWithTimeout(url, { method: \"POST\", headers, body, timeoutInSeconds, credentials: initCredentials });\n        }\n        catch (err) {\n            logger.error(\"Network error\");\n            throw err;\n        }\n\n        logger.debug(\"HTTP response received, status\", response.status);\n        const contentType = response.headers.get(\"Content-Type\");\n        if (contentType && !this._contentTypes.find(item => contentType.startsWith(item))) {\n            throw new Error(`Invalid response Content-Type: ${(contentType ?? \"undefined\")}, from URL: ${url}`);\n        }\n\n        const responseText = await response.text();\n\n        let json: Record<string, unknown> = {};\n        if (responseText) {\n            try {\n                json = JSON.parse(responseText);\n            }\n            catch (err) {\n                logger.error(\"Error parsing JSON response\", err);\n                if (response.ok) throw err;\n                throw new Error(`${response.statusText} (${response.status})`);\n            }\n        }\n\n        if (!response.ok) {\n            logger.error(\"Error from server:\", json);\n            if (json.error) {\n                throw new ErrorResponse(json, body);\n            }\n            throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\n        }\n\n        return json;\n    }\n\n    private appendExtraHeaders(\n        headers: Record<string, string>,\n    ): void {\n        const logger = this._logger.create(\"appendExtraHeaders\");\n        const customKeys = Object.keys(this._extraHeaders);\n        const protectedHeaders = [\n            \"authorization\",\n            \"accept\",\n            \"content-type\",\n        ];\n        if (customKeys.length === 0) {\n            return;\n        }\n        customKeys.forEach((headerName) => {\n            if (protectedHeaders.includes(headerName.toLocaleLowerCase())) {\n                logger.warn(\"Protected header could not be overridden\", headerName, protectedHeaders);\n                return;\n            }\n            const content = (typeof this._extraHeaders[headerName] === \"function\") ?\n                (this._extraHeaders[headerName] as ()=>string)() :\n                this._extraHeaders[headerName];\n            if (content && content !== \"\") {\n                headers[headerName] = content as string;\n            }\n        });\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { JsonService } from \"./JsonService\";\nimport type { OidcClientSettingsStore, SigningKey } from \"./OidcClientSettings\";\nimport type { OidcMetadata } from \"./OidcMetadata\";\n\n/**\n * @public\n * @see https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\n */\nexport class MetadataService {\n    private readonly _logger = new Logger(\"MetadataService\");\n    private readonly _jsonService;\n\n    // cache\n    private _metadataUrl: string;\n    private _signingKeys: SigningKey[] | null = null;\n    private _metadata: Partial<OidcMetadata> | null = null;\n    private _fetchRequestCredentials: RequestCredentials | undefined;\n\n    public constructor(private readonly _settings: OidcClientSettingsStore) {\n        this._metadataUrl = this._settings.metadataUrl;\n        this._jsonService = new JsonService(\n            [\"application/jwk-set+json\"],\n            null,\n            this._settings.extraHeaders,\n        );\n        if (this._settings.signingKeys) {\n            this._logger.debug(\"using signingKeys from settings\");\n            this._signingKeys = this._settings.signingKeys;\n        }\n\n        if (this._settings.metadata) {\n            this._logger.debug(\"using metadata from settings\");\n            this._metadata = this._settings.metadata;\n        }\n\n        if (this._settings.fetchRequestCredentials) {\n            this._logger.debug(\"using fetchRequestCredentials from settings\");\n            this._fetchRequestCredentials = this._settings.fetchRequestCredentials;\n        }\n    }\n\n    public resetSigningKeys(): void {\n        this._signingKeys = null;\n    }\n\n    public async getMetadata(): Promise<Partial<OidcMetadata>> {\n        const logger = this._logger.create(\"getMetadata\");\n        if (this._metadata) {\n            logger.debug(\"using cached values\");\n            return this._metadata;\n        }\n\n        if (!this._metadataUrl) {\n            logger.throw(new Error(\"No authority or metadataUrl configured on settings\"));\n            throw null;\n        }\n\n        logger.debug(\"getting metadata from\", this._metadataUrl);\n        const metadata = await this._jsonService.getJson(this._metadataUrl, { credentials: this._fetchRequestCredentials });\n\n        logger.debug(\"merging remote JSON with seed metadata\");\n        this._metadata = Object.assign({}, this._settings.metadataSeed, metadata);\n        return this._metadata;\n    }\n\n    public getIssuer(): Promise<string> {\n        return this._getMetadataProperty(\"issuer\") as Promise<string>;\n    }\n\n    public getAuthorizationEndpoint(): Promise<string> {\n        return this._getMetadataProperty(\"authorization_endpoint\") as Promise<string>;\n    }\n\n    public getUserInfoEndpoint(): Promise<string> {\n        return this._getMetadataProperty(\"userinfo_endpoint\") as Promise<string>;\n    }\n\n    public getTokenEndpoint(optional: false): Promise<string>;\n    public getTokenEndpoint(optional?: true): Promise<string | undefined>;\n    public getTokenEndpoint(optional = true): Promise<string | undefined> {\n        return this._getMetadataProperty(\"token_endpoint\", optional) as Promise<string | undefined>;\n    }\n\n    public getCheckSessionIframe(): Promise<string | undefined> {\n        return this._getMetadataProperty(\"check_session_iframe\", true) as Promise<string | undefined>;\n    }\n\n    public getEndSessionEndpoint(): Promise<string | undefined> {\n        return this._getMetadataProperty(\"end_session_endpoint\", true) as Promise<string | undefined>;\n    }\n\n    public getRevocationEndpoint(optional: false): Promise<string>;\n    public getRevocationEndpoint(optional?: true): Promise<string | undefined>;\n    public getRevocationEndpoint(optional = true): Promise<string | undefined> {\n        return this._getMetadataProperty(\"revocation_endpoint\", optional) as Promise<string | undefined>;\n    }\n\n    public getKeysEndpoint(optional: false): Promise<string>;\n    public getKeysEndpoint(optional?: true): Promise<string | undefined>;\n    public getKeysEndpoint(optional = true): Promise<string | undefined> {\n        return this._getMetadataProperty(\"jwks_uri\", optional) as Promise<string | undefined>;\n    }\n\n    protected async _getMetadataProperty(name: keyof OidcMetadata, optional=false): Promise<string | boolean | string[] | undefined> {\n        const logger = this._logger.create(`_getMetadataProperty('${name}')`);\n\n        const metadata = await this.getMetadata();\n        logger.debug(\"resolved\");\n\n        if (metadata[name] === undefined) {\n            if (optional === true) {\n                logger.warn(\"Metadata does not contain optional property\");\n                return undefined;\n            }\n\n            logger.throw(new Error(\"Metadata does not contain property \" + name));\n        }\n\n        return metadata[name];\n    }\n\n    public async getSigningKeys(): Promise<SigningKey[] | null> {\n        const logger = this._logger.create(\"getSigningKeys\");\n        if (this._signingKeys) {\n            logger.debug(\"returning signingKeys from cache\");\n            return this._signingKeys;\n        }\n\n        const jwks_uri = await this.getKeysEndpoint(false);\n        logger.debug(\"got jwks_uri\", jwks_uri);\n\n        const keySet = await this._jsonService.getJson(jwks_uri);\n        logger.debug(\"got key set\", keySet);\n\n        if (!Array.isArray(keySet.keys)) {\n            logger.throw(new Error(\"Missing keys on keyset\"));\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        this._signingKeys = keySet.keys;\n        return this._signingKeys;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport type { StateStore } from \"./StateStore\";\nimport type { AsyncStorage } from \"./AsyncStorage\";\n\n/**\n * @public\n */\nexport class WebStorageStateStore implements StateStore {\n    private readonly _logger = new Logger(\"WebStorageStateStore\");\n\n    private readonly _store: AsyncStorage | Storage;\n    private readonly _prefix: string;\n\n    public constructor({\n        prefix = \"oidc.\",\n        store = localStorage,\n    }: { prefix?: string; store?: AsyncStorage | Storage } = {}) {\n        this._store = store;\n        this._prefix = prefix;\n    }\n\n    public async set(key: string, value: string): Promise<void> {\n        this._logger.create(`set('${key}')`);\n\n        key = this._prefix + key;\n        await this._store.setItem(key, value);\n    }\n\n    public async get(key: string): Promise<string | null> {\n        this._logger.create(`get('${key}')`);\n\n        key = this._prefix + key;\n        const item = await this._store.getItem(key);\n        return item;\n    }\n\n    public async remove(key: string): Promise<string | null> {\n        this._logger.create(`remove('${key}')`);\n\n        key = this._prefix + key;\n        const item = await this._store.getItem(key);\n        await this._store.removeItem(key);\n        return item;\n    }\n\n    public async getAllKeys(): Promise<string[]> {\n        this._logger.create(\"getAllKeys\");\n        const len = await this._store.length;\n\n        const keys = [];\n        for (let index = 0; index < len; index++) {\n            const key = await this._store.key(index);\n            if (key && key.indexOf(this._prefix) === 0) {\n                keys.push(key.substr(this._prefix.length));\n            }\n        }\n        return keys;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { WebStorageStateStore } from \"./WebStorageStateStore\";\nimport type { OidcMetadata } from \"./OidcMetadata\";\nimport type { StateStore } from \"./StateStore\";\nimport { InMemoryWebStorage } from \"./InMemoryWebStorage\";\n\nconst DefaultResponseType = \"code\";\nconst DefaultScope = \"openid\";\nconst DefaultClientAuthentication = \"client_secret_post\";\nconst DefaultResponseMode = \"query\";\nconst DefaultStaleStateAgeInSeconds = 60 * 15;\nconst DefaultClockSkewInSeconds = 60 * 5;\n\n/**\n * @public\n */\nexport type SigningKey = Record<string, string | string[]>;\n\n/**\n * @public\n */\nexport type ExtraHeader = string | (() => string);\n\n/**\n * The settings used to configure the {@link OidcClient}.\n *\n * @public\n */\nexport interface OidcClientSettings {\n    /** The URL of the OIDC/OAuth2 provider */\n    authority: string;\n    metadataUrl?: string;\n    /** Provide metadata when authority server does not allow CORS on the metadata endpoint */\n    metadata?: Partial<OidcMetadata>;\n    /** Can be used to seed or add additional values to the results of the discovery request */\n    metadataSeed?: Partial<OidcMetadata>;\n    /** Provide signingKeys when authority server does not allow CORS on the jwks uri */\n    signingKeys?: SigningKey[];\n\n    /** Your client application's identifier as registered with the OIDC/OAuth2 */\n    client_id: string;\n    client_secret?: string;\n    /** The type of response desired from the OIDC/OAuth2 provider (default: \"code\") */\n    response_type?: string;\n    /** The scope being requested from the OIDC/OAuth2 provider (default: \"openid\") */\n    scope?: string;\n    /** The redirect URI of your client application to receive a response from the OIDC/OAuth2 provider */\n    redirect_uri: string;\n    /** The OIDC/OAuth2 post-logout redirect URI */\n    post_logout_redirect_uri?: string;\n\n    /**\n     * Client authentication method that is used to authenticate when using the token endpoint (default: \"client_secret_post\")\n     * - \"client_secret_basic\": using the HTTP Basic authentication scheme\n     * - \"client_secret_post\": including the client credentials in the request body\n     *\n     * See https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\n     */\n    client_authentication?: \"client_secret_basic\" | \"client_secret_post\";\n\n    /** optional protocol param */\n    prompt?: string;\n    /** optional protocol param */\n    display?: string;\n    /** optional protocol param */\n    max_age?: number;\n    /** optional protocol param */\n    ui_locales?: string;\n    /** optional protocol param */\n    acr_values?: string;\n    /** optional protocol param */\n    resource?: string | string[];\n\n    /** optional protocol param (default: \"query\") */\n    response_mode?: \"query\" | \"fragment\";\n\n    /**\n     * Should optional OIDC protocol claims be removed from profile or specify the ones to be removed (default: true)\n     * When true, the following claims are removed by default: [\"nbf\", \"jti\", \"auth_time\", \"nonce\", \"acr\", \"amr\", \"azp\", \"at_hash\"]\n     * When specifying claims, the following claims are not allowed: [\"sub\", \"iss\", \"aud\", \"exp\", \"iat\"]\n    */\n    filterProtocolClaims?: boolean | string[];\n    /** Flag to control if additional identity data is loaded from the user info endpoint in order to populate the user's profile (default: false) */\n    loadUserInfo?: boolean;\n    /** Number (in seconds) indicating the age of state entries in storage for authorize requests that are considered abandoned and thus can be cleaned up (default: 900) */\n    staleStateAgeInSeconds?: number;\n\n    /** @deprecated Unused */\n    clockSkewInSeconds?: number;\n    /** @deprecated Unused */\n    userInfoJwtIssuer?: /*\"ANY\" | \"OP\" |*/ string;\n\n    /**\n     * Indicates if objects returned from the user info endpoint as claims (e.g. `address`) are merged into the claims from the id token as a single object.\n     * Otherwise, they are added to an array as distinct objects for the claim type. (default: false)\n     */\n    mergeClaims?: boolean;\n\n    /**\n     * Storage object used to persist interaction state (default: window.localStorage, InMemoryWebStorage iff no window).\n     * E.g. `stateStore: new WebStorageStateStore({ store: window.localStorage })`\n     */\n    stateStore?: StateStore;\n\n    /**\n     * An object containing additional query string parameters to be including in the authorization request.\n     * E.g, when using Azure AD to obtain an access token an additional resource parameter is required. extraQueryParams: `{resource:\"some_identifier\"}`\n     */\n    extraQueryParams?: Record<string, string | number | boolean>;\n\n    extraTokenParams?: Record<string, unknown>;\n\n    /**\n     * An object containing additional header to be including in request.\n     */\n    extraHeaders?: Record<string, ExtraHeader>;\n\n    /**\n     * @deprecated since version 2.1.0. Use fetchRequestCredentials instead.\n     */\n    refreshTokenCredentials?: \"same-origin\" | \"include\" | \"omit\";\n\n    /**\n     * Will check the content type header of the response of the revocation endpoint to match these passed values (default: [])\n     */\n    revokeTokenAdditionalContentTypes?: string[];\n    /**\n     * Will disable pkce validation, changing to true will not append to sign in request code_challenge and code_challenge_method. (default: false)\n     */\n    disablePKCE?: boolean;\n    /**\n     * Sets the credentials for fetch requests. (default: \"same-origin\")\n     * Use this if you need to send cookies to the OIDC/OAuth2 provider or if you are using a proxy that requires cookies\n     */\n    fetchRequestCredentials?: RequestCredentials;\n\n    /**\n     * Only scopes in this list will be passed in the token refresh request.\n     */\n    refreshTokenAllowedScope?: string | undefined;\n}\n\n/**\n * The settings with defaults applied of the {@link OidcClient}.\n * @see {@link OidcClientSettings}\n *\n * @public\n */\nexport class OidcClientSettingsStore {\n    // metadata\n    public readonly authority: string;\n    public readonly metadataUrl: string;\n    public readonly metadata: Partial<OidcMetadata> | undefined;\n    public readonly metadataSeed: Partial<OidcMetadata> | undefined;\n    public readonly signingKeys: SigningKey[] | undefined;\n\n    // client config\n    public readonly client_id: string;\n    public readonly client_secret: string | undefined;\n    public readonly response_type: string;\n    public readonly scope: string;\n    public readonly redirect_uri: string;\n    public readonly post_logout_redirect_uri: string | undefined;\n    public readonly client_authentication: \"client_secret_basic\" | \"client_secret_post\";\n\n    // optional protocol params\n    public readonly prompt: string | undefined;\n    public readonly display: string | undefined;\n    public readonly max_age: number | undefined;\n    public readonly ui_locales: string | undefined;\n    public readonly acr_values: string | undefined;\n    public readonly resource: string | string[] | undefined;\n    public readonly response_mode: \"query\" | \"fragment\";\n\n    // behavior flags\n    public readonly filterProtocolClaims: boolean | string[];\n    public readonly loadUserInfo: boolean;\n    public readonly staleStateAgeInSeconds: number;\n    public readonly clockSkewInSeconds: number;\n    public readonly userInfoJwtIssuer: /*\"ANY\" | \"OP\" |*/ string;\n    public readonly mergeClaims: boolean;\n\n    public readonly stateStore: StateStore;\n\n    // extra\n    public readonly extraQueryParams: Record<string, string | number | boolean>;\n    public readonly extraTokenParams: Record<string, unknown>;\n    public readonly extraHeaders: Record<string, ExtraHeader>;\n\n    public readonly revokeTokenAdditionalContentTypes?: string[];\n    public readonly fetchRequestCredentials: RequestCredentials;\n    public readonly refreshTokenAllowedScope: string | undefined;\n    public readonly disablePKCE: boolean;\n\n    public constructor({\n        // metadata related\n        authority, metadataUrl, metadata, signingKeys, metadataSeed,\n        // client related\n        client_id, client_secret, response_type = DefaultResponseType, scope = DefaultScope,\n        redirect_uri, post_logout_redirect_uri,\n        client_authentication = DefaultClientAuthentication,\n        // optional protocol\n        prompt, display, max_age, ui_locales, acr_values, resource, response_mode = DefaultResponseMode,\n        // behavior flags\n        filterProtocolClaims = true,\n        loadUserInfo = false,\n        staleStateAgeInSeconds = DefaultStaleStateAgeInSeconds,\n        clockSkewInSeconds = DefaultClockSkewInSeconds,\n        userInfoJwtIssuer = \"OP\",\n        mergeClaims = false,\n        disablePKCE = false,\n        // other behavior\n        stateStore,\n        refreshTokenCredentials,\n        revokeTokenAdditionalContentTypes,\n        fetchRequestCredentials,\n        refreshTokenAllowedScope,\n        // extra\n        extraQueryParams = {},\n        extraTokenParams = {},\n        extraHeaders = {},\n    }: OidcClientSettings) {\n\n        this.authority = authority;\n\n        if (metadataUrl) {\n            this.metadataUrl = metadataUrl;\n        } else {\n            this.metadataUrl = authority;\n            if (authority) {\n                if (!this.metadataUrl.endsWith(\"/\")) {\n                    this.metadataUrl += \"/\";\n                }\n                this.metadataUrl += \".well-known/openid-configuration\";\n            }\n        }\n\n        this.metadata = metadata;\n        this.metadataSeed = metadataSeed;\n        this.signingKeys = signingKeys;\n\n        this.client_id = client_id;\n        this.client_secret = client_secret;\n        this.response_type = response_type;\n        this.scope = scope;\n        this.redirect_uri = redirect_uri;\n        this.post_logout_redirect_uri = post_logout_redirect_uri;\n        this.client_authentication = client_authentication;\n\n        this.prompt = prompt;\n        this.display = display;\n        this.max_age = max_age;\n        this.ui_locales = ui_locales;\n        this.acr_values = acr_values;\n        this.resource = resource;\n        this.response_mode = response_mode;\n\n        this.filterProtocolClaims = filterProtocolClaims ?? true;\n        this.loadUserInfo = !!loadUserInfo;\n        this.staleStateAgeInSeconds = staleStateAgeInSeconds;\n        this.clockSkewInSeconds = clockSkewInSeconds;\n        this.userInfoJwtIssuer = userInfoJwtIssuer;\n        this.mergeClaims = !!mergeClaims;\n        this.disablePKCE = !!disablePKCE;\n        this.revokeTokenAdditionalContentTypes = revokeTokenAdditionalContentTypes;\n\n        if (fetchRequestCredentials && refreshTokenCredentials) {\n            console.warn(\"Both fetchRequestCredentials and refreshTokenCredentials is set. Only fetchRequestCredentials will be used.\");\n        }\n        this.fetchRequestCredentials = fetchRequestCredentials ? fetchRequestCredentials\n            : refreshTokenCredentials ? refreshTokenCredentials : \"same-origin\";\n\n        if (stateStore) {\n            this.stateStore = stateStore;\n        }\n        else {\n            const store = typeof window !== \"undefined\" ? window.localStorage : new InMemoryWebStorage();\n            this.stateStore = new WebStorageStateStore({ store });\n        }\n\n        this.refreshTokenAllowedScope = refreshTokenAllowedScope;\n\n        this.extraQueryParams = extraQueryParams;\n        this.extraTokenParams = extraTokenParams;\n        this.extraHeaders = extraHeaders;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, JwtUtils } from \"./utils\";\nimport { JsonService } from \"./JsonService\";\nimport type { MetadataService } from \"./MetadataService\";\nimport type { JwtClaims } from \"./Claims\";\nimport type { OidcClientSettingsStore } from \"./OidcClientSettings\";\n\n/**\n * @internal\n */\nexport class UserInfoService {\n    protected readonly _logger = new Logger(\"UserInfoService\");\n    private readonly _jsonService: JsonService;\n\n    public constructor(private readonly _settings: OidcClientSettingsStore,\n        private readonly _metadataService: MetadataService,\n    ) {\n        this._jsonService = new JsonService(\n            undefined,\n            this._getClaimsFromJwt,\n            this._settings.extraHeaders,\n        );\n    }\n\n    public async getClaims(token: string): Promise<JwtClaims> {\n        const logger = this._logger.create(\"getClaims\");\n        if (!token) {\n            this._logger.throw(new Error(\"No token passed\"));\n        }\n\n        const url = await this._metadataService.getUserInfoEndpoint();\n        logger.debug(\"got userinfo url\", url);\n\n        const claims = await this._jsonService.getJson(url, {\n            token,\n            credentials: this._settings.fetchRequestCredentials,\n        });\n        logger.debug(\"got claims\", claims);\n\n        return claims;\n    }\n\n    protected _getClaimsFromJwt = async (responseText: string): Promise<JwtClaims> => {\n        const logger = this._logger.create(\"_getClaimsFromJwt\");\n        try {\n            const payload = JwtUtils.decode(responseText);\n            logger.debug(\"JWT decoding successful\");\n\n            return payload;\n        } catch (err) {\n            logger.error(\"Error parsing JWT response\");\n            throw err;\n        }\n    };\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { CryptoUtils, Logger } from \"./utils\";\nimport { JsonService } from \"./JsonService\";\nimport type { MetadataService } from \"./MetadataService\";\nimport type { OidcClientSettingsStore } from \"./OidcClientSettings\";\n\n/**\n * @internal\n */\nexport interface ExchangeCodeArgs {\n    client_id?: string;\n    client_secret?: string;\n    redirect_uri?: string;\n\n    grant_type?: string;\n    code: string;\n    code_verifier?: string;\n}\n\n/**\n * @internal\n */\nexport interface ExchangeCredentialsArgs {\n    client_id?: string;\n    client_secret?: string;\n\n    grant_type?: string;\n    scope?: string;\n\n    username: string;\n    password: string;\n}\n\n/**\n * @internal\n */\nexport interface ExchangeRefreshTokenArgs {\n    client_id?: string;\n    client_secret?: string;\n\n    grant_type?: string;\n    refresh_token: string;\n    scope?: string;\n    resource?: string | string[];\n\n    timeoutInSeconds?: number;\n}\n\n/**\n * @internal\n */\nexport interface RevokeArgs {\n    token: string;\n    token_type_hint?: \"access_token\" | \"refresh_token\";\n}\n\n/**\n * @internal\n */\nexport class TokenClient {\n    private readonly _logger = new Logger(\"TokenClient\");\n    private readonly _jsonService;\n\n    public constructor(\n        private readonly _settings: OidcClientSettingsStore,\n        private readonly _metadataService: MetadataService,\n    ) {\n        this._jsonService = new JsonService(\n            this._settings.revokeTokenAdditionalContentTypes,\n            null,\n            this._settings.extraHeaders,\n        );\n    }\n\n    /**\n     * Exchange code.\n     *\n     * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.1.3\n     */\n    public async exchangeCode({\n        grant_type = \"authorization_code\",\n        redirect_uri = this._settings.redirect_uri,\n        client_id = this._settings.client_id,\n        client_secret = this._settings.client_secret,\n        ...args\n    }: ExchangeCodeArgs): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"exchangeCode\");\n        if (!client_id) {\n            logger.throw(new Error(\"A client_id is required\"));\n        }\n        if (!redirect_uri) {\n            logger.throw(new Error(\"A redirect_uri is required\"));\n        }\n        if (!args.code) {\n            logger.throw(new Error(\"A code is required\"));\n        }\n\n        const params = new URLSearchParams({ grant_type, redirect_uri });\n        for (const [key, value] of Object.entries(args)) {\n            if (value != null) {\n                params.set(key, value);\n            }\n        }\n        let basicAuth: string | undefined;\n        switch (this._settings.client_authentication) {\n            case \"client_secret_basic\":\n                if (!client_secret) {\n                    logger.throw(new Error(\"A client_secret is required\"));\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\n                }\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n                break;\n            case \"client_secret_post\":\n                params.append(\"client_id\", client_id);\n                if (client_secret) {\n                    params.append(\"client_secret\", client_secret);\n                }\n                break;\n        }\n\n        const url = await this._metadataService.getTokenEndpoint(false);\n        logger.debug(\"got token endpoint\");\n\n        const response = await this._jsonService.postForm(url, { body: params, basicAuth, initCredentials: this._settings.fetchRequestCredentials });\n        logger.debug(\"got response\");\n\n        return response;\n    }\n\n    /**\n     * Exchange credentials.\n     *\n     * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.3.2\n     */\n    public async exchangeCredentials({\n        grant_type = \"password\",\n        client_id = this._settings.client_id,\n        client_secret = this._settings.client_secret,\n        scope = this._settings.scope,\n        ...args\n    }: ExchangeCredentialsArgs): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"exchangeCredentials\");\n\n        if (!client_id) {\n            logger.throw(new Error(\"A client_id is required\"));\n        }\n\n        const params = new URLSearchParams({ grant_type, scope });\n        for (const [key, value] of Object.entries(args)) {\n            if (value != null) {\n                params.set(key, value);\n            }\n        }\n\n        let basicAuth: string | undefined;\n        switch (this._settings.client_authentication) {\n            case \"client_secret_basic\":\n                if (!client_secret) {\n                    logger.throw(new Error(\"A client_secret is required\"));\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\n                }\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n                break;\n            case \"client_secret_post\":\n                params.append(\"client_id\", client_id);\n                if (client_secret) {\n                    params.append(\"client_secret\", client_secret);\n                }\n                break;\n        }\n\n        const url = await this._metadataService.getTokenEndpoint(false);\n        logger.debug(\"got token endpoint\");\n\n        const response = await this._jsonService.postForm(url, { body: params, basicAuth, initCredentials: this._settings.fetchRequestCredentials });\n        logger.debug(\"got response\");\n\n        return response;\n    }\n\n    /**\n     * Exchange a refresh token.\n     *\n     * @see https://www.rfc-editor.org/rfc/rfc6749#section-6\n     */\n    public async exchangeRefreshToken({\n        grant_type = \"refresh_token\",\n        client_id = this._settings.client_id,\n        client_secret = this._settings.client_secret,\n        timeoutInSeconds,\n        ...args\n    }: ExchangeRefreshTokenArgs): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"exchangeRefreshToken\");\n        if (!client_id) {\n            logger.throw(new Error(\"A client_id is required\"));\n        }\n        if (!args.refresh_token) {\n            logger.throw(new Error(\"A refresh_token is required\"));\n        }\n\n        const params = new URLSearchParams({ grant_type });\n        for (const [key, value] of Object.entries(args)) {\n            if (Array.isArray(value)) {\n                value.forEach(param => params.append(key, param));\n            }\n            else if (value != null) {\n                params.set(key, value);\n            }\n        }\n        let basicAuth: string | undefined;\n        switch (this._settings.client_authentication) {\n            case \"client_secret_basic\":\n                if (!client_secret) {\n                    logger.throw(new Error(\"A client_secret is required\"));\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\n                }\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n                break;\n            case \"client_secret_post\":\n                params.append(\"client_id\", client_id);\n                if (client_secret) {\n                    params.append(\"client_secret\", client_secret);\n                }\n                break;\n        }\n\n        const url = await this._metadataService.getTokenEndpoint(false);\n        logger.debug(\"got token endpoint\");\n\n        const response = await this._jsonService.postForm(url, { body: params, basicAuth, timeoutInSeconds, initCredentials: this._settings.fetchRequestCredentials });\n        logger.debug(\"got response\");\n\n        return response;\n    }\n\n    /**\n     * Revoke an access or refresh token.\n     *\n     * @see https://datatracker.ietf.org/doc/html/rfc7009#section-2.1\n     */\n    public async revoke(args: RevokeArgs): Promise<void> {\n        const logger = this._logger.create(\"revoke\");\n        if (!args.token) {\n            logger.throw(new Error(\"A token is required\"));\n        }\n\n        const url = await this._metadataService.getRevocationEndpoint(false);\n\n        logger.debug(`got revocation endpoint, revoking ${args.token_type_hint ?? \"default token type\"}`);\n\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(args)) {\n            if (value != null) {\n                params.set(key, value);\n            }\n        }\n        params.set(\"client_id\", this._settings.client_id);\n        if (this._settings.client_secret) {\n            params.set(\"client_secret\", this._settings.client_secret);\n        }\n\n        await this._jsonService.postForm(url, { body: params });\n        logger.debug(\"got response\");\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, JwtUtils } from \"./utils\";\nimport { ErrorResponse } from \"./errors\";\nimport type { MetadataService } from \"./MetadataService\";\nimport { UserInfoService } from \"./UserInfoService\";\nimport { TokenClient } from \"./TokenClient\";\nimport type { OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport type { SigninState } from \"./SigninState\";\nimport type { SigninResponse } from \"./SigninResponse\";\nimport type { State } from \"./State\";\nimport type { SignoutResponse } from \"./SignoutResponse\";\nimport type { UserProfile } from \"./User\";\nimport type { RefreshState } from \"./RefreshState\";\nimport type { IdTokenClaims } from \"./Claims\";\nimport type { ClaimsService } from \"./ClaimsService\";\n\n/**\n * @internal\n */\nexport class ResponseValidator {\n    protected readonly _logger = new Logger(\"ResponseValidator\");\n    protected readonly _userInfoService = new UserInfoService(this._settings, this._metadataService);\n    protected readonly _tokenClient = new TokenClient(this._settings, this._metadataService);\n\n    public constructor(\n        protected readonly _settings: OidcClientSettingsStore,\n        protected readonly _metadataService: MetadataService,\n        protected readonly _claimsService: ClaimsService,\n    ) {}\n\n    public async validateSigninResponse(response: SigninResponse, state: SigninState): Promise<void> {\n        const logger = this._logger.create(\"validateSigninResponse\");\n\n        this._processSigninState(response, state);\n        logger.debug(\"state processed\");\n\n        await this._processCode(response, state);\n        logger.debug(\"code processed\");\n\n        if (response.isOpenId) {\n            this._validateIdTokenAttributes(response);\n        }\n        logger.debug(\"tokens validated\");\n\n        await this._processClaims(response, state?.skipUserInfo, response.isOpenId);\n        logger.debug(\"claims processed\");\n    }\n\n    public async validateCredentialsResponse(response: SigninResponse, skipUserInfo: boolean): Promise<void> {\n        const logger = this._logger.create(\"validateCredentialsResponse\");\n\n        if (response.isOpenId) {\n            this._validateIdTokenAttributes(response);\n        }\n        logger.debug(\"tokens validated\");\n\n        await this._processClaims(response, skipUserInfo, response.isOpenId);\n        logger.debug(\"claims processed\");\n    }\n\n    public async validateRefreshResponse(response: SigninResponse, state: RefreshState): Promise<void> {\n        const logger = this._logger.create(\"validateRefreshResponse\");\n\n        response.userState = state.data;\n        // if there's no session_state on the response, copy over session_state from original request\n        response.session_state ??= state.session_state;\n        // if there's no scope on the response, then assume all scopes granted (per-spec) and copy over scopes from original request\n        response.scope ??= state.scope;\n\n        // OpenID Connect Core 1.0 says that id_token is optional in refresh response:\n        // https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokenResponse\n        if (response.isOpenId && !!response.id_token) {\n            this._validateIdTokenAttributes(response, state.id_token);\n            logger.debug(\"ID Token validated\");\n        }\n\n        if (!response.id_token) {\n            // if there's no id_token on the response, copy over id_token from original request\n            response.id_token = state.id_token;\n            // and decoded part too\n            response.profile = state.profile;\n        }\n\n        const hasIdToken = response.isOpenId && !!response.id_token;\n        await this._processClaims(response, false, hasIdToken);\n        logger.debug(\"claims processed\");\n    }\n\n    public validateSignoutResponse(response: SignoutResponse, state: State): void {\n        const logger = this._logger.create(\"validateSignoutResponse\");\n        if (state.id !== response.state) {\n            logger.throw(new Error(\"State does not match\"));\n        }\n\n        // now that we know the state matches, take the stored data\n        // and set it into the response so callers can get their state\n        // this is important for both success & error outcomes\n        logger.debug(\"state validated\");\n        response.userState = state.data;\n\n        if (response.error) {\n            logger.warn(\"Response was error\", response.error);\n            throw new ErrorResponse(response);\n        }\n    }\n\n    protected _processSigninState(response: SigninResponse, state: SigninState): void {\n        const logger = this._logger.create(\"_processSigninState\");\n        if (state.id !== response.state) {\n            logger.throw(new Error(\"State does not match\"));\n        }\n\n        if (!state.client_id) {\n            logger.throw(new Error(\"No client_id on state\"));\n        }\n\n        if (!state.authority) {\n            logger.throw(new Error(\"No authority on state\"));\n        }\n\n        // ensure we're using the correct authority\n        if (this._settings.authority !== state.authority) {\n            logger.throw(new Error(\"authority mismatch on settings vs. signin state\"));\n        }\n        if (this._settings.client_id && this._settings.client_id !== state.client_id) {\n            logger.throw(new Error(\"client_id mismatch on settings vs. signin state\"));\n        }\n\n        // now that we know the state matches, take the stored data\n        // and set it into the response so callers can get their state\n        // this is important for both success & error outcomes\n        logger.debug(\"state validated\");\n        response.userState = state.data;\n        // if there's no scope on the response, then assume all scopes granted (per-spec) and copy over scopes from original request\n        response.scope ??= state.scope;\n\n        if (response.error) {\n            logger.warn(\"Response was error\", response.error);\n            throw new ErrorResponse(response);\n        }\n\n        if (state.code_verifier && !response.code) {\n            logger.throw(new Error(\"Expected code in response\"));\n        }\n\n    }\n\n    protected async _processClaims(response: SigninResponse, skipUserInfo = false, validateSub = true): Promise<void> {\n        const logger = this._logger.create(\"_processClaims\");\n        response.profile = this._claimsService.filterProtocolClaims(response.profile);\n\n        if (skipUserInfo || !this._settings.loadUserInfo || !response.access_token) {\n            logger.debug(\"not loading user info\");\n            return;\n        }\n\n        logger.debug(\"loading user info\");\n        const claims = await this._userInfoService.getClaims(response.access_token);\n        logger.debug(\"user info claims received from user info endpoint\");\n\n        if (validateSub && claims.sub !== response.profile.sub) {\n            logger.throw(new Error(\"subject from UserInfo response does not match subject in ID Token\"));\n        }\n\n        response.profile = this._claimsService.mergeClaims(response.profile, this._claimsService.filterProtocolClaims(claims as IdTokenClaims));\n        logger.debug(\"user info claims received, updated profile:\", response.profile);\n    }\n\n    protected async _processCode(response: SigninResponse, state: SigninState): Promise<void> {\n        const logger = this._logger.create(\"_processCode\");\n        if (response.code) {\n            logger.debug(\"Validating code\");\n            const tokenResponse = await this._tokenClient.exchangeCode({\n                client_id: state.client_id,\n                client_secret: state.client_secret,\n                code: response.code,\n                redirect_uri: state.redirect_uri,\n                code_verifier: state.code_verifier,\n                ...state.extraTokenParams,\n            });\n            Object.assign(response, tokenResponse);\n        } else {\n            logger.debug(\"No code to process\");\n        }\n    }\n\n    protected _validateIdTokenAttributes(response: SigninResponse, existingToken?: string): void {\n        const logger = this._logger.create(\"_validateIdTokenAttributes\");\n\n        logger.debug(\"decoding ID Token JWT\");\n        const incoming = JwtUtils.decode(response.id_token ?? \"\");\n\n        if (!incoming.sub) {\n            logger.throw(new Error(\"ID Token is missing a subject claim\"));\n        }\n\n        if (existingToken) {\n            const existing = JwtUtils.decode(existingToken);\n            if (incoming.sub !== existing.sub) {\n                logger.throw(new Error(\"sub in id_token does not match current sub\"));\n            }\n            if (incoming.auth_time && incoming.auth_time !== existing.auth_time) {\n                logger.throw(new Error(\"auth_time in id_token does not match original auth_time\"));\n            }\n            if (incoming.azp && incoming.azp !== existing.azp) {\n                logger.throw(new Error(\"azp in id_token does not match original azp\"));\n            }\n            if (!incoming.azp && existing.azp) {\n                logger.throw(new Error(\"azp not in id_token, but present in original id_token\"));\n            }\n        }\n\n        response.profile = incoming as UserProfile;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, CryptoUtils, Timer } from \"./utils\";\nimport type { StateStore } from \"./StateStore\";\n\n/**\n * @public\n */\nexport class State {\n    public readonly id: string;\n    public readonly created: number;\n    public readonly request_type: string | undefined;\n\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    public readonly data?: unknown;\n\n    public constructor(args: {\n        id?: string;\n        data?: unknown;\n        created?: number;\n        request_type?: string;\n    }) {\n        this.id = args.id || CryptoUtils.generateUUIDv4();\n        this.data = args.data;\n\n        if (args.created && args.created > 0) {\n            this.created = args.created;\n        }\n        else {\n            this.created = Timer.getEpochTime();\n        }\n        this.request_type = args.request_type;\n    }\n\n    public toStorageString(): string {\n        new Logger(\"State\").create(\"toStorageString\");\n        return JSON.stringify({\n            id: this.id,\n            data: this.data,\n            created: this.created,\n            request_type: this.request_type,\n        });\n    }\n\n    public static fromStorageString(storageString: string): State {\n        Logger.createStatic(\"State\", \"fromStorageString\");\n        return new State(JSON.parse(storageString));\n    }\n\n    public static async clearStaleState(storage: StateStore, age: number): Promise<void> {\n        const logger = Logger.createStatic(\"State\", \"clearStaleState\");\n        const cutoff = Timer.getEpochTime() - age;\n\n        const keys = await storage.getAllKeys();\n        logger.debug(\"got keys\", keys);\n\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const item = await storage.get(key);\n            let remove = false;\n\n            if (item) {\n                try {\n                    const state = State.fromStorageString(item);\n\n                    logger.debug(\"got item from key:\", key, state.created);\n                    if (state.created <= cutoff) {\n                        remove = true;\n                    }\n                }\n                catch (err) {\n                    logger.error(\"Error parsing state for key:\", key, err);\n                    remove = true;\n                }\n            }\n            else {\n                logger.debug(\"no item in storage for key:\", key);\n                remove = true;\n            }\n\n            if (remove) {\n                logger.debug(\"removed item for key:\", key);\n                void storage.remove(key);\n            }\n        }\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, CryptoUtils } from \"./utils\";\nimport { State } from \"./State\";\n\n/**\n * @public\n */\nexport class SigninState extends State {\n    // isCode\n    /** The same code_verifier that was used to obtain the authorization_code via PKCE. */\n    public readonly code_verifier: string | undefined;\n    /** Used to secure authorization code grants via Proof Key for Code Exchange (PKCE). */\n    public readonly code_challenge: string | undefined;\n\n    // to ensure state still matches settings\n    /** @see {@link OidcClientSettings.authority} */\n    public readonly authority: string;\n    /** @see {@link OidcClientSettings.client_id} */\n    public readonly client_id: string;\n    /** @see {@link OidcClientSettings.redirect_uri} */\n    public readonly redirect_uri: string;\n    /** @see {@link OidcClientSettings.scope} */\n    public readonly scope: string;\n    /** @see {@link OidcClientSettings.client_secret} */\n    public readonly client_secret: string | undefined;\n    /** @see {@link OidcClientSettings.extraTokenParams} */\n    public readonly extraTokenParams: Record<string, unknown> | undefined;\n    /** @see {@link OidcClientSettings.response_mode} */\n    public readonly response_mode: \"query\" | \"fragment\" | undefined;\n\n    public readonly skipUserInfo: boolean | undefined;\n\n    public constructor(args: {\n        id?: string;\n        data?: unknown;\n        created?: number;\n        request_type?: string;\n\n        code_verifier?: string | boolean;\n        authority: string;\n        client_id: string;\n        redirect_uri: string;\n        scope: string;\n        client_secret?: string;\n        extraTokenParams?: Record<string, unknown>;\n        response_mode?: \"query\" | \"fragment\";\n        skipUserInfo?: boolean;\n    }) {\n        super(args);\n\n        if (args.code_verifier === true) {\n            this.code_verifier = CryptoUtils.generateCodeVerifier();\n        }\n        else if (args.code_verifier) {\n            this.code_verifier = args.code_verifier;\n        }\n\n        if (this.code_verifier) {\n            this.code_challenge = CryptoUtils.generateCodeChallenge(this.code_verifier);\n        }\n\n        this.authority = args.authority;\n        this.client_id = args.client_id;\n        this.redirect_uri = args.redirect_uri;\n        this.scope = args.scope;\n        this.client_secret = args.client_secret;\n        this.extraTokenParams = args.extraTokenParams;\n\n        this.response_mode = args.response_mode;\n        this.skipUserInfo = args.skipUserInfo;\n    }\n\n    public toStorageString(): string {\n        new Logger(\"SigninState\").create(\"toStorageString\");\n        return JSON.stringify({\n            id: this.id,\n            data: this.data,\n            created: this.created,\n            request_type: this.request_type,\n\n            code_verifier: this.code_verifier,\n            authority: this.authority,\n            client_id: this.client_id,\n            redirect_uri: this.redirect_uri,\n            scope: this.scope,\n            client_secret: this.client_secret,\n            extraTokenParams : this.extraTokenParams,\n            response_mode: this.response_mode,\n            skipUserInfo: this.skipUserInfo,\n        });\n    }\n\n    public static fromStorageString(storageString: string): SigninState {\n        Logger.createStatic(\"SigninState\", \"fromStorageString\");\n        const data = JSON.parse(storageString);\n        return new SigninState(data);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { SigninState } from \"./SigninState\";\n\n/**\n * @public\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n */\nexport interface SigninRequestArgs {\n    // mandatory\n    url: string;\n    authority: string;\n    client_id: string;\n    redirect_uri: string;\n    response_type: string;\n    scope: string;\n\n    // optional\n    response_mode?: \"query\" | \"fragment\";\n    nonce?: string;\n    display?: string;\n    prompt?: string;\n    max_age?: number;\n    ui_locales?: string;\n    id_token_hint?: string;\n    login_hint?: string;\n    acr_values?: string;\n\n    // other\n    resource?: string | string[];\n    request?: string;\n    request_uri?: string;\n    request_type?: string;\n    extraQueryParams?: Record<string, string | number | boolean>;\n\n    // special\n    extraTokenParams?: Record<string, unknown>;\n    client_secret?: string;\n    skipUserInfo?: boolean;\n    disablePKCE?: boolean;\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    state_data?: unknown;\n}\n\n/**\n * @public\n */\nexport class SigninRequest {\n    private readonly _logger = new Logger(\"SigninRequest\");\n\n    public readonly url: string;\n    public readonly state: SigninState;\n\n    public constructor({\n        // mandatory\n        url, authority, client_id, redirect_uri, response_type, scope,\n        // optional\n        state_data, response_mode, request_type, client_secret, nonce,\n        resource,\n        skipUserInfo,\n        extraQueryParams,\n        extraTokenParams,\n        disablePKCE,\n        ...optionalParams\n    }: SigninRequestArgs) {\n        if (!url) {\n            this._logger.error(\"ctor: No url passed\");\n            throw new Error(\"url\");\n        }\n        if (!client_id) {\n            this._logger.error(\"ctor: No client_id passed\");\n            throw new Error(\"client_id\");\n        }\n        if (!redirect_uri) {\n            this._logger.error(\"ctor: No redirect_uri passed\");\n            throw new Error(\"redirect_uri\");\n        }\n        if (!response_type) {\n            this._logger.error(\"ctor: No response_type passed\");\n            throw new Error(\"response_type\");\n        }\n        if (!scope) {\n            this._logger.error(\"ctor: No scope passed\");\n            throw new Error(\"scope\");\n        }\n        if (!authority) {\n            this._logger.error(\"ctor: No authority passed\");\n            throw new Error(\"authority\");\n        }\n\n        this.state = new SigninState({\n            data: state_data,\n            request_type,\n            code_verifier: !disablePKCE,\n            client_id, authority, redirect_uri,\n            response_mode,\n            client_secret, scope, extraTokenParams,\n            skipUserInfo,\n        });\n\n        const parsedUrl = new URL(url);\n        parsedUrl.searchParams.append(\"client_id\", client_id);\n        parsedUrl.searchParams.append(\"redirect_uri\", redirect_uri);\n        parsedUrl.searchParams.append(\"response_type\", response_type);\n        parsedUrl.searchParams.append(\"scope\", scope);\n        if (nonce) {\n            parsedUrl.searchParams.append(\"nonce\", nonce);\n        }\n\n        parsedUrl.searchParams.append(\"state\", this.state.id);\n        if (this.state.code_challenge) {\n            parsedUrl.searchParams.append(\"code_challenge\", this.state.code_challenge);\n            parsedUrl.searchParams.append(\"code_challenge_method\", \"S256\");\n        }\n\n        if (resource) {\n            // https://datatracker.ietf.org/doc/html/rfc8707\n            const resources = Array.isArray(resource) ? resource : [resource];\n            resources\n                .forEach(r => parsedUrl.searchParams.append(\"resource\", r));\n        }\n\n        for (const [key, value] of Object.entries({ response_mode, ...optionalParams, ...extraQueryParams })) {\n            if (value != null) {\n                parsedUrl.searchParams.append(key, value.toString());\n            }\n        }\n\n        this.url = parsedUrl.href;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Timer } from \"./utils\";\nimport type { UserProfile } from \"./User\";\n\nconst OidcScope = \"openid\";\n\n/**\n * @public\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthResponse\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthError\n */\nexport class SigninResponse {\n    // props present in the initial callback response regardless of success\n    public readonly state: string | null;\n    /** @see {@link User.session_state} */\n    public session_state: string | null;\n\n    // error props\n    /** @see {@link ErrorResponse.error} */\n    public readonly error: string | null;\n    /** @see {@link ErrorResponse.error_description} */\n    public readonly error_description: string | null;\n    /** @see {@link ErrorResponse.error_uri} */\n    public readonly error_uri: string | null;\n\n    // success props\n    public readonly code: string | null;\n\n    // props set after validation\n    /** @see {@link User.id_token} */\n    public id_token?: string;\n    /** @see {@link User.access_token} */\n    public access_token = \"\";\n    /** @see {@link User.token_type} */\n    public token_type = \"\";\n    /** @see {@link User.refresh_token} */\n    public refresh_token?: string;\n    /** @see {@link User.scope} */\n    public scope?: string;\n    /** @see {@link User.expires_at} */\n    public expires_at?: number;\n\n    /** custom state data set during the initial signin request */\n    public userState: unknown;\n\n    /** @see {@link User.profile} */\n    public profile: UserProfile = {} as UserProfile;\n\n    public constructor(params: URLSearchParams) {\n        this.state = params.get(\"state\");\n        this.session_state = params.get(\"session_state\");\n\n        this.error = params.get(\"error\");\n        this.error_description = params.get(\"error_description\");\n        this.error_uri = params.get(\"error_uri\");\n\n        this.code = params.get(\"code\");\n    }\n\n    public get expires_in(): number | undefined {\n        if (this.expires_at === undefined) {\n            return undefined;\n        }\n        return this.expires_at - Timer.getEpochTime();\n    }\n    public set expires_in(value: number | undefined) {\n        // spec expects a number, but normalize here just in case\n        if (typeof value === \"string\") value = Number(value);\n        if (value !== undefined && value >= 0) {\n            this.expires_at = Math.floor(value) + Timer.getEpochTime();\n        }\n    }\n\n    public get isOpenId(): boolean {\n        return this.scope?.split(\" \").includes(OidcScope) || !!this.id_token;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { State } from \"./State\";\n\n/**\n * @public\n * @see https://openid.net/specs/openid-connect-rpinitiated-1_0.html#RPLogout\n */\nexport interface SignoutRequestArgs {\n    // mandatory\n    url: string;\n\n    // optional\n    id_token_hint?: string;\n    client_id?: string;\n    post_logout_redirect_uri?: string;\n    extraQueryParams?: Record<string, string | number | boolean>;\n\n    // special\n    request_type?: string;\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    state_data?: unknown;\n}\n\n/**\n * @public\n */\nexport class SignoutRequest {\n    private readonly _logger = new Logger(\"SignoutRequest\");\n\n    public readonly url: string;\n    public readonly state?: State;\n\n    public constructor({\n        url,\n        state_data, id_token_hint, post_logout_redirect_uri, extraQueryParams, request_type, client_id,\n    }: SignoutRequestArgs) {\n        if (!url) {\n            this._logger.error(\"ctor: No url passed\");\n            throw new Error(\"url\");\n        }\n\n        const parsedUrl = new URL(url);\n        if (id_token_hint) {\n            parsedUrl.searchParams.append(\"id_token_hint\", id_token_hint);\n        }\n        if (client_id) {\n            parsedUrl.searchParams.append(\"client_id\", client_id);\n        }\n\n        if (post_logout_redirect_uri) {\n            parsedUrl.searchParams.append(\"post_logout_redirect_uri\", post_logout_redirect_uri);\n\n            if (state_data) {\n                this.state = new State({ data: state_data, request_type });\n\n                parsedUrl.searchParams.append(\"state\", this.state.id);\n            }\n        }\n\n        for (const [key, value] of Object.entries({ ...extraQueryParams })) {\n            if (value != null) {\n                parsedUrl.searchParams.append(key, value.toString());\n            }\n        }\n\n        this.url = parsedUrl.href;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * @public\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthError\n */\nexport class SignoutResponse {\n    public readonly state: string | null;\n\n    // error props\n    /** @see {@link ErrorResponse.error} */\n    public error: string | null;\n    /** @see {@link ErrorResponse.error_description} */\n    public error_description: string | null;\n    /** @see {@link ErrorResponse.error_uri} */\n    public error_uri: string | null;\n\n    /** custom state data set during the initial signin request */\n    public userState: unknown;\n\n    public constructor(params: URLSearchParams) {\n        this.state = params.get(\"state\");\n\n        this.error = params.get(\"error\");\n        this.error_description = params.get(\"error_description\");\n        this.error_uri = params.get(\"error_uri\");\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport type { JwtClaims } from \"./Claims\";\nimport type { OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport type { UserProfile } from \"./User\";\nimport { Logger } from \"./utils\";\n\n/**\n * Protocol claims that could be removed by default from profile.\n * Derived from the following sets of claims:\n * - {@link https://datatracker.ietf.org/doc/html/rfc7519.html#section-4.1}\n * - {@link https://openid.net/specs/openid-connect-core-1_0.html#IDToken}\n * - {@link https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken}\n *\n * @internal\n */\nconst DefaultProtocolClaims = [\n    \"nbf\",\n    \"jti\",\n    \"auth_time\",\n    \"nonce\",\n    \"acr\",\n    \"amr\",\n    \"azp\",\n    \"at_hash\", // https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken\n] as const;\n\n/**\n * Protocol claims that should never be removed from profile.\n * \"sub\" is needed internally and others should remain required as per the OIDC specs.\n *\n * @internal\n */\nconst InternalRequiredProtocolClaims = [\"sub\", \"iss\", \"aud\", \"exp\", \"iat\"];\n\n/**\n * @internal\n */\nexport class ClaimsService {\n    protected readonly _logger = new Logger(\"ClaimsService\");\n    public constructor(\n        protected readonly _settings: OidcClientSettingsStore,\n    ) {}\n\n    public filterProtocolClaims(claims: UserProfile): UserProfile {\n        const result = { ...claims };\n\n        if (this._settings.filterProtocolClaims) {\n            let protocolClaims;\n            if (Array.isArray(this._settings.filterProtocolClaims)) {\n                protocolClaims = this._settings.filterProtocolClaims;\n            } else {\n                protocolClaims = DefaultProtocolClaims;\n            }\n\n            for (const claim of protocolClaims) {\n                if (!InternalRequiredProtocolClaims.includes(claim)) {\n                    delete result[claim];\n                }\n            }\n        }\n\n        return result;\n    }\n\n    public mergeClaims(claims1: UserProfile, claims2: JwtClaims): UserProfile {\n        const result = { ...claims1 };\n\n        for (const [claim, values] of Object.entries(claims2)) {\n            for (const value of Array.isArray(values) ? values : [values]) {\n                const previousValue = result[claim];\n                if (!previousValue) {\n                    result[claim] = value;\n                }\n                else if (Array.isArray(previousValue)) {\n                    if (!previousValue.includes(value)) {\n                        previousValue.push(value);\n                    }\n                }\n                else if (result[claim] !== value) {\n                    if (typeof value === \"object\" && this._settings.mergeClaims) {\n                        result[claim] = this.mergeClaims(previousValue as UserProfile, value);\n                    }\n                    else {\n                        result[claim] = [previousValue, value];\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, UrlUtils } from \"./utils\";\nimport { ErrorResponse } from \"./errors\";\nimport { type OidcClientSettings, OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport { ResponseValidator } from \"./ResponseValidator\";\nimport { MetadataService } from \"./MetadataService\";\nimport type { RefreshState } from \"./RefreshState\";\nimport { SigninRequest, type SigninRequestArgs } from \"./SigninRequest\";\nimport { SigninResponse } from \"./SigninResponse\";\nimport { SignoutRequest, type SignoutRequestArgs } from \"./SignoutRequest\";\nimport { SignoutResponse } from \"./SignoutResponse\";\nimport { SigninState } from \"./SigninState\";\nimport { State } from \"./State\";\nimport { TokenClient } from \"./TokenClient\";\nimport { ClaimsService } from \"./ClaimsService\";\n\n/**\n * @public\n */\nexport interface CreateSigninRequestArgs\n    extends Omit<SigninRequestArgs, \"url\" | \"authority\" | \"client_id\" | \"redirect_uri\" | \"response_type\" | \"scope\" | \"state_data\"> {\n    redirect_uri?: string;\n    response_type?: string;\n    scope?: string;\n\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    state?: unknown;\n}\n\n/**\n * @public\n */\nexport interface UseRefreshTokenArgs {\n    state: RefreshState;\n    timeoutInSeconds?: number;\n}\n\n/**\n * @public\n */\nexport type CreateSignoutRequestArgs = Omit<SignoutRequestArgs, \"url\" | \"state_data\"> & {\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    state?: unknown;\n};\n\n/**\n * @public\n */\nexport type ProcessResourceOwnerPasswordCredentialsArgs = {\n    username: string;\n    password: string;\n    skipUserInfo?: boolean;\n    extraTokenParams?: Record<string, unknown>;\n};\n\n/**\n * Provides the raw OIDC/OAuth2 protocol support for the authorization endpoint and the end session endpoint in the\n * authorization server. It provides a bare-bones protocol implementation and is used by the UserManager class.\n * Only use this class if you simply want protocol support without the additional management features of the\n * UserManager class.\n *\n * @public\n */\nexport class OidcClient {\n    public readonly settings: OidcClientSettingsStore;\n    protected readonly _logger = new Logger(\"OidcClient\");\n\n    public readonly metadataService: MetadataService;\n    protected readonly _claimsService: ClaimsService;\n    protected readonly _validator: ResponseValidator;\n    protected readonly _tokenClient: TokenClient;\n\n    public constructor(settings: OidcClientSettings);\n    public constructor(settings: OidcClientSettingsStore, metadataService: MetadataService); \n    public constructor(settings: OidcClientSettings | OidcClientSettingsStore, metadataService?: MetadataService) {\n        this.settings = settings instanceof OidcClientSettingsStore ? settings : new OidcClientSettingsStore(settings);\n\n        this.metadataService = metadataService ?? new MetadataService(this.settings);\n        this._claimsService = new ClaimsService(this.settings);\n        this._validator = new ResponseValidator(this.settings, this.metadataService, this._claimsService);\n        this._tokenClient = new TokenClient(this.settings, this.metadataService);\n    }\n\n    public async createSigninRequest({\n        state,\n        request,\n        request_uri,\n        request_type,\n        id_token_hint,\n        login_hint,\n        skipUserInfo,\n        nonce,\n        response_type = this.settings.response_type,\n        scope = this.settings.scope,\n        redirect_uri = this.settings.redirect_uri,\n        prompt = this.settings.prompt,\n        display = this.settings.display,\n        max_age = this.settings.max_age,\n        ui_locales = this.settings.ui_locales,\n        acr_values = this.settings.acr_values,\n        resource = this.settings.resource,\n        response_mode = this.settings.response_mode,\n        extraQueryParams = this.settings.extraQueryParams,\n        extraTokenParams = this.settings.extraTokenParams,\n    }: CreateSigninRequestArgs): Promise<SigninRequest> {\n        const logger = this._logger.create(\"createSigninRequest\");\n\n        if (response_type !== \"code\") {\n            throw new Error(\"Only the Authorization Code flow (with PKCE) is supported\");\n        }\n\n        const url = await this.metadataService.getAuthorizationEndpoint();\n        logger.debug(\"Received authorization endpoint\", url);\n\n        const signinRequest = new SigninRequest({\n            url,\n            authority: this.settings.authority,\n            client_id: this.settings.client_id,\n            redirect_uri,\n            response_type,\n            scope,\n            state_data: state,\n            prompt, display, max_age, ui_locales, id_token_hint, login_hint, acr_values,\n            resource, request, request_uri, extraQueryParams, extraTokenParams, request_type, response_mode,\n            client_secret: this.settings.client_secret,\n            skipUserInfo,\n            nonce,\n            disablePKCE: this.settings.disablePKCE,\n        });\n\n        // house cleaning\n        await this.clearStaleState();\n\n        const signinState = signinRequest.state;\n        await this.settings.stateStore.set(signinState.id, signinState.toStorageString());\n        return signinRequest;\n    }\n\n    public async readSigninResponseState(url: string, removeState = false): Promise<{ state: SigninState; response: SigninResponse }> {\n        const logger = this._logger.create(\"readSigninResponseState\");\n\n        const response = new SigninResponse(UrlUtils.readParams(url, this.settings.response_mode));\n        if (!response.state) {\n            logger.throw(new Error(\"No state in response\"));\n            // need to throw within this function's body for type narrowing to work\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\n        if (!storedStateString) {\n            logger.throw(new Error(\"No matching state found in storage\"));\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        const state = SigninState.fromStorageString(storedStateString);\n        return { state, response };\n    }\n\n    public async processSigninResponse(url: string): Promise<SigninResponse> {\n        const logger = this._logger.create(\"processSigninResponse\");\n\n        const { state, response } = await this.readSigninResponseState(url, true);\n        logger.debug(\"received state from storage; validating response\");\n        await this._validator.validateSigninResponse(response, state);\n        return response;\n    }\n\n    public async processResourceOwnerPasswordCredentials({\n        username,\n        password,\n        skipUserInfo = false,\n        extraTokenParams = {},\n    }: ProcessResourceOwnerPasswordCredentialsArgs): Promise<SigninResponse> {\n        const tokenResponse: Record<string, unknown> = await this._tokenClient.exchangeCredentials({ username, password, ...extraTokenParams });\n        const signinResponse: SigninResponse = new SigninResponse(new URLSearchParams());\n        Object.assign(signinResponse, tokenResponse);\n        await this._validator.validateCredentialsResponse(signinResponse, skipUserInfo);\n        return signinResponse;\n    }\n\n    public async useRefreshToken({\n        state,\n        timeoutInSeconds,\n    }: UseRefreshTokenArgs): Promise<SigninResponse> {\n        const logger = this._logger.create(\"useRefreshToken\");\n\n        // https://github.com/authts/oidc-client-ts/issues/695\n        // In some cases (e.g. AzureAD), not all granted scopes are allowed on token refresh requests.\n        // Therefore, we filter all granted scopes by a list of allowable scopes.\n        let scope;\n        if (this.settings.refreshTokenAllowedScope === undefined) {\n            scope = state.scope;\n        } else {\n            const allowableScopes = this.settings.refreshTokenAllowedScope.split(\" \");\n            const providedScopes = state.scope?.split(\" \") || [];\n\n            scope = providedScopes.filter(s => allowableScopes.includes(s)).join(\" \");\n        }\n\n        const result = await this._tokenClient.exchangeRefreshToken({\n            refresh_token: state.refresh_token,\n            resource: state.resource,\n            // provide the (possible filtered) scope list\n            scope,\n            timeoutInSeconds,\n        });\n        const response = new SigninResponse(new URLSearchParams());\n        Object.assign(response, result);\n        logger.debug(\"validating response\", response);\n        await this._validator.validateRefreshResponse(response, {\n            ...state,\n            // overide the scope in the state handed over to the validator\n            // so it can set the granted scope to the requested scope in case none is included in the response\n            scope,\n        });\n        return response;\n    }\n\n    public async createSignoutRequest({\n        state,\n        id_token_hint,\n        client_id,\n        request_type,\n        post_logout_redirect_uri = this.settings.post_logout_redirect_uri,\n        extraQueryParams = this.settings.extraQueryParams,\n    }: CreateSignoutRequestArgs = {}): Promise<SignoutRequest> {\n        const logger = this._logger.create(\"createSignoutRequest\");\n\n        const url = await this.metadataService.getEndSessionEndpoint();\n        if (!url) {\n            logger.throw(new Error(\"No end session endpoint\"));\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        logger.debug(\"Received end session endpoint\", url);\n\n        // specify the client identifier when post_logout_redirect_uri is used but id_token_hint is not\n        if (!client_id && post_logout_redirect_uri && !id_token_hint) {\n            client_id = this.settings.client_id;\n        }\n\n        const request = new SignoutRequest({\n            url,\n            id_token_hint,\n            client_id,\n            post_logout_redirect_uri,\n            state_data: state,\n            extraQueryParams,\n            request_type,\n        });\n\n        // house cleaning\n        await this.clearStaleState();\n\n        const signoutState = request.state;\n        if (signoutState) {\n            logger.debug(\"Signout request has state to persist\");\n            await this.settings.stateStore.set(signoutState.id, signoutState.toStorageString());\n        }\n\n        return request;\n    }\n\n    public async readSignoutResponseState(url: string, removeState = false): Promise<{ state: State | undefined; response: SignoutResponse }> {\n        const logger = this._logger.create(\"readSignoutResponseState\");\n\n        const response = new SignoutResponse(UrlUtils.readParams(url, this.settings.response_mode));\n        if (!response.state) {\n            logger.debug(\"No state in response\");\n\n            if (response.error) {\n                logger.warn(\"Response was error:\", response.error);\n                throw new ErrorResponse(response);\n            }\n\n            return { state: undefined, response };\n        }\n\n        const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\n        if (!storedStateString) {\n            logger.throw(new Error(\"No matching state found in storage\"));\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        const state = State.fromStorageString(storedStateString);\n        return { state, response };\n    }\n\n    public async processSignoutResponse(url: string): Promise<SignoutResponse> {\n        const logger = this._logger.create(\"processSignoutResponse\");\n\n        const { state, response } = await this.readSignoutResponseState(url, true);\n        if (state) {\n            logger.debug(\"Received state from storage; validating response\");\n            this._validator.validateSignoutResponse(response, state);\n        } else {\n            logger.debug(\"No state from storage; skipping response validation\");\n        }\n\n        return response;\n    }\n\n    public clearStaleState(): Promise<void> {\n        this._logger.create(\"clearStaleState\");\n        return State.clearStaleState(this.settings.stateStore, this.settings.staleStateAgeInSeconds);\n    }\n\n    public async revokeToken(token: string, type?: \"access_token\" | \"refresh_token\"): Promise<void> {\n        this._logger.create(\"revokeToken\");\n        return await this._tokenClient.revoke({\n            token,\n            token_type_hint: type,\n        });\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { CheckSessionIFrame } from \"./CheckSessionIFrame\";\nimport type { UserManager } from \"./UserManager\";\nimport type { User } from \"./User\";\n\n/**\n * @public\n */\nexport class SessionMonitor {\n    private readonly _logger = new Logger(\"SessionMonitor\");\n\n    private _sub: string | undefined;\n    private _sid: string | undefined;\n    private _checkSessionIFrame?: CheckSessionIFrame;\n\n    public constructor(private readonly _userManager: UserManager) {\n        if (!_userManager) {\n            this._logger.throw(new Error(\"No user manager passed\"));\n        }\n\n        this._userManager.events.addUserLoaded(this._start);\n        this._userManager.events.addUserUnloaded(this._stop);\n\n        this._init().catch((err: unknown) => {\n            // catch to suppress errors since we're in a ctor\n            this._logger.error(err);\n        });\n    }\n\n    protected async _init(): Promise<void> {\n        this._logger.create(\"_init\");\n        const user = await this._userManager.getUser();\n        // doing this manually here since calling getUser\n        // doesn't trigger load event.\n        if (user) {\n            void this._start(user);\n        }\n        else if (this._userManager.settings.monitorAnonymousSession) {\n            const session = await this._userManager.querySessionStatus();\n            if (session) {\n                const tmpUser = {\n                    session_state: session.session_state,\n                    profile: session.sub && session.sid ? {\n                        sub: session.sub,\n                        sid: session.sid,\n                    } : null,\n                };\n                void this._start(tmpUser);\n            }\n        }\n    }\n\n    protected _start = async (\n        user: User | {\n            session_state: string;\n            profile: { sub: string; sid: string } | null;\n        },\n    ): Promise<void> => {\n        const session_state = user.session_state;\n        if (!session_state) {\n            return;\n        }\n        const logger = this._logger.create(\"_start\");\n\n        if (user.profile) {\n            this._sub = user.profile.sub;\n            this._sid = user.profile.sid;\n            logger.debug(\"session_state\", session_state, \", sub\", this._sub);\n        }\n        else {\n            this._sub = undefined;\n            this._sid = undefined;\n            logger.debug(\"session_state\", session_state, \", anonymous user\");\n        }\n\n        if (this._checkSessionIFrame) {\n            this._checkSessionIFrame.start(session_state);\n            return;\n        }\n\n        try {\n            const url = await this._userManager.metadataService.getCheckSessionIframe();\n            if (url) {\n                logger.debug(\"initializing check session iframe\");\n\n                const client_id = this._userManager.settings.client_id;\n                const intervalInSeconds = this._userManager.settings.checkSessionIntervalInSeconds;\n                const stopOnError = this._userManager.settings.stopCheckSessionOnError;\n\n                const checkSessionIFrame = new CheckSessionIFrame(this._callback, client_id, url, intervalInSeconds, stopOnError);\n                await checkSessionIFrame.load();\n                this._checkSessionIFrame = checkSessionIFrame;\n                checkSessionIFrame.start(session_state);\n            }\n            else {\n                logger.warn(\"no check session iframe found in the metadata\");\n            }\n        }\n        catch (err) {\n            // catch to suppress errors since we're in non-promise callback\n            logger.error(\"Error from getCheckSessionIframe:\", err instanceof Error ? err.message : err);\n        }\n    };\n\n    protected _stop = (): void => {\n        const logger = this._logger.create(\"_stop\");\n        this._sub = undefined;\n        this._sid = undefined;\n\n        if (this._checkSessionIFrame) {\n            this._checkSessionIFrame.stop();\n        }\n\n        if (this._userManager.settings.monitorAnonymousSession) {\n            // using a timer to delay re-initialization to avoid race conditions during signout\n            // TODO rewrite to use promise correctly\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            const timerHandle = setInterval(async () => {\n                clearInterval(timerHandle);\n\n                try {\n                    const session = await this._userManager.querySessionStatus();\n                    if (session) {\n                        const tmpUser = {\n                            session_state: session.session_state,\n                            profile: session.sub && session.sid ? {\n                                sub: session.sub,\n                                sid: session.sid,\n                            } : null,\n                        };\n                        void this._start(tmpUser);\n                    }\n                }\n                catch (err) {\n                    // catch to suppress errors since we're in a callback\n                    logger.error(\"error from querySessionStatus\", err instanceof Error ? err.message : err);\n                }\n            }, 1000);\n        }\n    };\n\n    protected _callback = async (): Promise<void> => {\n        const logger = this._logger.create(\"_callback\");\n        try {\n            const session = await this._userManager.querySessionStatus();\n            let raiseEvent = true;\n\n            if (session && this._checkSessionIFrame) {\n                if (session.sub === this._sub) {\n                    raiseEvent = false;\n                    this._checkSessionIFrame.start(session.session_state);\n\n                    if (session.sid === this._sid) {\n                        logger.debug(\"same sub still logged in at OP, restarting check session iframe; session_state\", session.session_state);\n                    }\n                    else {\n                        logger.debug(\"same sub still logged in at OP, session state has changed, restarting check session iframe; session_state\", session.session_state);\n                        this._userManager.events._raiseUserSessionChanged();\n                    }\n                }\n                else {\n                    logger.debug(\"different subject signed into OP\", session.sub);\n                }\n            }\n            else {\n                logger.debug(\"subject no longer signed into OP\");\n            }\n\n            if (raiseEvent) {\n                if (this._sub) {\n                    this._userManager.events._raiseUserSignedOut();\n                }\n                else {\n                    this._userManager.events._raiseUserSignedIn();\n                }\n            } else {\n                logger.debug(\"no change in session detected, no event to raise\");\n            }\n        }\n        catch (err) {\n            if (this._sub) {\n                logger.debug(\"Error calling queryCurrentSigninSession; raising signed out event\", err);\n                this._userManager.events._raiseUserSignedOut();\n            }\n        }\n    };\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Timer } from \"./utils\";\nimport type { IdTokenClaims } from \"./Claims\";\n\n/**\n * Holds claims represented by a combination of the `id_token` and the user info endpoint.\n * @public\n */\nexport type UserProfile = IdTokenClaims;\n\n/**\n * @public\n */\nexport class User {\n    /**\n     * A JSON Web Token (JWT). Only provided if `openid` scope was requested.\n     * The application can access the data decoded by using the `profile` property.\n     */\n    public id_token?: string;\n\n    /** The session state value returned from the OIDC provider. */\n    public session_state: string | null;\n\n    /**\n     * The requested access token returned from the OIDC provider. The application can use this token to\n     * authenticate itself to the secured resource.\n     */\n    public access_token: string;\n\n    /**\n     * An OAuth 2.0 refresh token. The app can use this token to acquire additional access tokens after the\n     * current access token expires. Refresh tokens are long-lived and can be used to maintain access to resources\n     * for extended periods of time.\n     */\n    public refresh_token?: string;\n\n    /** Typically \"Bearer\" */\n    public token_type: string;\n\n    /** The scopes that the requested access token is valid for. */\n    public scope?: string;\n\n    /** The claims represented by a combination of the `id_token` and the user info endpoint. */\n    public profile: UserProfile;\n\n    /** The expires at returned from the OIDC provider. */\n    public expires_at?: number;\n\n    /** custom state data set during the initial signin request */\n    public readonly state: unknown;\n\n    public constructor(args: {\n        id_token?: string;\n        session_state?: string | null;\n        access_token: string;\n        refresh_token?: string;\n        token_type: string;\n        scope?: string;\n        profile: UserProfile;\n        expires_at?: number;\n        userState?: unknown;\n    }) {\n        this.id_token = args.id_token;\n        this.session_state = args.session_state ?? null;\n        this.access_token = args.access_token;\n        this.refresh_token = args.refresh_token;\n\n        this.token_type = args.token_type;\n        this.scope = args.scope;\n        this.profile = args.profile;\n        this.expires_at = args.expires_at;\n        this.state = args.userState;\n    }\n\n    /** Computed number of seconds the access token has remaining. */\n    public get expires_in(): number | undefined {\n        if (this.expires_at === undefined) {\n            return undefined;\n        }\n        return this.expires_at - Timer.getEpochTime();\n    }\n\n    public set expires_in(value: number | undefined) {\n        if (value !== undefined) {\n            this.expires_at = Math.floor(value) + Timer.getEpochTime();\n        }\n    }\n\n    /** Computed value indicating if the access token is expired. */\n    public get expired(): boolean | undefined {\n        const expires_in = this.expires_in;\n        if (expires_in === undefined) {\n            return undefined;\n        }\n        return expires_in <= 0;\n    }\n\n    /** Array representing the parsed values from the `scope`. */\n    public get scopes(): string[] {\n        return this.scope?.split(\" \") ?? [];\n    }\n\n    public toStorageString(): string {\n        new Logger(\"User\").create(\"toStorageString\");\n        return JSON.stringify({\n            id_token: this.id_token,\n            session_state: this.session_state,\n            access_token: this.access_token,\n            refresh_token: this.refresh_token,\n            token_type: this.token_type,\n            scope: this.scope,\n            profile: this.profile,\n            expires_at: this.expires_at,\n        });\n    }\n\n    public static fromStorageString(storageString: string): User {\n        Logger.createStatic(\"User\", \"fromStorageString\");\n        return new User(JSON.parse(storageString));\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Event, Logger, UrlUtils } from \"../utils\";\nimport type { IWindow, NavigateParams, NavigateResponse } from \"./IWindow\";\n\nconst messageSource = \"oidc-client\";\n\ninterface MessageData {\n    source: string;\n    url: string;\n    keepOpen: boolean;\n}\n\n/**\n * Window implementation which resolves via communication from a child window\n * via the `Window.postMessage()` interface.\n *\n * @internal\n */\nexport abstract class AbstractChildWindow implements IWindow {\n    protected abstract readonly _logger: Logger;\n    protected readonly _abort = new Event<[reason: Error]>(\"Window navigation aborted\");\n    protected readonly _disposeHandlers = new Set<() => void>();\n\n    protected _window: WindowProxy | null = null;\n\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\n        const logger = this._logger.create(\"navigate\");\n        if (!this._window) {\n            throw new Error(\"Attempted to navigate on a disposed window\");\n        }\n\n        logger.debug(\"setting URL in window\");\n        this._window.location.replace(params.url);\n\n        const { url, keepOpen } = await new Promise<MessageData>((resolve, reject) => {\n            const listener = (e: MessageEvent) => {\n                const data: MessageData | undefined = e.data;\n                const origin = params.scriptOrigin ?? window.location.origin;\n                if (e.origin !== origin || data?.source !== messageSource) {\n                    // silently discard events not intended for us\n                    return;\n                }\n                try {\n                    const state = UrlUtils.readParams(data.url, params.response_mode).get(\"state\");\n                    if (!state) {\n                        logger.warn(\"no state found in response url\");\n                    }\n                    if (e.source !== this._window && state !== params.state) {\n                        // MessageEvent source is a relatively modern feature, we can't rely on it\n                        // so we also inspect the payload for a matching state key as an alternative\n                        return;\n                    }\n                }\n                catch (err) {\n                    this._dispose();\n                    reject(new Error(\"Invalid response from window\"));\n                }\n                resolve(data);\n            };\n            window.addEventListener(\"message\", listener, false);\n            this._disposeHandlers.add(() => window.removeEventListener(\"message\", listener, false));\n            this._disposeHandlers.add(this._abort.addHandler((reason) => {\n                this._dispose();\n                reject(reason);\n            }));\n        });\n        logger.debug(\"got response from window\");\n        this._dispose();\n\n        if (!keepOpen) {\n            this.close();\n        }\n\n        return { url };\n    }\n\n    public abstract close(): void;\n\n    private _dispose(): void {\n        this._logger.create(\"_dispose\");\n\n        for (const dispose of this._disposeHandlers) {\n            dispose();\n        }\n        this._disposeHandlers.clear();\n    }\n\n    protected static _notifyParent(parent: Window, url: string, keepOpen = false, targetOrigin = window.location.origin): void {\n        parent.postMessage({\n            source: messageSource,\n            url,\n            keepOpen,\n        } as MessageData, targetOrigin);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { type OidcClientSettings, OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport type { PopupWindowFeatures } from \"./utils/PopupUtils\";\nimport { WebStorageStateStore } from \"./WebStorageStateStore\";\nimport { InMemoryWebStorage } from \"./InMemoryWebStorage\";\n\nexport const DefaultPopupWindowFeatures: PopupWindowFeatures = {\n    location: false,\n    toolbar: false,\n    height: 640,\n    closePopupWindowAfterInSeconds: -1,\n};\nexport const DefaultPopupTarget = \"_blank\";\nconst DefaultAccessTokenExpiringNotificationTimeInSeconds = 60;\nconst DefaultCheckSessionIntervalInSeconds = 2;\nexport const DefaultSilentRequestTimeoutInSeconds = 10;\n\n/**\n * The settings used to configure the {@link UserManager}.\n *\n * @public\n */\nexport interface UserManagerSettings extends OidcClientSettings {\n    /** The URL for the page containing the call to signinPopupCallback to handle the callback from the OIDC/OAuth2 */\n    popup_redirect_uri?: string;\n    popup_post_logout_redirect_uri?: string;\n    /**\n     * The features parameter to window.open for the popup signin window. By default, the popup is\n     * placed centered in front of the window opener.\n     * (default: \\{ location: false, menubar: false, height: 640, closePopupWindowAfterInSeconds: -1 \\})\n     */\n    popupWindowFeatures?: PopupWindowFeatures;\n    /** The target parameter to window.open for the popup signin window (default: \"_blank\") */\n    popupWindowTarget?: string;\n    /** The methods window.location method used to redirect (default: \"assign\") */\n    redirectMethod?: \"replace\" | \"assign\";\n    /** The methods target window being redirected (default: \"self\") */\n    redirectTarget?: \"top\" | \"self\";\n\n    /** The target to pass while calling postMessage inside iframe for callback (default: window.location.origin) */\n    iframeNotifyParentOrigin?: string;\n\n    /** The script origin to check during 'message' callback execution while performing silent auth via iframe (default: window.location.origin) */\n    iframeScriptOrigin?: string;\n\n    /** The URL for the page containing the code handling the silent renew */\n    silent_redirect_uri?: string;\n    /** Number of seconds to wait for the silent renew to return before assuming it has failed or timed out (default: 10) */\n    silentRequestTimeoutInSeconds?: number;\n    /** Flag to indicate if there should be an automatic attempt to renew the access token prior to its expiration. The automatic renew attempt starts 1 minute before the access token expires (default: true) */\n    automaticSilentRenew?: boolean;\n    /** Flag to validate user.profile.sub in silent renew calls (default: true) */\n    validateSubOnSilentRenew?: boolean;\n    /** Flag to control if id_token is included as id_token_hint in silent renew calls (default: false) */\n    includeIdTokenInSilentRenew?: boolean;\n\n    /** Will raise events for when user has performed a signout at the OP (default: false) */\n    monitorSession?: boolean;\n    monitorAnonymousSession?: boolean;\n    /** Interval in seconds to check the user's session (default: 2) */\n    checkSessionIntervalInSeconds?: number;\n    query_status_response_type?: string;\n    stopCheckSessionOnError?: boolean;\n\n    /**\n     * The `token_type_hint`s to pass to the authority server by default (default: [\"access_token\", \"refresh_token\"])\n     *\n     * Token types will be revoked in the same order as they are given here.\n     */\n    revokeTokenTypes?: (\"access_token\" | \"refresh_token\")[];\n    /** Will invoke the revocation endpoint on signout if there is an access token for the user (default: false) */\n    revokeTokensOnSignout?: boolean;\n    /** Flag to control if id_token is included as id_token_hint in silent signout calls (default: false) */\n    includeIdTokenInSilentSignout?: boolean;\n\n    /** The number of seconds before an access token is to expire to raise the accessTokenExpiring event (default: 60) */\n    accessTokenExpiringNotificationTimeInSeconds?: number;\n\n    /**\n     * Storage object used to persist User for currently authenticated user (default: window.sessionStorage, InMemoryWebStorage iff no window).\n     *  E.g. `userStore: new WebStorageStateStore({ store: window.localStorage })`\n     */\n    userStore?: WebStorageStateStore;\n}\n\n/**\n * The settings with defaults applied of the {@link UserManager}.\n * @see {@link UserManagerSettings}\n *\n * @public\n */\nexport class UserManagerSettingsStore extends OidcClientSettingsStore {\n    public readonly popup_redirect_uri: string;\n    public readonly popup_post_logout_redirect_uri: string | undefined;\n    public readonly popupWindowFeatures: PopupWindowFeatures;\n    public readonly popupWindowTarget: string;\n    public readonly redirectMethod: \"replace\" | \"assign\";\n    public readonly redirectTarget: \"top\" | \"self\";\n\n    public readonly iframeNotifyParentOrigin: string | undefined;\n    public readonly iframeScriptOrigin: string | undefined;\n\n    public readonly silent_redirect_uri: string;\n    public readonly silentRequestTimeoutInSeconds: number;\n    public readonly automaticSilentRenew: boolean;\n    public readonly validateSubOnSilentRenew: boolean;\n    public readonly includeIdTokenInSilentRenew: boolean;\n\n    public readonly monitorSession: boolean;\n    public readonly monitorAnonymousSession: boolean;\n    public readonly checkSessionIntervalInSeconds: number;\n    public readonly query_status_response_type: string;\n    public readonly stopCheckSessionOnError: boolean;\n\n    public readonly revokeTokenTypes: (\"access_token\" | \"refresh_token\")[];\n    public readonly revokeTokensOnSignout: boolean;\n    public readonly includeIdTokenInSilentSignout: boolean;\n\n    public readonly accessTokenExpiringNotificationTimeInSeconds: number;\n\n    public readonly userStore: WebStorageStateStore;\n\n    public constructor(args: UserManagerSettings) {\n        const {\n            popup_redirect_uri = args.redirect_uri,\n            popup_post_logout_redirect_uri = args.post_logout_redirect_uri,\n            popupWindowFeatures = DefaultPopupWindowFeatures,\n            popupWindowTarget = DefaultPopupTarget,\n            redirectMethod = \"assign\",\n            redirectTarget = \"self\",\n\n            iframeNotifyParentOrigin = args.iframeNotifyParentOrigin,\n            iframeScriptOrigin = args.iframeScriptOrigin,\n\n            silent_redirect_uri = args.redirect_uri,\n            silentRequestTimeoutInSeconds = DefaultSilentRequestTimeoutInSeconds,\n            automaticSilentRenew = true,\n            validateSubOnSilentRenew = true,\n            includeIdTokenInSilentRenew = false,\n\n            monitorSession = false,\n            monitorAnonymousSession = false,\n            checkSessionIntervalInSeconds = DefaultCheckSessionIntervalInSeconds,\n            query_status_response_type = \"code\",\n            stopCheckSessionOnError = true,\n\n            revokeTokenTypes = [\"access_token\", \"refresh_token\"],\n            revokeTokensOnSignout = false,\n            includeIdTokenInSilentSignout = false,\n\n            accessTokenExpiringNotificationTimeInSeconds = DefaultAccessTokenExpiringNotificationTimeInSeconds,\n\n            userStore,\n        } = args;\n\n        super(args);\n\n        this.popup_redirect_uri = popup_redirect_uri;\n        this.popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;\n        this.popupWindowFeatures = popupWindowFeatures;\n        this.popupWindowTarget = popupWindowTarget;\n        this.redirectMethod = redirectMethod;\n        this.redirectTarget = redirectTarget;\n\n        this.iframeNotifyParentOrigin = iframeNotifyParentOrigin;\n        this.iframeScriptOrigin = iframeScriptOrigin;\n\n        this.silent_redirect_uri = silent_redirect_uri;\n        this.silentRequestTimeoutInSeconds = silentRequestTimeoutInSeconds;\n        this.automaticSilentRenew = automaticSilentRenew;\n        this.validateSubOnSilentRenew = validateSubOnSilentRenew;\n        this.includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;\n\n        this.monitorSession = monitorSession;\n        this.monitorAnonymousSession = monitorAnonymousSession;\n        this.checkSessionIntervalInSeconds = checkSessionIntervalInSeconds;\n        this.stopCheckSessionOnError = stopCheckSessionOnError;\n        this.query_status_response_type = query_status_response_type;\n\n        this.revokeTokenTypes = revokeTokenTypes;\n        this.revokeTokensOnSignout = revokeTokensOnSignout;\n        this.includeIdTokenInSilentSignout = includeIdTokenInSilentSignout;\n\n        this.accessTokenExpiringNotificationTimeInSeconds = accessTokenExpiringNotificationTimeInSeconds;\n\n        if (userStore) {\n            this.userStore = userStore;\n        }\n        else {\n            const store = typeof window !== \"undefined\" ? window.sessionStorage : new InMemoryWebStorage();\n            this.userStore = new WebStorageStateStore({ store });\n        }\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport { ErrorTimeout } from \"../errors\";\nimport type { NavigateParams, NavigateResponse } from \"./IWindow\";\nimport { AbstractChildWindow } from \"./AbstractChildWindow\";\nimport { DefaultSilentRequestTimeoutInSeconds } from \"../UserManagerSettings\";\n\n/**\n * @public\n */\nexport interface IFrameWindowParams {\n    silentRequestTimeoutInSeconds?: number;\n}\n\n/**\n * @internal\n */\nexport class IFrameWindow extends AbstractChildWindow {\n    protected readonly _logger = new Logger(\"IFrameWindow\");\n    private _frame: HTMLIFrameElement | null;\n    private _timeoutInSeconds: number;\n\n    public constructor({\n        silentRequestTimeoutInSeconds = DefaultSilentRequestTimeoutInSeconds,\n    }: IFrameWindowParams) {\n        super();\n        this._timeoutInSeconds = silentRequestTimeoutInSeconds;\n\n        this._frame = IFrameWindow.createHiddenIframe();\n        this._window = this._frame.contentWindow;\n    }\n\n    private static createHiddenIframe(): HTMLIFrameElement {\n        const iframe = window.document.createElement(\"iframe\");\n\n        // shotgun approach\n        iframe.style.visibility = \"hidden\";\n        iframe.style.position = \"fixed\";\n        iframe.style.left = \"-1000px\";\n        iframe.style.top = \"0\";\n        iframe.width = \"0\";\n        iframe.height = \"0\";\n\n        window.document.body.appendChild(iframe);\n        return iframe;\n    }\n\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\n        this._logger.debug(\"navigate: Using timeout of:\", this._timeoutInSeconds);\n        const timer = setTimeout(() => this._abort.raise(new ErrorTimeout(\"IFrame timed out without a response\")), this._timeoutInSeconds * 1000);\n        this._disposeHandlers.add(() => clearTimeout(timer));\n\n        return await super.navigate(params);\n    }\n\n    public close(): void {\n        if (this._frame) {\n            if (this._frame.parentNode) {\n                this._frame.addEventListener(\"load\", (ev) => {\n                    const frame = ev.target as HTMLIFrameElement;\n                    frame.parentNode?.removeChild(frame);\n                    this._abort.raise(new Error(\"IFrame removed from DOM\"));\n                }, true);\n                this._frame.contentWindow?.location.replace(\"about:blank\");\n            }\n            this._frame = null;\n        }\n        this._window = null;\n    }\n\n    public static notifyParent(url: string, targetOrigin?: string): void {\n        return super._notifyParent(window.parent, url, false, targetOrigin);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\nimport { IFrameWindow, type IFrameWindowParams } from \"./IFrameWindow\";\nimport type { INavigator } from \"./INavigator\";\n\n/**\n * @internal\n */\nexport class IFrameNavigator implements INavigator {\n    private readonly _logger = new Logger(\"IFrameNavigator\");\n\n    constructor(private _settings: UserManagerSettingsStore) {}\n\n    public async prepare({\n        silentRequestTimeoutInSeconds = this._settings.silentRequestTimeoutInSeconds,\n    }: IFrameWindowParams): Promise<IFrameWindow> {\n        return new IFrameWindow({ silentRequestTimeoutInSeconds });\n    }\n\n    public async callback(url: string): Promise<void> {\n        this._logger.create(\"callback\");\n        IFrameWindow.notifyParent(url, this._settings.iframeNotifyParentOrigin);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, PopupUtils, type PopupWindowFeatures } from \"../utils\";\nimport { DefaultPopupWindowFeatures, DefaultPopupTarget } from \"../UserManagerSettings\";\nimport { AbstractChildWindow } from \"./AbstractChildWindow\";\nimport type { NavigateParams, NavigateResponse } from \"./IWindow\";\n\nconst checkForPopupClosedInterval = 500;\nconst second = 1000;\n\n/**\n * @public\n */\nexport interface PopupWindowParams {\n    popupWindowFeatures?: PopupWindowFeatures;\n    popupWindowTarget?: string;\n}\n\n/**\n * @internal\n */\nexport class PopupWindow extends AbstractChildWindow {\n    protected readonly _logger = new Logger(\"PopupWindow\");\n\n    protected _window: WindowProxy | null;\n\n    public constructor({\n        popupWindowTarget = DefaultPopupTarget,\n        popupWindowFeatures = {},\n    }: PopupWindowParams) {\n        super();\n        const centeredPopup = PopupUtils.center({ ...DefaultPopupWindowFeatures, ...popupWindowFeatures });\n        this._window = window.open(undefined, popupWindowTarget, PopupUtils.serialize(centeredPopup));\n        if (popupWindowFeatures.closePopupWindowAfterInSeconds && popupWindowFeatures.closePopupWindowAfterInSeconds > 0) {\n            setTimeout(() => {\n                if (!this._window || typeof this._window.closed !== \"boolean\" || this._window.closed) {\n                    this._abort.raise(new Error(\"Popup blocked by user\"));\n                    return;\n                }\n\n                this.close();\n            }, popupWindowFeatures.closePopupWindowAfterInSeconds * second);\n        }\n    }\n\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\n        this._window?.focus();\n\n        const popupClosedInterval = setInterval(() => {\n            if (!this._window || this._window.closed) {\n                this._abort.raise(new Error(\"Popup closed by user\"));\n            }\n        }, checkForPopupClosedInterval);\n        this._disposeHandlers.add(() => clearInterval(popupClosedInterval));\n\n        return await super.navigate(params);\n    }\n\n    public close(): void {\n        if (this._window) {\n            if (!this._window.closed) {\n                this._window.close();\n                this._abort.raise(new Error(\"Popup closed\"));\n            }\n        }\n        this._window = null;\n    }\n\n    public static notifyOpener(url: string, keepOpen: boolean): void {\n        if (!window.opener) {\n            throw new Error(\"No window.opener. Can't complete notification.\");\n        }\n        return super._notifyParent(window.opener, url, keepOpen);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport { PopupWindow, type PopupWindowParams } from \"./PopupWindow\";\nimport type { INavigator } from \"./INavigator\";\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\n\n/**\n * @internal\n */\nexport class PopupNavigator implements INavigator {\n    private readonly _logger = new Logger(\"PopupNavigator\");\n\n    constructor(private _settings: UserManagerSettingsStore) {}\n\n    public async prepare({\n        popupWindowFeatures = this._settings.popupWindowFeatures,\n        popupWindowTarget = this._settings.popupWindowTarget,\n    }: PopupWindowParams): Promise<PopupWindow> {\n        return new PopupWindow({ popupWindowFeatures, popupWindowTarget });\n    }\n\n    public async callback(url: string, { keepOpen = false }): Promise<void> {\n        this._logger.create(\"callback\");\n\n        PopupWindow.notifyOpener(url, keepOpen);\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\nimport type { INavigator } from \"./INavigator\";\nimport type { IWindow } from \"./IWindow\";\n\n/**\n * @public\n */\nexport interface RedirectParams {\n    redirectMethod?: \"replace\" | \"assign\";\n    redirectTarget?: \"top\" | \"self\";\n}\n\n/**\n * @internal\n */\nexport class RedirectNavigator implements INavigator {\n    private readonly _logger = new Logger(\"RedirectNavigator\");\n\n    constructor(private _settings: UserManagerSettingsStore) {}\n\n    public async prepare({\n        redirectMethod = this._settings.redirectMethod,\n        redirectTarget = this._settings.redirectTarget,\n    }: RedirectParams): Promise<IWindow> {\n        this._logger.create(\"prepare\");\n        let targetWindow = window.self as Window;\n\n        if (redirectTarget === \"top\") {\n            targetWindow = window.top ?? window.self;\n        }\n    \n        const redirect = targetWindow.location[redirectMethod].bind(targetWindow.location) as (url: string) => never;\n        let abort: (reason: Error) => void;\n        return {\n            navigate: async (params): Promise<never> => {\n                this._logger.create(\"navigate\");\n                // We use a promise that never resolves to block the caller\n                const promise = new Promise((resolve, reject) => {\n                    abort = reject;\n                });\n                redirect(params.url);\n                return await (promise as Promise<never>);\n            },\n            close: () => {\n                this._logger.create(\"close\");\n                abort?.(new Error(\"Redirect aborted\"));\n                targetWindow.stop();\n            },\n        };\n    }\n\n    public async callback(): Promise<void> {\n        return;\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Event } from \"./utils\";\nimport { AccessTokenEvents } from \"./AccessTokenEvents\";\nimport type { UserManagerSettingsStore } from \"./UserManagerSettings\";\nimport type { User } from \"./User\";\n\n/**\n * @public\n */\nexport type UserLoadedCallback = (user: User) => Promise<void> | void;\n/**\n * @public\n */\nexport type UserUnloadedCallback = () => Promise<void> | void;\n/**\n * @public\n */\nexport type SilentRenewErrorCallback = (error: Error) => Promise<void> | void;\n/**\n * @public\n */\nexport type UserSignedInCallback = () => Promise<void> | void;\n/**\n * @public\n */\nexport type UserSignedOutCallback = () => Promise<void> | void;\n/**\n * @public\n */\nexport type UserSessionChangedCallback = () => Promise<void> | void;\n\n/**\n * @public\n */\nexport class UserManagerEvents extends AccessTokenEvents {\n    protected readonly _logger = new Logger(\"UserManagerEvents\");\n\n    private readonly _userLoaded = new Event<[User]>(\"User loaded\");\n    private readonly _userUnloaded = new Event<[]>(\"User unloaded\");\n    private readonly _silentRenewError = new Event<[Error]>(\"Silent renew error\");\n    private readonly _userSignedIn = new Event<[]>(\"User signed in\");\n    private readonly _userSignedOut = new Event<[]>(\"User signed out\");\n    private readonly _userSessionChanged = new Event<[]>(\"User session changed\");\n\n    public constructor(settings: UserManagerSettingsStore) {\n        super({ expiringNotificationTimeInSeconds: settings.accessTokenExpiringNotificationTimeInSeconds });\n    }\n\n    public load(user: User, raiseEvent=true): void {\n        super.load(user);\n        if (raiseEvent) {\n            this._userLoaded.raise(user);\n        }\n    }\n    public unload(): void {\n        super.unload();\n        this._userUnloaded.raise();\n    }\n\n    /**\n     * Add callback: Raised when a user session has been established (or re-established).\n     */\n    public addUserLoaded(cb: UserLoadedCallback): () => void {\n        return this._userLoaded.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when a user session has been established (or re-established).\n     */\n    public removeUserLoaded(cb: UserLoadedCallback): void {\n        return this._userLoaded.removeHandler(cb);\n    }\n\n    /**\n     * Add callback: Raised when a user session has been terminated.\n     */\n    public addUserUnloaded(cb: UserUnloadedCallback): () => void {\n        return this._userUnloaded.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when a user session has been terminated.\n     */\n    public removeUserUnloaded(cb: UserUnloadedCallback): void {\n        return this._userUnloaded.removeHandler(cb);\n    }\n\n    /**\n     * Add callback: Raised when the automatic silent renew has failed.\n     */\n    public addSilentRenewError(cb: SilentRenewErrorCallback): () => void {\n        return this._silentRenewError.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the automatic silent renew has failed.\n     */\n    public removeSilentRenewError(cb: SilentRenewErrorCallback): void {\n        return this._silentRenewError.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public _raiseSilentRenewError(e: Error): void {\n        this._silentRenewError.raise(e);\n    }\n\n    /**\n     * Add callback: Raised when the user is signed in (when `monitorSession` is set).\n     * @see {@link UserManagerSettings.monitorSession}\n     */\n    public addUserSignedIn(cb: UserSignedInCallback): () => void {\n        return this._userSignedIn.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the user is signed in (when `monitorSession` is set).\n     */\n    public removeUserSignedIn(cb: UserSignedInCallback): void {\n        this._userSignedIn.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public _raiseUserSignedIn(): void {\n        this._userSignedIn.raise();\n    }\n\n    /**\n     * Add callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\n     * @see {@link UserManagerSettings.monitorSession}\n     */\n    public addUserSignedOut(cb: UserSignedOutCallback): () => void {\n        return this._userSignedOut.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\n     */\n    public removeUserSignedOut(cb: UserSignedOutCallback): void {\n        this._userSignedOut.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public _raiseUserSignedOut(): void {\n        this._userSignedOut.raise();\n    }\n\n    /**\n     * Add callback: Raised when the user session changed (when `monitorSession` is set).\n     * @see {@link UserManagerSettings.monitorSession}\n     */\n    public addUserSessionChanged(cb: UserSessionChangedCallback): () => void {\n        return this._userSessionChanged.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the user session changed (when `monitorSession` is set).\n     */\n    public removeUserSessionChanged(cb: UserSessionChangedCallback): void {\n        this._userSessionChanged.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public _raiseUserSessionChanged(): void {\n        this._userSessionChanged.raise();\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Timer } from \"./utils\";\nimport { ErrorTimeout } from \"./errors\";\nimport type { UserManager } from \"./UserManager\";\nimport type { AccessTokenCallback } from \"./AccessTokenEvents\";\n\n/**\n * @internal\n */\nexport class SilentRenewService {\n    protected _logger = new Logger(\"SilentRenewService\");\n    private _isStarted = false;\n    private readonly _retryTimer = new Timer(\"Retry Silent Renew\");\n\n    public constructor(private _userManager: UserManager) {}\n\n    public async start(): Promise<void> {\n        const logger = this._logger.create(\"start\");\n        if (!this._isStarted) {\n            this._isStarted = true;\n            this._userManager.events.addAccessTokenExpiring(this._tokenExpiring);\n            this._retryTimer.addHandler(this._tokenExpiring);\n\n            // this will trigger loading of the user so the expiring events can be initialized\n            try {\n                await this._userManager.getUser();\n                // deliberate nop\n            }\n            catch (err) {\n                // catch to suppress errors since we're in a ctor\n                logger.error(\"getUser error\", err);\n            }\n        }\n    }\n\n    public stop(): void {\n        if (this._isStarted) {\n            this._retryTimer.cancel();\n            this._retryTimer.removeHandler(this._tokenExpiring);\n            this._userManager.events.removeAccessTokenExpiring(this._tokenExpiring);\n            this._isStarted = false;\n        }\n    }\n\n    protected _tokenExpiring: AccessTokenCallback = async () => {\n        const logger = this._logger.create(\"_tokenExpiring\");\n        try {\n            await this._userManager.signinSilent();\n            logger.debug(\"silent token renewal successful\");\n        }\n        catch (err) {\n            if (err instanceof ErrorTimeout) {\n                // no response from authority server, e.g. IFrame timeout, ...\n                logger.warn(\"ErrorTimeout from signinSilent:\", err, \"retry in 5s\");\n                this._retryTimer.init(5);\n                return;\n            }\n\n            logger.error(\"Error from signinSilent:\", err);\n            this._userManager.events._raiseSilentRenewError(err as Error);\n        }\n    };\n}\n","// Copyright (C) AuthTS Contributors\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport type { UserProfile } from \"./User\";\n\n/**\n * Fake state store implementation necessary for validating refresh token requests.\n *\n * @public\n */\nexport class RefreshState {\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    public readonly data?: unknown;\n\n    public readonly refresh_token: string;\n    public readonly id_token?: string;\n    public readonly session_state: string | null;\n    public readonly scope?: string;\n    public readonly profile: UserProfile;\n    public readonly resource?: string | string[];\n\n    constructor(args: {\n        refresh_token: string;\n        id_token?: string;\n        session_state: string | null;\n        scope?: string;\n        profile: UserProfile;\n\n        state?: unknown;\n    }, resource?: string | string[]) {\n        this.refresh_token = args.refresh_token;\n        this.id_token = args.id_token;\n        this.session_state = args.session_state;\n        this.scope = args.scope;\n        this.profile = args.profile;\n        this.resource = resource;\n\n        this.data = args.state;\n\n    }\n}\n","// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { ErrorResponse } from \"./errors\";\nimport { type NavigateResponse, type PopupWindowParams, type IWindow, type IFrameWindowParams, type RedirectParams, RedirectNavigator, PopupNavigator, IFrameNavigator, type INavigator } from \"./navigators\";\nimport { OidcClient, type CreateSigninRequestArgs, type CreateSignoutRequestArgs, type ProcessResourceOwnerPasswordCredentialsArgs } from \"./OidcClient\";\nimport { type UserManagerSettings, UserManagerSettingsStore } from \"./UserManagerSettings\";\nimport { User } from \"./User\";\nimport { UserManagerEvents } from \"./UserManagerEvents\";\nimport { SilentRenewService } from \"./SilentRenewService\";\nimport { SessionMonitor } from \"./SessionMonitor\";\nimport type { SessionStatus } from \"./SessionStatus\";\nimport type { SignoutResponse } from \"./SignoutResponse\";\nimport type { MetadataService } from \"./MetadataService\";\nimport { RefreshState } from \"./RefreshState\";\nimport type { SigninResponse } from \"./SigninResponse\";\n\n/**\n * @public\n */\nexport type ExtraSigninRequestArgs = Pick<CreateSigninRequestArgs, \"nonce\" | \"extraQueryParams\" | \"extraTokenParams\" | \"state\" | \"redirect_uri\" | \"prompt\" | \"acr_values\" | \"login_hint\" | \"scope\" | \"max_age\" | \"ui_locales\" | \"resource\">;\n/**\n * @public\n */\nexport type ExtraSignoutRequestArgs = Pick<CreateSignoutRequestArgs, \"extraQueryParams\" | \"state\" | \"id_token_hint\" | \"post_logout_redirect_uri\">;\n\n/**\n * @public\n */\nexport type RevokeTokensTypes = UserManagerSettings[\"revokeTokenTypes\"];\n\n/**\n * @public\n */\nexport type SigninRedirectArgs = RedirectParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type SigninPopupArgs = PopupWindowParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type SigninSilentArgs = IFrameWindowParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type SigninResourceOwnerCredentialsArgs = ProcessResourceOwnerPasswordCredentialsArgs;\n\n/**\n * @public\n */\nexport type QuerySessionStatusArgs = IFrameWindowParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type SignoutRedirectArgs = RedirectParams & ExtraSignoutRequestArgs;\n\n/**\n * @public\n */\nexport type SignoutPopupArgs = PopupWindowParams & ExtraSignoutRequestArgs;\n\n/**\n * @public\n */\nexport type SignoutSilentArgs = IFrameWindowParams & ExtraSignoutRequestArgs;\n\n/**\n * Provides a higher level API for signing a user in, signing out, managing the user's claims returned from the OIDC provider,\n * and managing an access token returned from the OIDC/OAuth2 provider.\n *\n * @public\n */\nexport class UserManager {\n    /** Returns the settings used to configure the `UserManager`. */\n    public readonly settings: UserManagerSettingsStore;\n    protected readonly _logger = new Logger(\"UserManager\");\n\n    protected readonly _client: OidcClient;\n    protected readonly _redirectNavigator: INavigator;\n    protected readonly _popupNavigator: INavigator;\n    protected readonly _iframeNavigator: INavigator;\n    protected readonly _events: UserManagerEvents;\n    protected readonly _silentRenewService: SilentRenewService;\n    protected readonly _sessionMonitor: SessionMonitor | null;\n\n    public constructor(settings: UserManagerSettings, redirectNavigator?: INavigator, popupNavigator?: INavigator, iframeNavigator?: INavigator) {\n        this.settings = new UserManagerSettingsStore(settings);\n\n        this._client = new OidcClient(settings);\n\n        this._redirectNavigator = redirectNavigator ?? new RedirectNavigator(this.settings);\n        this._popupNavigator = popupNavigator ?? new PopupNavigator(this.settings);\n        this._iframeNavigator = iframeNavigator ?? new IFrameNavigator(this.settings);\n\n        this._events = new UserManagerEvents(this.settings);\n        this._silentRenewService = new SilentRenewService(this);\n\n        // order is important for the following properties; these services depend upon the events.\n        if (this.settings.automaticSilentRenew) {\n            this.startSilentRenew();\n        }\n\n        this._sessionMonitor = null;\n        if (this.settings.monitorSession) {\n            this._sessionMonitor = new SessionMonitor(this);\n        }\n\n    }\n\n    /** Returns an object used to register for events raised by the `UserManager`. */\n    public get events(): UserManagerEvents {\n        return this._events;\n    }\n\n    /** Returns an object used to access the metadata configuration of the OIDC provider. */\n    public get metadataService(): MetadataService {\n        return this._client.metadataService;\n    }\n\n    /**\n     * Returns promise to load the `User` object for the currently authenticated user.\n     */\n    public async getUser(): Promise<User | null> {\n        const logger = this._logger.create(\"getUser\");\n        const user = await this._loadUser();\n        if (user) {\n            logger.info(\"user loaded\");\n            this._events.load(user, false);\n            return user;\n        }\n\n        logger.info(\"user not found in storage\");\n        return null;\n    }\n\n    /**\n     * Returns promise to remove from any storage the currently authenticated user.\n     */\n    public async removeUser(): Promise<void> {\n        const logger = this._logger.create(\"removeUser\");\n        await this.storeUser(null);\n        logger.info(\"user removed from storage\");\n        this._events.unload();\n    }\n\n    /**\n     * Returns promise to trigger a redirect of the current window to the authorization endpoint.\n     */\n    public async signinRedirect(args: SigninRedirectArgs = {}): Promise<void> {\n        this._logger.create(\"signinRedirect\");\n        const {\n            redirectMethod,\n            ...requestArgs\n        } = args;\n        const handle = await this._redirectNavigator.prepare({ redirectMethod });\n        await this._signinStart({\n            request_type: \"si:r\",\n            ...requestArgs,\n        }, handle);\n    }\n\n    /**\n     * Returns promise to process response from the authorization endpoint. The result of the promise is the authenticated `User`.\n     */\n    public async signinRedirectCallback(url = window.location.href): Promise<User> {\n        const logger = this._logger.create(\"signinRedirectCallback\");\n        const user = await this._signinEnd(url);\n        if (user.profile && user.profile.sub) {\n            logger.info(\"success, signed in subject\", user.profile.sub);\n        }\n        else {\n            logger.info(\"no subject\");\n        }\n\n        return user;\n    }\n\n    /**\n     * Returns promise to process the signin with user/password. The result of the promise is the authenticated `User`.\n     *\n     * Throws an ErrorResponse in case of wrong authentication.\n     */\n    public async signinResourceOwnerCredentials({\n        username,\n        password,\n        skipUserInfo = false,\n    }: SigninResourceOwnerCredentialsArgs ) {\n        const logger = this._logger.create(\"signinResourceOwnerCredential\");\n\n        const signinResponse = await this._client.processResourceOwnerPasswordCredentials({ username, password, skipUserInfo, extraTokenParams: this.settings.extraTokenParams });\n        logger.debug(\"got signin response\");\n\n        const user = await this._buildUser(signinResponse);\n        if (user.profile && user.profile.sub) {\n            logger.info(\"success, signed in subject\", user.profile.sub);\n        } else {\n            logger.info(\"no subject\");\n        }\n        return user;\n    }\n\n    /**\n     * Returns promise to trigger a request (via a popup window) to the authorization endpoint. The result of the promise is the authenticated `User`.\n     */\n    public async signinPopup(args: SigninPopupArgs = {}): Promise<User> {\n        const logger = this._logger.create(\"signinPopup\");\n        const {\n            popupWindowFeatures,\n            popupWindowTarget,\n            ...requestArgs\n        } = args;\n        const url = this.settings.popup_redirect_uri;\n        if (!url) {\n            logger.throw(new Error(\"No popup_redirect_uri configured\"));\n        }\n\n        const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget });\n        const user = await this._signin({\n            request_type: \"si:p\",\n            redirect_uri: url,\n            display: \"popup\",\n            ...requestArgs,\n        }, handle);\n        if (user) {\n            if (user.profile && user.profile.sub) {\n                logger.info(\"success, signed in subject\", user.profile.sub);\n            }\n            else {\n                logger.info(\"no subject\");\n            }\n        }\n\n        return user;\n    }\n    /**\n     * Returns promise to notify the opening window of response from the authorization endpoint.\n     */\n    public async signinPopupCallback(url = window.location.href, keepOpen = false): Promise<void> {\n        const logger = this._logger.create(\"signinPopupCallback\");\n        await this._popupNavigator.callback(url, { keepOpen });\n        logger.info(\"success\");\n    }\n\n    /**\n     * Returns promise to trigger a silent request (via an iframe) to the authorization endpoint.\n     * The result of the promise is the authenticated `User`.\n     */\n    public async signinSilent(args: SigninSilentArgs = {}): Promise<User | null> {\n        const logger = this._logger.create(\"signinSilent\");\n        const {\n            silentRequestTimeoutInSeconds,\n            resource,\n            ...requestArgs\n        } = args;\n        // first determine if we have a refresh token, or need to use iframe\n        let user = await this._loadUser();\n        if (user?.refresh_token) {\n            logger.debug(\"using refresh token\");\n            const state = new RefreshState(user as Required<User>, resource);\n            return await this._useRefreshToken(state);\n        }\n\n        const url = this.settings.silent_redirect_uri;\n        if (!url) {\n            logger.throw(new Error(\"No silent_redirect_uri configured\"));\n        }\n\n        let verifySub: string | undefined;\n        if (user && this.settings.validateSubOnSilentRenew) {\n            logger.debug(\"subject prior to silent renew:\", user.profile.sub);\n            verifySub = user.profile.sub;\n        }\n\n        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\n        user = await this._signin({\n            request_type: \"si:s\",\n            redirect_uri: url,\n            prompt: \"none\",\n            id_token_hint: this.settings.includeIdTokenInSilentRenew ? user?.id_token : undefined,\n            ...requestArgs,\n        }, handle, verifySub);\n        if (user) {\n            if (user.profile?.sub) {\n                logger.info(\"success, signed in subject\", user.profile.sub);\n            }\n            else {\n                logger.info(\"no subject\");\n            }\n        }\n\n        return user;\n    }\n\n    protected async _useRefreshToken(state: RefreshState): Promise<User> {\n        const response = await this._client.useRefreshToken({\n            state,\n            timeoutInSeconds: this.settings.silentRequestTimeoutInSeconds,\n        });\n        const user = new User({ ...state, ...response });\n\n        await this.storeUser(user);\n        this._events.load(user);\n        return user;\n    }\n\n    /**\n     * Returns promise to notify the parent window of response from the authorization endpoint.\n     */\n    public async signinSilentCallback(url = window.location.href): Promise<void> {\n        const logger = this._logger.create(\"signinSilentCallback\");\n        await this._iframeNavigator.callback(url);\n        logger.info(\"success\");\n    }\n\n    public async signinCallback(url = window.location.href): Promise<User | void> {\n        const { state } = await this._client.readSigninResponseState(url);\n        switch (state.request_type) {\n            case \"si:r\":\n                return await this.signinRedirectCallback(url);\n            case \"si:p\":\n                return await this.signinPopupCallback(url);\n            case \"si:s\":\n                return await this.signinSilentCallback(url);\n            default:\n                throw new Error(\"invalid response_type in state\");\n        }\n    }\n\n    public async signoutCallback(url = window.location.href, keepOpen = false): Promise<void> {\n        const { state } = await this._client.readSignoutResponseState(url);\n        if (!state) {\n            return;\n        }\n\n        switch (state.request_type) {\n            case \"so:r\":\n                await this.signoutRedirectCallback(url);\n                break;\n            case \"so:p\":\n                await this.signoutPopupCallback(url, keepOpen);\n                break;\n            case \"so:s\":\n                await this.signoutSilentCallback(url);\n                break;\n            default:\n                throw new Error(\"invalid response_type in state\");\n        }\n    }\n\n    /**\n     * Returns promise to query OP for user's current signin status. Returns object with session_state and subject identifier.\n     */\n    public async querySessionStatus(args: QuerySessionStatusArgs = {}): Promise<SessionStatus | null> {\n        const logger = this._logger.create(\"querySessionStatus\");\n        const {\n            silentRequestTimeoutInSeconds,\n            ...requestArgs\n        } = args;\n        const url = this.settings.silent_redirect_uri;\n        if (!url) {\n            logger.throw(new Error(\"No silent_redirect_uri configured\"));\n        }\n\n        const user = await this._loadUser();\n        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\n        const navResponse = await this._signinStart({\n            request_type: \"si:s\", // this acts like a signin silent\n            redirect_uri: url,\n            prompt: \"none\",\n            id_token_hint: this.settings.includeIdTokenInSilentRenew ? user?.id_token : undefined,\n            response_type: this.settings.query_status_response_type,\n            scope: \"openid\",\n            skipUserInfo: true,\n            ...requestArgs,\n        }, handle);\n        try {\n            const signinResponse = await this._client.processSigninResponse(navResponse.url);\n            logger.debug(\"got signin response\");\n\n            if (signinResponse.session_state && signinResponse.profile.sub) {\n                logger.info(\"success for subject\", signinResponse.profile.sub);\n                return {\n                    session_state: signinResponse.session_state,\n                    sub: signinResponse.profile.sub,\n                    sid: signinResponse.profile.sid,\n                };\n            }\n\n            logger.info(\"success, user not authenticated\");\n            return null;\n        }\n        catch (err) {\n            if (this.settings.monitorAnonymousSession && err instanceof ErrorResponse) {\n                switch (err.error) {\n                    case \"login_required\":\n                    case \"consent_required\":\n                    case \"interaction_required\":\n                    case \"account_selection_required\":\n                        logger.info(\"success for anonymous user\");\n                        return {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            session_state: err.session_state!,\n                        };\n                }\n            }\n            throw err;\n        }\n    }\n\n    protected async _signin(args: CreateSigninRequestArgs, handle: IWindow, verifySub?: string): Promise<User> {\n        const navResponse = await this._signinStart(args, handle);\n        return await this._signinEnd(navResponse.url, verifySub);\n    }\n    protected async _signinStart(args: CreateSigninRequestArgs, handle: IWindow): Promise<NavigateResponse> {\n        const logger = this._logger.create(\"_signinStart\");\n\n        try {\n            const signinRequest = await this._client.createSigninRequest(args);\n            logger.debug(\"got signin request\");\n\n            return await handle.navigate({\n                url: signinRequest.url,\n                state: signinRequest.state.id,\n                response_mode: signinRequest.state.response_mode,\n                scriptOrigin: this.settings.iframeScriptOrigin,\n            });\n        }\n        catch (err) {\n            logger.debug(\"error after preparing navigator, closing navigator window\");\n            handle.close();\n            throw err;\n        }\n    }\n    protected async _signinEnd(url: string, verifySub?: string): Promise<User> {\n        const logger = this._logger.create(\"_signinEnd\");\n        const signinResponse = await this._client.processSigninResponse(url);\n        logger.debug(\"got signin response\");\n\n        const user = await this._buildUser(signinResponse, verifySub);\n        return user;\n    }\n\n    protected async _buildUser(signinResponse: SigninResponse, verifySub?: string) {\n        const logger = this._logger.create(\"_buildUser\");\n        const user = new User(signinResponse);\n        if (verifySub) {\n            if (verifySub !== user.profile.sub) {\n                logger.debug(\"current user does not match user returned from signin. sub from signin:\", user.profile.sub);\n                throw new ErrorResponse({ ...signinResponse, error: \"login_required\" });\n            }\n            logger.debug(\"current user matches user returned from signin\");\n        }\n\n        await this.storeUser(user);\n        logger.debug(\"user stored\");\n        this._events.load(user);\n\n        return user;\n    }\n\n    /**\n     * Returns promise to trigger a redirect of the current window to the end session endpoint.\n     */\n    public async signoutRedirect(args: SignoutRedirectArgs = {}): Promise<void> {\n        const logger = this._logger.create(\"signoutRedirect\");\n        const {\n            redirectMethod,\n            ...requestArgs\n        } = args;\n        const handle = await this._redirectNavigator.prepare({ redirectMethod });\n        await this._signoutStart({\n            request_type: \"so:r\",\n            post_logout_redirect_uri: this.settings.post_logout_redirect_uri,\n            ...requestArgs,\n        }, handle);\n        logger.info(\"success\");\n    }\n\n    /**\n     * Returns promise to process response from the end session endpoint.\n     */\n    public async signoutRedirectCallback(url = window.location.href): Promise<SignoutResponse> {\n        const logger = this._logger.create(\"signoutRedirectCallback\");\n        const response = await this._signoutEnd(url);\n        logger.info(\"success\");\n        return response;\n    }\n\n    /**\n     * Returns promise to trigger a redirect of a popup window window to the end session endpoint.\n     */\n    public async signoutPopup(args: SignoutPopupArgs = {}): Promise<void> {\n        const logger = this._logger.create(\"signoutPopup\");\n        const {\n            popupWindowFeatures,\n            popupWindowTarget,\n            ...requestArgs\n        } = args;\n        const url = this.settings.popup_post_logout_redirect_uri;\n\n        const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget });\n        await this._signout({\n            request_type: \"so:p\",\n            post_logout_redirect_uri: url,\n            // we're putting a dummy entry in here because we\n            // need a unique id from the state for notification\n            // to the parent window, which is necessary if we\n            // plan to return back to the client after signout\n            // and so we can close the popup after signout\n            state: url == null ? undefined : {},\n            ...requestArgs,\n        }, handle);\n        logger.info(\"success\");\n    }\n\n    /**\n     * Returns promise to process response from the end session endpoint from a popup window.\n     */\n    public async signoutPopupCallback(url = window.location.href, keepOpen = false): Promise<void> {\n        const logger = this._logger.create(\"signoutPopupCallback\");\n        await this._popupNavigator.callback(url, { keepOpen });\n        logger.info(\"success\");\n    }\n\n    protected async _signout(args: CreateSignoutRequestArgs, handle: IWindow): Promise<SignoutResponse> {\n        const navResponse = await this._signoutStart(args, handle);\n        return await this._signoutEnd(navResponse.url);\n    }\n    protected async _signoutStart(args: CreateSignoutRequestArgs = {}, handle: IWindow): Promise<NavigateResponse> {\n        const logger = this._logger.create(\"_signoutStart\");\n\n        try {\n            const user = await this._loadUser();\n            logger.debug(\"loaded current user from storage\");\n\n            if (this.settings.revokeTokensOnSignout) {\n                await this._revokeInternal(user);\n            }\n\n            const id_token = args.id_token_hint || user && user.id_token;\n            if (id_token) {\n                logger.debug(\"setting id_token_hint in signout request\");\n                args.id_token_hint = id_token;\n            }\n\n            await this.removeUser();\n            logger.debug(\"user removed, creating signout request\");\n\n            const signoutRequest = await this._client.createSignoutRequest(args);\n            logger.debug(\"got signout request\");\n\n            return await handle.navigate({\n                url: signoutRequest.url,\n                state: signoutRequest.state?.id,\n                scriptOrigin: this.settings.iframeScriptOrigin,\n            });\n        }\n        catch (err) {\n            logger.debug(\"error after preparing navigator, closing navigator window\");\n            handle.close();\n            throw err;\n        }\n    }\n    protected async _signoutEnd(url: string): Promise<SignoutResponse> {\n        const logger = this._logger.create(\"_signoutEnd\");\n        const signoutResponse = await this._client.processSignoutResponse(url);\n        logger.debug(\"got signout response\");\n\n        return signoutResponse;\n    }\n\n    /**\n     * Returns promise to trigger a silent request (via an iframe) to the end session endpoint.\n     */\n    public async signoutSilent(args: SignoutSilentArgs = {}): Promise<void> {\n        const logger = this._logger.create(\"signoutSilent\");\n        const {\n            silentRequestTimeoutInSeconds,\n            ...requestArgs\n        } = args;\n\n        const id_token_hint = this.settings.includeIdTokenInSilentSignout\n            ? (await this._loadUser())?.id_token\n            : undefined;\n\n        const url = this.settings.popup_post_logout_redirect_uri;\n        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\n        await this._signout({\n            request_type: \"so:s\",\n            post_logout_redirect_uri: url,\n            id_token_hint: id_token_hint,\n            ...requestArgs,\n        }, handle);\n\n        logger.info(\"success\");\n    }\n\n    /**\n     * Returns promise to notify the parent window of response from the end session endpoint.\n     */\n    public async signoutSilentCallback(url = window.location.href): Promise<void> {\n        const logger = this._logger.create(\"signoutSilentCallback\");\n        await this._iframeNavigator.callback(url);\n        logger.info(\"success\");\n    }\n\n    public async revokeTokens(types?: RevokeTokensTypes): Promise<void> {\n        const user = await this._loadUser();\n        await this._revokeInternal(user, types);\n    }\n\n    protected async _revokeInternal(user: User | null, types = this.settings.revokeTokenTypes): Promise<void> {\n        const logger = this._logger.create(\"_revokeInternal\");\n        if (!user) return;\n\n        const typesPresent = types.filter(type => typeof user[type] === \"string\");\n\n        if (!typesPresent.length) {\n            logger.debug(\"no need to revoke due to no token(s)\");\n            return;\n        }\n\n        // don't Promise.all, order matters\n        for (const type of typesPresent) {\n            await this._client.revokeToken(\n                user[type]!, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                type,\n            );\n            logger.info(`${type} revoked successfully`);\n            if (type !== \"access_token\") {\n                user[type] = null as never;\n            }\n        }\n\n        await this.storeUser(user);\n        logger.debug(\"user stored\");\n        this._events.load(user);\n    }\n\n    /**\n     * Enables silent renew for the `UserManager`.\n     */\n    public startSilentRenew(): void {\n        this._logger.create(\"startSilentRenew\");\n        void this._silentRenewService.start();\n    }\n\n    /**\n     * Disables silent renew for the `UserManager`.\n     */\n    public stopSilentRenew(): void {\n        this._silentRenewService.stop();\n    }\n\n    protected get _userStoreKey(): string {\n        return `user:${this.settings.authority}:${this.settings.client_id}`;\n    }\n\n    protected async _loadUser(): Promise<User | null> {\n        const logger = this._logger.create(\"_loadUser\");\n        const storageString = await this.settings.userStore.get(this._userStoreKey);\n        if (storageString) {\n            logger.debug(\"user storageString loaded\");\n            return User.fromStorageString(storageString);\n        }\n\n        logger.debug(\"no user storageString\");\n        return null;\n    }\n\n    public async storeUser(user: User | null): Promise<void> {\n        const logger = this._logger.create(\"storeUser\");\n        if (user) {\n            logger.debug(\"storing user\");\n            const storageString = user.toStorageString();\n            await this.settings.userStore.set(this._userStoreKey, storageString);\n        }\n        else {\n            this._logger.debug(\"removing user\");\n            await this.settings.userStore.remove(this._userStoreKey);\n        }\n    }\n\n    /**\n     * Removes stale state entries in storage for incomplete authorize requests.\n     */\n    public async clearStaleState(): Promise<void> {\n        await this._client.clearStaleState();\n    }\n}\n","{\n  \"name\": \"oidc-client-ts\",\n  \"version\": \"2.3.0\",\n  \"description\": \"OpenID Connect (OIDC) & OAuth2 client library\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com:authts/oidc-client-ts.git\"\n  },\n  \"homepage\": \"https://github.com/authts/oidc-client-ts#readme\",\n  \"license\": \"Apache-2.0\",\n  \"main\": \"dist/umd/oidc-client-ts.js\",\n  \"types\": \"dist/types/oidc-client-ts.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/types/oidc-client-ts.d.ts\",\n      \"import\": \"./dist/esm/oidc-client-ts.js\",\n      \"require\": \"./dist/umd/oidc-client-ts.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"keywords\": [\n    \"authentication\",\n    \"oauth2\",\n    \"oidc\",\n    \"openid\",\n    \"OpenID Connect\"\n  ],\n  \"scripts\": {\n    \"build\": \"node scripts/build.js && npm run build-types\",\n    \"build-types\": \"tsc -p tsconfig.build.json && api-extractor run\",\n    \"clean\": \"git clean -fdX dist lib *.tsbuildinfo\",\n    \"prepack\": \"npm run build\",\n    \"test\": \"tsc && jest\",\n    \"typedoc\": \"typedoc\",\n    \"lint\": \"eslint --max-warnings=0 --cache .\",\n    \"prepare\": \"husky install\"\n  },\n  \"dependencies\": {\n    \"crypto-js\": \"^4.1.1\",\n    \"jwt-decode\": \"^3.1.2\"\n  },\n  \"devDependencies\": {\n    \"@microsoft/api-extractor\": \"^7.35.0\",\n    \"@testing-library/jest-dom\": \"^6.0.0\",\n    \"@types/crypto-js\": \"^4.0.2\",\n    \"@types/jest\": \"^29.2.3\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.4.1\",\n    \"@typescript-eslint/parser\": \"^6.4.1\",\n    \"esbuild\": \"^0.17.0\",\n    \"eslint\": \"^8.5.0\",\n    \"eslint-plugin-testing-library\": \"^6.0.0\",\n    \"http-proxy-middleware\": \"^2.0.1\",\n    \"husky\": \"^8.0.1\",\n    \"jest\": \"^29.3.1\",\n    \"jest-environment-jsdom\": \"^29.3.1\",\n    \"jest-mock\": \"^29.3.1\",\n    \"lint-staged\": \"^14.0.0\",\n    \"ts-jest\": \"^29.0.3\",\n    \"typedoc\": \"^0.25.0\",\n    \"typescript\": \"~5.0.4\",\n    \"yn\": \"^5.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">=12.13.0\"\n  },\n  \"lint-staged\": {\n    \"*.{js,jsx,ts,tsx}\": \"eslint --cache --fix\"\n  }\n}\n","// @ts-expect-error avoid enabling resolveJsonModule to keep build process simple\nimport { version } from \"../package.json\";\n\n/**\n * @public\n */\nexport const Version: string = version;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}